/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetCollectionCommitRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCollectionCommitRequest{}

// GetCollectionCommitRequest struct for GetCollectionCommitRequest
type GetCollectionCommitRequest struct {
	// a list of zero or more collection offset fences
	Name []string `json:"name,omitempty"`
}

// NewGetCollectionCommitRequest instantiates a new GetCollectionCommitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCollectionCommitRequest() *GetCollectionCommitRequest {
	this := GetCollectionCommitRequest{}
	return &this
}

// NewGetCollectionCommitRequestWithDefaults instantiates a new GetCollectionCommitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCollectionCommitRequestWithDefaults() *GetCollectionCommitRequest {
	this := GetCollectionCommitRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetCollectionCommitRequest) GetName() []string {
	if o == nil || IsNil(o.Name) {
		var ret []string
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCollectionCommitRequest) GetNameOk() ([]string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetCollectionCommitRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given []string and assigns it to the Name field.
func (o *GetCollectionCommitRequest) SetName(v []string) {
	o.Name = v
}

func (o GetCollectionCommitRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCollectionCommitRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableGetCollectionCommitRequest struct {
	value *GetCollectionCommitRequest
	isSet bool
}

func (v NullableGetCollectionCommitRequest) Get() *GetCollectionCommitRequest {
	return v.value
}

func (v *NullableGetCollectionCommitRequest) Set(val *GetCollectionCommitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCollectionCommitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCollectionCommitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCollectionCommitRequest(val *GetCollectionCommitRequest) *NullableGetCollectionCommitRequest {
	return &NullableGetCollectionCommitRequest{value: val, isSet: true}
}

func (v NullableGetCollectionCommitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCollectionCommitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


