/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchDocumentsResponse struct for PatchDocumentsResponse
type PatchDocumentsResponse struct {
	Data []DocumentStatus `json:"data"`
}

// NewPatchDocumentsResponse instantiates a new PatchDocumentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDocumentsResponse(data []DocumentStatus) *PatchDocumentsResponse {
	this := PatchDocumentsResponse{}
	this.Data = data
	return &this
}

// NewPatchDocumentsResponseWithDefaults instantiates a new PatchDocumentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDocumentsResponseWithDefaults() *PatchDocumentsResponse {
	this := PatchDocumentsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *PatchDocumentsResponse) GetData() []DocumentStatus {
	if o == nil {
		var ret []DocumentStatus
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PatchDocumentsResponse) GetDataOk() (*[]DocumentStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *PatchDocumentsResponse) SetData(v []DocumentStatus) {
	o.Data = v
}

func (o PatchDocumentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullablePatchDocumentsResponse struct {
	value *PatchDocumentsResponse
	isSet bool
}

func (v NullablePatchDocumentsResponse) Get() *PatchDocumentsResponse {
	return v.value
}

func (v *NullablePatchDocumentsResponse) Set(val *PatchDocumentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDocumentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDocumentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDocumentsResponse(val *PatchDocumentsResponse) *NullablePatchDocumentsResponse {
	return &NullablePatchDocumentsResponse{value: val, isSet: true}
}

func (v NullablePatchDocumentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDocumentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


