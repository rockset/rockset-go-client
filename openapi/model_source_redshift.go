/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceRedshift struct for SourceRedshift
type SourceRedshift struct {
	// name of the database in Redshift Cluster
	Database string `json:"database"`
	// schema which contains the Redshift table
	Schema string `json:"schema"`
	// name of Redshift table containing data
	TableName string `json:"table_name"`
	// field in Redshift source table to monitor for updates
	IncrementalField *string `json:"incremental_field,omitempty"`
}

// NewSourceRedshift instantiates a new SourceRedshift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRedshift(database string, schema string, tableName string) *SourceRedshift {
	this := SourceRedshift{}
	this.Database = database
	this.Schema = schema
	this.TableName = tableName
	return &this
}

// NewSourceRedshiftWithDefaults instantiates a new SourceRedshift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRedshiftWithDefaults() *SourceRedshift {
	this := SourceRedshift{}
	return &this
}

// GetDatabase returns the Database field value
func (o *SourceRedshift) GetDatabase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Database
}

// GetDatabaseOk returns a tuple with the Database field value
// and a boolean to check if the value has been set.
func (o *SourceRedshift) GetDatabaseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Database, true
}

// SetDatabase sets field value
func (o *SourceRedshift) SetDatabase(v string) {
	o.Database = v
}

// GetSchema returns the Schema field value
func (o *SourceRedshift) GetSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *SourceRedshift) GetSchemaOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *SourceRedshift) SetSchema(v string) {
	o.Schema = v
}

// GetTableName returns the TableName field value
func (o *SourceRedshift) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *SourceRedshift) GetTableNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *SourceRedshift) SetTableName(v string) {
	o.TableName = v
}

// GetIncrementalField returns the IncrementalField field value if set, zero value otherwise.
func (o *SourceRedshift) GetIncrementalField() string {
	if o == nil || o.IncrementalField == nil {
		var ret string
		return ret
	}
	return *o.IncrementalField
}

// GetIncrementalFieldOk returns a tuple with the IncrementalField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRedshift) GetIncrementalFieldOk() (*string, bool) {
	if o == nil || o.IncrementalField == nil {
		return nil, false
	}
	return o.IncrementalField, true
}

// HasIncrementalField returns a boolean if a field has been set.
func (o *SourceRedshift) HasIncrementalField() bool {
	if o != nil && o.IncrementalField != nil {
		return true
	}

	return false
}

// SetIncrementalField gets a reference to the given string and assigns it to the IncrementalField field.
func (o *SourceRedshift) SetIncrementalField(v string) {
	o.IncrementalField = &v
}

func (o SourceRedshift) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["database"] = o.Database
	}
	if true {
		toSerialize["schema"] = o.Schema
	}
	if true {
		toSerialize["table_name"] = o.TableName
	}
	if o.IncrementalField != nil {
		toSerialize["incremental_field"] = o.IncrementalField
	}
	return json.Marshal(toSerialize)
}

type NullableSourceRedshift struct {
	value *SourceRedshift
	isSet bool
}

func (v NullableSourceRedshift) Get() *SourceRedshift {
	return v.value
}

func (v *NullableSourceRedshift) Set(val *SourceRedshift) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRedshift) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRedshift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRedshift(val *SourceRedshift) *NullableSourceRedshift {
	return &NullableSourceRedshift{value: val, isSet: true}
}

func (v NullableSourceRedshift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRedshift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


