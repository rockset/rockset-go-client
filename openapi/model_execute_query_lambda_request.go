/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteQueryLambdaRequest struct for ExecuteQueryLambdaRequest
type ExecuteQueryLambdaRequest struct {
	// If true, the query will run asynchronously for up to 30 minutes. The query request will immediately return with a query id that can be used to retrieve the query status and results. If false or not specified, the query will return with results once completed or timeout after 2 minutes. (To return results directly for shorter queries while still allowing a timeout of up to 30 minutes, set `async_options.client_timeout_ms`.) 
	Async *bool `json:"async,omitempty"`
	AsyncOptions *AsyncQueryOptions `json:"async_options,omitempty"`
	// If query execution takes longer than this value, debug information will be logged. If the query text includes the DEBUG hint and this parameter is also provided, only this value will be used and the DEBUG hint will be ignored.
	DebugThresholdMs *int64 `json:"debug_threshold_ms,omitempty"`
	// Row limit to use if no limit specified in the SQL query text.
	DefaultRowLimit *int32 `json:"default_row_limit,omitempty"`
	// Whether to generate warnings.
	GenerateWarnings *bool `json:"generate_warnings,omitempty"`
	// [DEPRECATED] Use `max_initial_results` instead. Number of documents to return in addition to paginating for this query call. Only relevant if `paginate` flag is also set.
	InitialPaginateResponseDocCount *int32 `json:"initial_paginate_response_doc_count,omitempty"`
	// This limits the maximum number of results in the initial response. A pagination cursor is returned if the number of results exceeds `max_initial_results`. If `max_initial_results` is not set, all results will be returned in the initial response up to 4 million. If `max_initial_results` is set, the value must be between 0 and 100,000. If the query is async and `client_timeout_ms` is exceeded, `max_initial_results` does not apply since none of the results will be returned with the initial response.
	MaxInitialResults *int64 `json:"max_initial_results,omitempty"`
	// Flag to paginate and store the results of this query for later / sequential retrieval.
	Paginate *bool `json:"paginate,omitempty"`
	// List of named parameters.
	Parameters []QueryParameter `json:"parameters,omitempty"`
	// If a query exceeds the specified timeout, the query will automatically stop and return an error. The query timeout defaults to a maximum of 2 minutes. If `async` is true, the query timeout defaults to a maximum of 30 minutes.
	TimeoutMs *int64 `json:"timeout_ms,omitempty"`
	// Virtual instance on which to run the query.
	VirtualInstanceId *string `json:"virtual_instance_id,omitempty"`
}

// NewExecuteQueryLambdaRequest instantiates a new ExecuteQueryLambdaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteQueryLambdaRequest() *ExecuteQueryLambdaRequest {
	this := ExecuteQueryLambdaRequest{}
	return &this
}

// NewExecuteQueryLambdaRequestWithDefaults instantiates a new ExecuteQueryLambdaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteQueryLambdaRequestWithDefaults() *ExecuteQueryLambdaRequest {
	this := ExecuteQueryLambdaRequest{}
	return &this
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetAsync() bool {
	if o == nil || o.Async == nil {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetAsyncOk() (*bool, bool) {
	if o == nil || o.Async == nil {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasAsync() bool {
	if o != nil && o.Async != nil {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *ExecuteQueryLambdaRequest) SetAsync(v bool) {
	o.Async = &v
}

// GetAsyncOptions returns the AsyncOptions field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetAsyncOptions() AsyncQueryOptions {
	if o == nil || o.AsyncOptions == nil {
		var ret AsyncQueryOptions
		return ret
	}
	return *o.AsyncOptions
}

// GetAsyncOptionsOk returns a tuple with the AsyncOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetAsyncOptionsOk() (*AsyncQueryOptions, bool) {
	if o == nil || o.AsyncOptions == nil {
		return nil, false
	}
	return o.AsyncOptions, true
}

// HasAsyncOptions returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasAsyncOptions() bool {
	if o != nil && o.AsyncOptions != nil {
		return true
	}

	return false
}

// SetAsyncOptions gets a reference to the given AsyncQueryOptions and assigns it to the AsyncOptions field.
func (o *ExecuteQueryLambdaRequest) SetAsyncOptions(v AsyncQueryOptions) {
	o.AsyncOptions = &v
}

// GetDebugThresholdMs returns the DebugThresholdMs field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetDebugThresholdMs() int64 {
	if o == nil || o.DebugThresholdMs == nil {
		var ret int64
		return ret
	}
	return *o.DebugThresholdMs
}

// GetDebugThresholdMsOk returns a tuple with the DebugThresholdMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetDebugThresholdMsOk() (*int64, bool) {
	if o == nil || o.DebugThresholdMs == nil {
		return nil, false
	}
	return o.DebugThresholdMs, true
}

// HasDebugThresholdMs returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasDebugThresholdMs() bool {
	if o != nil && o.DebugThresholdMs != nil {
		return true
	}

	return false
}

// SetDebugThresholdMs gets a reference to the given int64 and assigns it to the DebugThresholdMs field.
func (o *ExecuteQueryLambdaRequest) SetDebugThresholdMs(v int64) {
	o.DebugThresholdMs = &v
}

// GetDefaultRowLimit returns the DefaultRowLimit field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetDefaultRowLimit() int32 {
	if o == nil || o.DefaultRowLimit == nil {
		var ret int32
		return ret
	}
	return *o.DefaultRowLimit
}

// GetDefaultRowLimitOk returns a tuple with the DefaultRowLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetDefaultRowLimitOk() (*int32, bool) {
	if o == nil || o.DefaultRowLimit == nil {
		return nil, false
	}
	return o.DefaultRowLimit, true
}

// HasDefaultRowLimit returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasDefaultRowLimit() bool {
	if o != nil && o.DefaultRowLimit != nil {
		return true
	}

	return false
}

// SetDefaultRowLimit gets a reference to the given int32 and assigns it to the DefaultRowLimit field.
func (o *ExecuteQueryLambdaRequest) SetDefaultRowLimit(v int32) {
	o.DefaultRowLimit = &v
}

// GetGenerateWarnings returns the GenerateWarnings field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetGenerateWarnings() bool {
	if o == nil || o.GenerateWarnings == nil {
		var ret bool
		return ret
	}
	return *o.GenerateWarnings
}

// GetGenerateWarningsOk returns a tuple with the GenerateWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetGenerateWarningsOk() (*bool, bool) {
	if o == nil || o.GenerateWarnings == nil {
		return nil, false
	}
	return o.GenerateWarnings, true
}

// HasGenerateWarnings returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasGenerateWarnings() bool {
	if o != nil && o.GenerateWarnings != nil {
		return true
	}

	return false
}

// SetGenerateWarnings gets a reference to the given bool and assigns it to the GenerateWarnings field.
func (o *ExecuteQueryLambdaRequest) SetGenerateWarnings(v bool) {
	o.GenerateWarnings = &v
}

// GetInitialPaginateResponseDocCount returns the InitialPaginateResponseDocCount field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetInitialPaginateResponseDocCount() int32 {
	if o == nil || o.InitialPaginateResponseDocCount == nil {
		var ret int32
		return ret
	}
	return *o.InitialPaginateResponseDocCount
}

// GetInitialPaginateResponseDocCountOk returns a tuple with the InitialPaginateResponseDocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetInitialPaginateResponseDocCountOk() (*int32, bool) {
	if o == nil || o.InitialPaginateResponseDocCount == nil {
		return nil, false
	}
	return o.InitialPaginateResponseDocCount, true
}

// HasInitialPaginateResponseDocCount returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasInitialPaginateResponseDocCount() bool {
	if o != nil && o.InitialPaginateResponseDocCount != nil {
		return true
	}

	return false
}

// SetInitialPaginateResponseDocCount gets a reference to the given int32 and assigns it to the InitialPaginateResponseDocCount field.
func (o *ExecuteQueryLambdaRequest) SetInitialPaginateResponseDocCount(v int32) {
	o.InitialPaginateResponseDocCount = &v
}

// GetMaxInitialResults returns the MaxInitialResults field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetMaxInitialResults() int64 {
	if o == nil || o.MaxInitialResults == nil {
		var ret int64
		return ret
	}
	return *o.MaxInitialResults
}

// GetMaxInitialResultsOk returns a tuple with the MaxInitialResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetMaxInitialResultsOk() (*int64, bool) {
	if o == nil || o.MaxInitialResults == nil {
		return nil, false
	}
	return o.MaxInitialResults, true
}

// HasMaxInitialResults returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasMaxInitialResults() bool {
	if o != nil && o.MaxInitialResults != nil {
		return true
	}

	return false
}

// SetMaxInitialResults gets a reference to the given int64 and assigns it to the MaxInitialResults field.
func (o *ExecuteQueryLambdaRequest) SetMaxInitialResults(v int64) {
	o.MaxInitialResults = &v
}

// GetPaginate returns the Paginate field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetPaginate() bool {
	if o == nil || o.Paginate == nil {
		var ret bool
		return ret
	}
	return *o.Paginate
}

// GetPaginateOk returns a tuple with the Paginate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetPaginateOk() (*bool, bool) {
	if o == nil || o.Paginate == nil {
		return nil, false
	}
	return o.Paginate, true
}

// HasPaginate returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasPaginate() bool {
	if o != nil && o.Paginate != nil {
		return true
	}

	return false
}

// SetPaginate gets a reference to the given bool and assigns it to the Paginate field.
func (o *ExecuteQueryLambdaRequest) SetPaginate(v bool) {
	o.Paginate = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetParameters() []QueryParameter {
	if o == nil || o.Parameters == nil {
		var ret []QueryParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetParametersOk() ([]QueryParameter, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []QueryParameter and assigns it to the Parameters field.
func (o *ExecuteQueryLambdaRequest) SetParameters(v []QueryParameter) {
	o.Parameters = v
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetTimeoutMs() int64 {
	if o == nil || o.TimeoutMs == nil {
		var ret int64
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetTimeoutMsOk() (*int64, bool) {
	if o == nil || o.TimeoutMs == nil {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasTimeoutMs() bool {
	if o != nil && o.TimeoutMs != nil {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given int64 and assigns it to the TimeoutMs field.
func (o *ExecuteQueryLambdaRequest) SetTimeoutMs(v int64) {
	o.TimeoutMs = &v
}

// GetVirtualInstanceId returns the VirtualInstanceId field value if set, zero value otherwise.
func (o *ExecuteQueryLambdaRequest) GetVirtualInstanceId() string {
	if o == nil || o.VirtualInstanceId == nil {
		var ret string
		return ret
	}
	return *o.VirtualInstanceId
}

// GetVirtualInstanceIdOk returns a tuple with the VirtualInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteQueryLambdaRequest) GetVirtualInstanceIdOk() (*string, bool) {
	if o == nil || o.VirtualInstanceId == nil {
		return nil, false
	}
	return o.VirtualInstanceId, true
}

// HasVirtualInstanceId returns a boolean if a field has been set.
func (o *ExecuteQueryLambdaRequest) HasVirtualInstanceId() bool {
	if o != nil && o.VirtualInstanceId != nil {
		return true
	}

	return false
}

// SetVirtualInstanceId gets a reference to the given string and assigns it to the VirtualInstanceId field.
func (o *ExecuteQueryLambdaRequest) SetVirtualInstanceId(v string) {
	o.VirtualInstanceId = &v
}

func (o ExecuteQueryLambdaRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Async != nil {
		toSerialize["async"] = o.Async
	}
	if o.AsyncOptions != nil {
		toSerialize["async_options"] = o.AsyncOptions
	}
	if o.DebugThresholdMs != nil {
		toSerialize["debug_threshold_ms"] = o.DebugThresholdMs
	}
	if o.DefaultRowLimit != nil {
		toSerialize["default_row_limit"] = o.DefaultRowLimit
	}
	if o.GenerateWarnings != nil {
		toSerialize["generate_warnings"] = o.GenerateWarnings
	}
	if o.InitialPaginateResponseDocCount != nil {
		toSerialize["initial_paginate_response_doc_count"] = o.InitialPaginateResponseDocCount
	}
	if o.MaxInitialResults != nil {
		toSerialize["max_initial_results"] = o.MaxInitialResults
	}
	if o.Paginate != nil {
		toSerialize["paginate"] = o.Paginate
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	if o.TimeoutMs != nil {
		toSerialize["timeout_ms"] = o.TimeoutMs
	}
	if o.VirtualInstanceId != nil {
		toSerialize["virtual_instance_id"] = o.VirtualInstanceId
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteQueryLambdaRequest struct {
	value *ExecuteQueryLambdaRequest
	isSet bool
}

func (v NullableExecuteQueryLambdaRequest) Get() *ExecuteQueryLambdaRequest {
	return v.value
}

func (v *NullableExecuteQueryLambdaRequest) Set(val *ExecuteQueryLambdaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteQueryLambdaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteQueryLambdaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteQueryLambdaRequest(val *ExecuteQueryLambdaRequest) *NullableExecuteQueryLambdaRequest {
	return &NullableExecuteQueryLambdaRequest{value: val, isSet: true}
}

func (v NullableExecuteQueryLambdaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteQueryLambdaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


