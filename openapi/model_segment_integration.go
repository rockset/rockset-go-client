/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SegmentIntegration struct for SegmentIntegration
type SegmentIntegration struct {
	// segment connection string
	ConnectionString *string `json:"connection_string,omitempty"`
}

// NewSegmentIntegration instantiates a new SegmentIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentIntegration() *SegmentIntegration {
	this := SegmentIntegration{}
	return &this
}

// NewSegmentIntegrationWithDefaults instantiates a new SegmentIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentIntegrationWithDefaults() *SegmentIntegration {
	this := SegmentIntegration{}
	return &this
}

// GetConnectionString returns the ConnectionString field value if set, zero value otherwise.
func (o *SegmentIntegration) GetConnectionString() string {
	if o == nil || o.ConnectionString == nil {
		var ret string
		return ret
	}
	return *o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentIntegration) GetConnectionStringOk() (*string, bool) {
	if o == nil || o.ConnectionString == nil {
		return nil, false
	}
	return o.ConnectionString, true
}

// HasConnectionString returns a boolean if a field has been set.
func (o *SegmentIntegration) HasConnectionString() bool {
	if o != nil && o.ConnectionString != nil {
		return true
	}

	return false
}

// SetConnectionString gets a reference to the given string and assigns it to the ConnectionString field.
func (o *SegmentIntegration) SetConnectionString(v string) {
	o.ConnectionString = &v
}

func (o SegmentIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionString != nil {
		toSerialize["connection_string"] = o.ConnectionString
	}
	return json.Marshal(toSerialize)
}

type NullableSegmentIntegration struct {
	value *SegmentIntegration
	isSet bool
}

func (v NullableSegmentIntegration) Get() *SegmentIntegration {
	return v.value
}

func (v *NullableSegmentIntegration) Set(val *SegmentIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentIntegration(val *SegmentIntegration) *NullableSegmentIntegration {
	return &NullableSegmentIntegration{value: val, isSet: true}
}

func (v NullableSegmentIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


