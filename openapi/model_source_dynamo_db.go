/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceDynamoDb type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceDynamoDb{}

// SourceDynamoDb struct for SourceDynamoDb
type SourceDynamoDb struct {
	// AWS region name of DynamoDB table, by default us-west-2 is used.
	AwsRegion *string `json:"aws_region,omitempty"`
	CurrentStatus *StatusDynamoDbV2 `json:"current_status,omitempty"`
	// Max RCU usage for scan.
	Rcu *int64 `json:"rcu,omitempty"`
	Status *StatusDynamoDb `json:"status,omitempty"`
	// Name of DynamoDB table containing data.
	TableName string `json:"table_name"`
	// Whether to use DynamoDB Scan API for the initial scan.
	UseScanApi *bool `json:"use_scan_api,omitempty"`
}

// NewSourceDynamoDb instantiates a new SourceDynamoDb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceDynamoDb(tableName string) *SourceDynamoDb {
	this := SourceDynamoDb{}
	this.TableName = tableName
	return &this
}

// NewSourceDynamoDbWithDefaults instantiates a new SourceDynamoDb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceDynamoDbWithDefaults() *SourceDynamoDb {
	this := SourceDynamoDb{}
	return &this
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise.
func (o *SourceDynamoDb) GetAwsRegion() string {
	if o == nil || IsNil(o.AwsRegion) {
		var ret string
		return ret
	}
	return *o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetAwsRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegion) {
		return nil, false
	}
	return o.AwsRegion, true
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *SourceDynamoDb) HasAwsRegion() bool {
	if o != nil && !IsNil(o.AwsRegion) {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given string and assigns it to the AwsRegion field.
func (o *SourceDynamoDb) SetAwsRegion(v string) {
	o.AwsRegion = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *SourceDynamoDb) GetCurrentStatus() StatusDynamoDbV2 {
	if o == nil || IsNil(o.CurrentStatus) {
		var ret StatusDynamoDbV2
		return ret
	}
	return *o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetCurrentStatusOk() (*StatusDynamoDbV2, bool) {
	if o == nil || IsNil(o.CurrentStatus) {
		return nil, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *SourceDynamoDb) HasCurrentStatus() bool {
	if o != nil && !IsNil(o.CurrentStatus) {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given StatusDynamoDbV2 and assigns it to the CurrentStatus field.
func (o *SourceDynamoDb) SetCurrentStatus(v StatusDynamoDbV2) {
	o.CurrentStatus = &v
}

// GetRcu returns the Rcu field value if set, zero value otherwise.
func (o *SourceDynamoDb) GetRcu() int64 {
	if o == nil || IsNil(o.Rcu) {
		var ret int64
		return ret
	}
	return *o.Rcu
}

// GetRcuOk returns a tuple with the Rcu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetRcuOk() (*int64, bool) {
	if o == nil || IsNil(o.Rcu) {
		return nil, false
	}
	return o.Rcu, true
}

// HasRcu returns a boolean if a field has been set.
func (o *SourceDynamoDb) HasRcu() bool {
	if o != nil && !IsNil(o.Rcu) {
		return true
	}

	return false
}

// SetRcu gets a reference to the given int64 and assigns it to the Rcu field.
func (o *SourceDynamoDb) SetRcu(v int64) {
	o.Rcu = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SourceDynamoDb) GetStatus() StatusDynamoDb {
	if o == nil || IsNil(o.Status) {
		var ret StatusDynamoDb
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetStatusOk() (*StatusDynamoDb, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceDynamoDb) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusDynamoDb and assigns it to the Status field.
func (o *SourceDynamoDb) SetStatus(v StatusDynamoDb) {
	o.Status = &v
}

// GetTableName returns the TableName field value
func (o *SourceDynamoDb) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *SourceDynamoDb) SetTableName(v string) {
	o.TableName = v
}

// GetUseScanApi returns the UseScanApi field value if set, zero value otherwise.
func (o *SourceDynamoDb) GetUseScanApi() bool {
	if o == nil || IsNil(o.UseScanApi) {
		var ret bool
		return ret
	}
	return *o.UseScanApi
}

// GetUseScanApiOk returns a tuple with the UseScanApi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDb) GetUseScanApiOk() (*bool, bool) {
	if o == nil || IsNil(o.UseScanApi) {
		return nil, false
	}
	return o.UseScanApi, true
}

// HasUseScanApi returns a boolean if a field has been set.
func (o *SourceDynamoDb) HasUseScanApi() bool {
	if o != nil && !IsNil(o.UseScanApi) {
		return true
	}

	return false
}

// SetUseScanApi gets a reference to the given bool and assigns it to the UseScanApi field.
func (o *SourceDynamoDb) SetUseScanApi(v bool) {
	o.UseScanApi = &v
}

func (o SourceDynamoDb) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceDynamoDb) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsRegion) {
		toSerialize["aws_region"] = o.AwsRegion
	}
	if !IsNil(o.CurrentStatus) {
		toSerialize["current_status"] = o.CurrentStatus
	}
	if !IsNil(o.Rcu) {
		toSerialize["rcu"] = o.Rcu
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["table_name"] = o.TableName
	if !IsNil(o.UseScanApi) {
		toSerialize["use_scan_api"] = o.UseScanApi
	}
	return toSerialize, nil
}

type NullableSourceDynamoDb struct {
	value *SourceDynamoDb
	isSet bool
}

func (v NullableSourceDynamoDb) Get() *SourceDynamoDb {
	return v.value
}

func (v *NullableSourceDynamoDb) Set(val *SourceDynamoDb) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceDynamoDb) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceDynamoDb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceDynamoDb(val *SourceDynamoDb) *NullableSourceDynamoDb {
	return &NullableSourceDynamoDb{value: val, isSet: true}
}

func (v NullableSourceDynamoDb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceDynamoDb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


