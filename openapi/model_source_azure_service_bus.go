/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceAzureServiceBus struct for SourceAzureServiceBus
type SourceAzureServiceBus struct {
	Status *StatusAzureServiceBus `json:"status,omitempty"`
	// The subscription to read from the topic.
	Subscription *string `json:"subscription,omitempty"`
	// Name of the topic which rockset should ingest from.
	Topic *string `json:"topic,omitempty"`
}

// NewSourceAzureServiceBus instantiates a new SourceAzureServiceBus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAzureServiceBus() *SourceAzureServiceBus {
	this := SourceAzureServiceBus{}
	return &this
}

// NewSourceAzureServiceBusWithDefaults instantiates a new SourceAzureServiceBus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAzureServiceBusWithDefaults() *SourceAzureServiceBus {
	this := SourceAzureServiceBus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SourceAzureServiceBus) GetStatus() StatusAzureServiceBus {
	if o == nil || o.Status == nil {
		var ret StatusAzureServiceBus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureServiceBus) GetStatusOk() (*StatusAzureServiceBus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceAzureServiceBus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusAzureServiceBus and assigns it to the Status field.
func (o *SourceAzureServiceBus) SetStatus(v StatusAzureServiceBus) {
	o.Status = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *SourceAzureServiceBus) GetSubscription() string {
	if o == nil || o.Subscription == nil {
		var ret string
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureServiceBus) GetSubscriptionOk() (*string, bool) {
	if o == nil || o.Subscription == nil {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *SourceAzureServiceBus) HasSubscription() bool {
	if o != nil && o.Subscription != nil {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given string and assigns it to the Subscription field.
func (o *SourceAzureServiceBus) SetSubscription(v string) {
	o.Subscription = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *SourceAzureServiceBus) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureServiceBus) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *SourceAzureServiceBus) HasTopic() bool {
	if o != nil && o.Topic != nil {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *SourceAzureServiceBus) SetTopic(v string) {
	o.Topic = &v
}

func (o SourceAzureServiceBus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Subscription != nil {
		toSerialize["subscription"] = o.Subscription
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	return json.Marshal(toSerialize)
}

type NullableSourceAzureServiceBus struct {
	value *SourceAzureServiceBus
	isSet bool
}

func (v NullableSourceAzureServiceBus) Get() *SourceAzureServiceBus {
	return v.value
}

func (v *NullableSourceAzureServiceBus) Set(val *SourceAzureServiceBus) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAzureServiceBus) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAzureServiceBus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAzureServiceBus(val *SourceAzureServiceBus) *NullableSourceAzureServiceBus {
	return &NullableSourceAzureServiceBus{value: val, isSet: true}
}

func (v NullableSourceAzureServiceBus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAzureServiceBus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


