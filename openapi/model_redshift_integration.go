/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RedshiftIntegration struct for RedshiftIntegration
type RedshiftIntegration struct {
	AwsAccessKey *AwsAccessKey `json:"aws_access_key,omitempty"`
	// Username associated with Redshift cluster
	Username string `json:"username"`
	// Password associated with Redshift cluster
	Password string `json:"password"`
	// Redshift Cluster host
	Host string `json:"host"`
	// Redshift Cluster port
	Port int32 `json:"port"`
	// unload S3 bucket path
	S3BucketPath string `json:"s3_bucket_path"`
}

// NewRedshiftIntegration instantiates a new RedshiftIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedshiftIntegration(username string, password string, host string, port int32, s3BucketPath string) *RedshiftIntegration {
	this := RedshiftIntegration{}
	this.Username = username
	this.Password = password
	this.Host = host
	this.Port = port
	this.S3BucketPath = s3BucketPath
	return &this
}

// NewRedshiftIntegrationWithDefaults instantiates a new RedshiftIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedshiftIntegrationWithDefaults() *RedshiftIntegration {
	this := RedshiftIntegration{}
	return &this
}

// GetAwsAccessKey returns the AwsAccessKey field value if set, zero value otherwise.
func (o *RedshiftIntegration) GetAwsAccessKey() AwsAccessKey {
	if o == nil || o.AwsAccessKey == nil {
		var ret AwsAccessKey
		return ret
	}
	return *o.AwsAccessKey
}

// GetAwsAccessKeyOk returns a tuple with the AwsAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetAwsAccessKeyOk() (*AwsAccessKey, bool) {
	if o == nil || o.AwsAccessKey == nil {
		return nil, false
	}
	return o.AwsAccessKey, true
}

// HasAwsAccessKey returns a boolean if a field has been set.
func (o *RedshiftIntegration) HasAwsAccessKey() bool {
	if o != nil && o.AwsAccessKey != nil {
		return true
	}

	return false
}

// SetAwsAccessKey gets a reference to the given AwsAccessKey and assigns it to the AwsAccessKey field.
func (o *RedshiftIntegration) SetAwsAccessKey(v AwsAccessKey) {
	o.AwsAccessKey = &v
}

// GetUsername returns the Username field value
func (o *RedshiftIntegration) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *RedshiftIntegration) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *RedshiftIntegration) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *RedshiftIntegration) SetPassword(v string) {
	o.Password = v
}

// GetHost returns the Host field value
func (o *RedshiftIntegration) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *RedshiftIntegration) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *RedshiftIntegration) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *RedshiftIntegration) SetPort(v int32) {
	o.Port = v
}

// GetS3BucketPath returns the S3BucketPath field value
func (o *RedshiftIntegration) GetS3BucketPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S3BucketPath
}

// GetS3BucketPathOk returns a tuple with the S3BucketPath field value
// and a boolean to check if the value has been set.
func (o *RedshiftIntegration) GetS3BucketPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.S3BucketPath, true
}

// SetS3BucketPath sets field value
func (o *RedshiftIntegration) SetS3BucketPath(v string) {
	o.S3BucketPath = v
}

func (o RedshiftIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsAccessKey != nil {
		toSerialize["aws_access_key"] = o.AwsAccessKey
	}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["s3_bucket_path"] = o.S3BucketPath
	}
	return json.Marshal(toSerialize)
}

type NullableRedshiftIntegration struct {
	value *RedshiftIntegration
	isSet bool
}

func (v NullableRedshiftIntegration) Get() *RedshiftIntegration {
	return v.value
}

func (v *NullableRedshiftIntegration) Set(val *RedshiftIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableRedshiftIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableRedshiftIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedshiftIntegration(val *RedshiftIntegration) *NullableRedshiftIntegration {
	return &NullableRedshiftIntegration{value: val, isSet: true}
}

func (v NullableRedshiftIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedshiftIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


