/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the KafkaV3SecurityConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaV3SecurityConfig{}

// KafkaV3SecurityConfig struct for KafkaV3SecurityConfig
type KafkaV3SecurityConfig struct {
	ApiKey *string `json:"api_key,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// NewKafkaV3SecurityConfig instantiates a new KafkaV3SecurityConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaV3SecurityConfig() *KafkaV3SecurityConfig {
	this := KafkaV3SecurityConfig{}
	return &this
}

// NewKafkaV3SecurityConfigWithDefaults instantiates a new KafkaV3SecurityConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaV3SecurityConfigWithDefaults() *KafkaV3SecurityConfig {
	this := KafkaV3SecurityConfig{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *KafkaV3SecurityConfig) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaV3SecurityConfig) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *KafkaV3SecurityConfig) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *KafkaV3SecurityConfig) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *KafkaV3SecurityConfig) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaV3SecurityConfig) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *KafkaV3SecurityConfig) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *KafkaV3SecurityConfig) SetSecret(v string) {
	o.Secret = &v
}

func (o KafkaV3SecurityConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaV3SecurityConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	return toSerialize, nil
}

type NullableKafkaV3SecurityConfig struct {
	value *KafkaV3SecurityConfig
	isSet bool
}

func (v NullableKafkaV3SecurityConfig) Get() *KafkaV3SecurityConfig {
	return v.value
}

func (v *NullableKafkaV3SecurityConfig) Set(val *KafkaV3SecurityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaV3SecurityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaV3SecurityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaV3SecurityConfig(val *KafkaV3SecurityConfig) *NullableKafkaV3SecurityConfig {
	return &NullableKafkaV3SecurityConfig{value: val, isSet: true}
}

func (v NullableKafkaV3SecurityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaV3SecurityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


