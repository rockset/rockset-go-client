/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TLSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TLSConfig{}

// TLSConfig struct for TLSConfig
type TLSConfig struct {
	// PEM-formatted certificate chain of the Certificate Authority used to verify remote server. If empty, Rockset, will use publicly trusted CAs
	CaCert *string `json:"ca_cert,omitempty"`
	// PEM-formatted certificate chain to use for client authentication
	ClientCert string `json:"client_cert"`
	// Expiration date of the client certificate (represented as number of ms since epoch)
	ClientCertExpiry *int64 `json:"client_cert_expiry,omitempty"`
	// Subject of the client certificate, containing common name and other attributes
	ClientCertSubject *string `json:"client_cert_subject,omitempty"`
	// PEM-formatted private key to be used for client authentication
	ClientKey string `json:"client_key"`
}

// NewTLSConfig instantiates a new TLSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTLSConfig(clientCert string, clientKey string) *TLSConfig {
	this := TLSConfig{}
	this.ClientCert = clientCert
	this.ClientKey = clientKey
	return &this
}

// NewTLSConfigWithDefaults instantiates a new TLSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTLSConfigWithDefaults() *TLSConfig {
	this := TLSConfig{}
	return &this
}

// GetCaCert returns the CaCert field value if set, zero value otherwise.
func (o *TLSConfig) GetCaCert() string {
	if o == nil || IsNil(o.CaCert) {
		var ret string
		return ret
	}
	return *o.CaCert
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfig) GetCaCertOk() (*string, bool) {
	if o == nil || IsNil(o.CaCert) {
		return nil, false
	}
	return o.CaCert, true
}

// HasCaCert returns a boolean if a field has been set.
func (o *TLSConfig) HasCaCert() bool {
	if o != nil && !IsNil(o.CaCert) {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given string and assigns it to the CaCert field.
func (o *TLSConfig) SetCaCert(v string) {
	o.CaCert = &v
}

// GetClientCert returns the ClientCert field value
func (o *TLSConfig) GetClientCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientCert
}

// GetClientCertOk returns a tuple with the ClientCert field value
// and a boolean to check if the value has been set.
func (o *TLSConfig) GetClientCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCert, true
}

// SetClientCert sets field value
func (o *TLSConfig) SetClientCert(v string) {
	o.ClientCert = v
}

// GetClientCertExpiry returns the ClientCertExpiry field value if set, zero value otherwise.
func (o *TLSConfig) GetClientCertExpiry() int64 {
	if o == nil || IsNil(o.ClientCertExpiry) {
		var ret int64
		return ret
	}
	return *o.ClientCertExpiry
}

// GetClientCertExpiryOk returns a tuple with the ClientCertExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfig) GetClientCertExpiryOk() (*int64, bool) {
	if o == nil || IsNil(o.ClientCertExpiry) {
		return nil, false
	}
	return o.ClientCertExpiry, true
}

// HasClientCertExpiry returns a boolean if a field has been set.
func (o *TLSConfig) HasClientCertExpiry() bool {
	if o != nil && !IsNil(o.ClientCertExpiry) {
		return true
	}

	return false
}

// SetClientCertExpiry gets a reference to the given int64 and assigns it to the ClientCertExpiry field.
func (o *TLSConfig) SetClientCertExpiry(v int64) {
	o.ClientCertExpiry = &v
}

// GetClientCertSubject returns the ClientCertSubject field value if set, zero value otherwise.
func (o *TLSConfig) GetClientCertSubject() string {
	if o == nil || IsNil(o.ClientCertSubject) {
		var ret string
		return ret
	}
	return *o.ClientCertSubject
}

// GetClientCertSubjectOk returns a tuple with the ClientCertSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TLSConfig) GetClientCertSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.ClientCertSubject) {
		return nil, false
	}
	return o.ClientCertSubject, true
}

// HasClientCertSubject returns a boolean if a field has been set.
func (o *TLSConfig) HasClientCertSubject() bool {
	if o != nil && !IsNil(o.ClientCertSubject) {
		return true
	}

	return false
}

// SetClientCertSubject gets a reference to the given string and assigns it to the ClientCertSubject field.
func (o *TLSConfig) SetClientCertSubject(v string) {
	o.ClientCertSubject = &v
}

// GetClientKey returns the ClientKey field value
func (o *TLSConfig) GetClientKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientKey
}

// GetClientKeyOk returns a tuple with the ClientKey field value
// and a boolean to check if the value has been set.
func (o *TLSConfig) GetClientKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientKey, true
}

// SetClientKey sets field value
func (o *TLSConfig) SetClientKey(v string) {
	o.ClientKey = v
}

func (o TLSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TLSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaCert) {
		toSerialize["ca_cert"] = o.CaCert
	}
	toSerialize["client_cert"] = o.ClientCert
	// skip: client_cert_expiry is readOnly
	// skip: client_cert_subject is readOnly
	toSerialize["client_key"] = o.ClientKey
	return toSerialize, nil
}

type NullableTLSConfig struct {
	value *TLSConfig
	isSet bool
}

func (v NullableTLSConfig) Get() *TLSConfig {
	return v.value
}

func (v *NullableTLSConfig) Set(val *TLSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTLSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTLSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTLSConfig(val *TLSConfig) *NullableTLSConfig {
	return &NullableTLSConfig{value: val, isSet: true}
}

func (v NullableTLSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTLSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


