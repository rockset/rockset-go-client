/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SnowflakeIntegration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeIntegration{}

// SnowflakeIntegration struct for SnowflakeIntegration
type SnowflakeIntegration struct {
	AwsAccessKey *AwsAccessKey `json:"aws_access_key,omitempty"`
	AwsRole *AwsRole `json:"aws_role,omitempty"`
	// default snowflake data warehouse name for query execution. Warehouse name can be overridden in the collection.
	DefaultWarehouse string `json:"default_warehouse"`
	// Snowflake database password.
	Password string `json:"password"`
	// S3 path used for running 'COPY INTO' command on snowflake table.
	S3ExportPath string `json:"s3_export_path"`
	// Snowflake browser url.
	SnowflakeUrl string `json:"snowflake_url"`
	// Snowflake user role. If unspecified, will use the default user role.
	UserRole *string `json:"user_role,omitempty"`
	// Snowflake database username.
	Username string `json:"username"`
}

// NewSnowflakeIntegration instantiates a new SnowflakeIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeIntegration(defaultWarehouse string, password string, s3ExportPath string, snowflakeUrl string, username string) *SnowflakeIntegration {
	this := SnowflakeIntegration{}
	this.DefaultWarehouse = defaultWarehouse
	this.Password = password
	this.S3ExportPath = s3ExportPath
	this.SnowflakeUrl = snowflakeUrl
	this.Username = username
	return &this
}

// NewSnowflakeIntegrationWithDefaults instantiates a new SnowflakeIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeIntegrationWithDefaults() *SnowflakeIntegration {
	this := SnowflakeIntegration{}
	return &this
}

// GetAwsAccessKey returns the AwsAccessKey field value if set, zero value otherwise.
func (o *SnowflakeIntegration) GetAwsAccessKey() AwsAccessKey {
	if o == nil || IsNil(o.AwsAccessKey) {
		var ret AwsAccessKey
		return ret
	}
	return *o.AwsAccessKey
}

// GetAwsAccessKeyOk returns a tuple with the AwsAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetAwsAccessKeyOk() (*AwsAccessKey, bool) {
	if o == nil || IsNil(o.AwsAccessKey) {
		return nil, false
	}
	return o.AwsAccessKey, true
}

// HasAwsAccessKey returns a boolean if a field has been set.
func (o *SnowflakeIntegration) HasAwsAccessKey() bool {
	if o != nil && !IsNil(o.AwsAccessKey) {
		return true
	}

	return false
}

// SetAwsAccessKey gets a reference to the given AwsAccessKey and assigns it to the AwsAccessKey field.
func (o *SnowflakeIntegration) SetAwsAccessKey(v AwsAccessKey) {
	o.AwsAccessKey = &v
}

// GetAwsRole returns the AwsRole field value if set, zero value otherwise.
func (o *SnowflakeIntegration) GetAwsRole() AwsRole {
	if o == nil || IsNil(o.AwsRole) {
		var ret AwsRole
		return ret
	}
	return *o.AwsRole
}

// GetAwsRoleOk returns a tuple with the AwsRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetAwsRoleOk() (*AwsRole, bool) {
	if o == nil || IsNil(o.AwsRole) {
		return nil, false
	}
	return o.AwsRole, true
}

// HasAwsRole returns a boolean if a field has been set.
func (o *SnowflakeIntegration) HasAwsRole() bool {
	if o != nil && !IsNil(o.AwsRole) {
		return true
	}

	return false
}

// SetAwsRole gets a reference to the given AwsRole and assigns it to the AwsRole field.
func (o *SnowflakeIntegration) SetAwsRole(v AwsRole) {
	o.AwsRole = &v
}

// GetDefaultWarehouse returns the DefaultWarehouse field value
func (o *SnowflakeIntegration) GetDefaultWarehouse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultWarehouse
}

// GetDefaultWarehouseOk returns a tuple with the DefaultWarehouse field value
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetDefaultWarehouseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultWarehouse, true
}

// SetDefaultWarehouse sets field value
func (o *SnowflakeIntegration) SetDefaultWarehouse(v string) {
	o.DefaultWarehouse = v
}

// GetPassword returns the Password field value
func (o *SnowflakeIntegration) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SnowflakeIntegration) SetPassword(v string) {
	o.Password = v
}

// GetS3ExportPath returns the S3ExportPath field value
func (o *SnowflakeIntegration) GetS3ExportPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S3ExportPath
}

// GetS3ExportPathOk returns a tuple with the S3ExportPath field value
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetS3ExportPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3ExportPath, true
}

// SetS3ExportPath sets field value
func (o *SnowflakeIntegration) SetS3ExportPath(v string) {
	o.S3ExportPath = v
}

// GetSnowflakeUrl returns the SnowflakeUrl field value
func (o *SnowflakeIntegration) GetSnowflakeUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnowflakeUrl
}

// GetSnowflakeUrlOk returns a tuple with the SnowflakeUrl field value
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetSnowflakeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnowflakeUrl, true
}

// SetSnowflakeUrl sets field value
func (o *SnowflakeIntegration) SetSnowflakeUrl(v string) {
	o.SnowflakeUrl = v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
func (o *SnowflakeIntegration) GetUserRole() string {
	if o == nil || IsNil(o.UserRole) {
		var ret string
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetUserRoleOk() (*string, bool) {
	if o == nil || IsNil(o.UserRole) {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *SnowflakeIntegration) HasUserRole() bool {
	if o != nil && !IsNil(o.UserRole) {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given string and assigns it to the UserRole field.
func (o *SnowflakeIntegration) SetUserRole(v string) {
	o.UserRole = &v
}

// GetUsername returns the Username field value
func (o *SnowflakeIntegration) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SnowflakeIntegration) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SnowflakeIntegration) SetUsername(v string) {
	o.Username = v
}

func (o SnowflakeIntegration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeIntegration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsAccessKey) {
		toSerialize["aws_access_key"] = o.AwsAccessKey
	}
	if !IsNil(o.AwsRole) {
		toSerialize["aws_role"] = o.AwsRole
	}
	toSerialize["default_warehouse"] = o.DefaultWarehouse
	toSerialize["password"] = o.Password
	toSerialize["s3_export_path"] = o.S3ExportPath
	toSerialize["snowflake_url"] = o.SnowflakeUrl
	if !IsNil(o.UserRole) {
		toSerialize["user_role"] = o.UserRole
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

type NullableSnowflakeIntegration struct {
	value *SnowflakeIntegration
	isSet bool
}

func (v NullableSnowflakeIntegration) Get() *SnowflakeIntegration {
	return v.value
}

func (v *NullableSnowflakeIntegration) Set(val *SnowflakeIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeIntegration(val *SnowflakeIntegration) *NullableSnowflakeIntegration {
	return &NullableSnowflakeIntegration{value: val, isSet: true}
}

func (v NullableSnowflakeIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


