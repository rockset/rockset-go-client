/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceAzureEventHubs struct for SourceAzureEventHubs
type SourceAzureEventHubs struct {
	// name of the hub which rockset should ingest from
	HubId *string `json:"hub_id,omitempty"`
	// The offset reset policy.
	OffsetResetPolicy *string `json:"offset_reset_policy,omitempty"`
	Status *StatusAzureEventHubs `json:"status,omitempty"`
}

// NewSourceAzureEventHubs instantiates a new SourceAzureEventHubs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAzureEventHubs() *SourceAzureEventHubs {
	this := SourceAzureEventHubs{}
	return &this
}

// NewSourceAzureEventHubsWithDefaults instantiates a new SourceAzureEventHubs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAzureEventHubsWithDefaults() *SourceAzureEventHubs {
	this := SourceAzureEventHubs{}
	return &this
}

// GetHubId returns the HubId field value if set, zero value otherwise.
func (o *SourceAzureEventHubs) GetHubId() string {
	if o == nil || o.HubId == nil {
		var ret string
		return ret
	}
	return *o.HubId
}

// GetHubIdOk returns a tuple with the HubId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureEventHubs) GetHubIdOk() (*string, bool) {
	if o == nil || o.HubId == nil {
		return nil, false
	}
	return o.HubId, true
}

// HasHubId returns a boolean if a field has been set.
func (o *SourceAzureEventHubs) HasHubId() bool {
	if o != nil && o.HubId != nil {
		return true
	}

	return false
}

// SetHubId gets a reference to the given string and assigns it to the HubId field.
func (o *SourceAzureEventHubs) SetHubId(v string) {
	o.HubId = &v
}

// GetOffsetResetPolicy returns the OffsetResetPolicy field value if set, zero value otherwise.
func (o *SourceAzureEventHubs) GetOffsetResetPolicy() string {
	if o == nil || o.OffsetResetPolicy == nil {
		var ret string
		return ret
	}
	return *o.OffsetResetPolicy
}

// GetOffsetResetPolicyOk returns a tuple with the OffsetResetPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureEventHubs) GetOffsetResetPolicyOk() (*string, bool) {
	if o == nil || o.OffsetResetPolicy == nil {
		return nil, false
	}
	return o.OffsetResetPolicy, true
}

// HasOffsetResetPolicy returns a boolean if a field has been set.
func (o *SourceAzureEventHubs) HasOffsetResetPolicy() bool {
	if o != nil && o.OffsetResetPolicy != nil {
		return true
	}

	return false
}

// SetOffsetResetPolicy gets a reference to the given string and assigns it to the OffsetResetPolicy field.
func (o *SourceAzureEventHubs) SetOffsetResetPolicy(v string) {
	o.OffsetResetPolicy = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SourceAzureEventHubs) GetStatus() StatusAzureEventHubs {
	if o == nil || o.Status == nil {
		var ret StatusAzureEventHubs
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureEventHubs) GetStatusOk() (*StatusAzureEventHubs, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceAzureEventHubs) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusAzureEventHubs and assigns it to the Status field.
func (o *SourceAzureEventHubs) SetStatus(v StatusAzureEventHubs) {
	o.Status = &v
}

func (o SourceAzureEventHubs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HubId != nil {
		toSerialize["hub_id"] = o.HubId
	}
	if o.OffsetResetPolicy != nil {
		toSerialize["offset_reset_policy"] = o.OffsetResetPolicy
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableSourceAzureEventHubs struct {
	value *SourceAzureEventHubs
	isSet bool
}

func (v NullableSourceAzureEventHubs) Get() *SourceAzureEventHubs {
	return v.value
}

func (v *NullableSourceAzureEventHubs) Set(val *SourceAzureEventHubs) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAzureEventHubs) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAzureEventHubs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAzureEventHubs(val *SourceAzureEventHubs) *NullableSourceAzureEventHubs {
	return &NullableSourceAzureEventHubs{value: val, isSet: true}
}

func (v NullableSourceAzureEventHubs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAzureEventHubs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


