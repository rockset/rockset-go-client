/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateIntegrationRequest struct for CreateIntegrationRequest
type CreateIntegrationRequest struct {
	// Descriptive label.
	Name string `json:"name"`
	// Longer explanation for the integration.
	Description *string `json:"description,omitempty"`
	S3 *S3Integration `json:"s3,omitempty"`
	Kinesis *KinesisIntegration `json:"kinesis,omitempty"`
	Dynamodb *DynamodbIntegration `json:"dynamodb,omitempty"`
	Gcs *GcsIntegration `json:"gcs,omitempty"`
	AzureBlobStorage *AzureBlobStorageIntegration `json:"azure_blob_storage,omitempty"`
	AzureServiceBus *AzureServiceBusIntegration `json:"azure_service_bus,omitempty"`
	AzureEventHubs *AzureEventHubsIntegration `json:"azure_event_hubs,omitempty"`
	Kafka *KafkaIntegration `json:"kafka,omitempty"`
	Mongodb *MongoDbIntegration `json:"mongodb,omitempty"`
	Snowflake *SnowflakeIntegration `json:"snowflake,omitempty"`
}

// NewCreateIntegrationRequest instantiates a new CreateIntegrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIntegrationRequest(name string) *CreateIntegrationRequest {
	this := CreateIntegrationRequest{}
	this.Name = name
	return &this
}

// NewCreateIntegrationRequestWithDefaults instantiates a new CreateIntegrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIntegrationRequestWithDefaults() *CreateIntegrationRequest {
	this := CreateIntegrationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateIntegrationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateIntegrationRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateIntegrationRequest) SetDescription(v string) {
	o.Description = &v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetS3() S3Integration {
	if o == nil || o.S3 == nil {
		var ret S3Integration
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetS3Ok() (*S3Integration, bool) {
	if o == nil || o.S3 == nil {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasS3() bool {
	if o != nil && o.S3 != nil {
		return true
	}

	return false
}

// SetS3 gets a reference to the given S3Integration and assigns it to the S3 field.
func (o *CreateIntegrationRequest) SetS3(v S3Integration) {
	o.S3 = &v
}

// GetKinesis returns the Kinesis field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetKinesis() KinesisIntegration {
	if o == nil || o.Kinesis == nil {
		var ret KinesisIntegration
		return ret
	}
	return *o.Kinesis
}

// GetKinesisOk returns a tuple with the Kinesis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetKinesisOk() (*KinesisIntegration, bool) {
	if o == nil || o.Kinesis == nil {
		return nil, false
	}
	return o.Kinesis, true
}

// HasKinesis returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasKinesis() bool {
	if o != nil && o.Kinesis != nil {
		return true
	}

	return false
}

// SetKinesis gets a reference to the given KinesisIntegration and assigns it to the Kinesis field.
func (o *CreateIntegrationRequest) SetKinesis(v KinesisIntegration) {
	o.Kinesis = &v
}

// GetDynamodb returns the Dynamodb field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetDynamodb() DynamodbIntegration {
	if o == nil || o.Dynamodb == nil {
		var ret DynamodbIntegration
		return ret
	}
	return *o.Dynamodb
}

// GetDynamodbOk returns a tuple with the Dynamodb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetDynamodbOk() (*DynamodbIntegration, bool) {
	if o == nil || o.Dynamodb == nil {
		return nil, false
	}
	return o.Dynamodb, true
}

// HasDynamodb returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasDynamodb() bool {
	if o != nil && o.Dynamodb != nil {
		return true
	}

	return false
}

// SetDynamodb gets a reference to the given DynamodbIntegration and assigns it to the Dynamodb field.
func (o *CreateIntegrationRequest) SetDynamodb(v DynamodbIntegration) {
	o.Dynamodb = &v
}

// GetGcs returns the Gcs field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetGcs() GcsIntegration {
	if o == nil || o.Gcs == nil {
		var ret GcsIntegration
		return ret
	}
	return *o.Gcs
}

// GetGcsOk returns a tuple with the Gcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetGcsOk() (*GcsIntegration, bool) {
	if o == nil || o.Gcs == nil {
		return nil, false
	}
	return o.Gcs, true
}

// HasGcs returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasGcs() bool {
	if o != nil && o.Gcs != nil {
		return true
	}

	return false
}

// SetGcs gets a reference to the given GcsIntegration and assigns it to the Gcs field.
func (o *CreateIntegrationRequest) SetGcs(v GcsIntegration) {
	o.Gcs = &v
}

// GetAzureBlobStorage returns the AzureBlobStorage field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetAzureBlobStorage() AzureBlobStorageIntegration {
	if o == nil || o.AzureBlobStorage == nil {
		var ret AzureBlobStorageIntegration
		return ret
	}
	return *o.AzureBlobStorage
}

// GetAzureBlobStorageOk returns a tuple with the AzureBlobStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetAzureBlobStorageOk() (*AzureBlobStorageIntegration, bool) {
	if o == nil || o.AzureBlobStorage == nil {
		return nil, false
	}
	return o.AzureBlobStorage, true
}

// HasAzureBlobStorage returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasAzureBlobStorage() bool {
	if o != nil && o.AzureBlobStorage != nil {
		return true
	}

	return false
}

// SetAzureBlobStorage gets a reference to the given AzureBlobStorageIntegration and assigns it to the AzureBlobStorage field.
func (o *CreateIntegrationRequest) SetAzureBlobStorage(v AzureBlobStorageIntegration) {
	o.AzureBlobStorage = &v
}

// GetAzureServiceBus returns the AzureServiceBus field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetAzureServiceBus() AzureServiceBusIntegration {
	if o == nil || o.AzureServiceBus == nil {
		var ret AzureServiceBusIntegration
		return ret
	}
	return *o.AzureServiceBus
}

// GetAzureServiceBusOk returns a tuple with the AzureServiceBus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetAzureServiceBusOk() (*AzureServiceBusIntegration, bool) {
	if o == nil || o.AzureServiceBus == nil {
		return nil, false
	}
	return o.AzureServiceBus, true
}

// HasAzureServiceBus returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasAzureServiceBus() bool {
	if o != nil && o.AzureServiceBus != nil {
		return true
	}

	return false
}

// SetAzureServiceBus gets a reference to the given AzureServiceBusIntegration and assigns it to the AzureServiceBus field.
func (o *CreateIntegrationRequest) SetAzureServiceBus(v AzureServiceBusIntegration) {
	o.AzureServiceBus = &v
}

// GetAzureEventHubs returns the AzureEventHubs field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetAzureEventHubs() AzureEventHubsIntegration {
	if o == nil || o.AzureEventHubs == nil {
		var ret AzureEventHubsIntegration
		return ret
	}
	return *o.AzureEventHubs
}

// GetAzureEventHubsOk returns a tuple with the AzureEventHubs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetAzureEventHubsOk() (*AzureEventHubsIntegration, bool) {
	if o == nil || o.AzureEventHubs == nil {
		return nil, false
	}
	return o.AzureEventHubs, true
}

// HasAzureEventHubs returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasAzureEventHubs() bool {
	if o != nil && o.AzureEventHubs != nil {
		return true
	}

	return false
}

// SetAzureEventHubs gets a reference to the given AzureEventHubsIntegration and assigns it to the AzureEventHubs field.
func (o *CreateIntegrationRequest) SetAzureEventHubs(v AzureEventHubsIntegration) {
	o.AzureEventHubs = &v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetKafka() KafkaIntegration {
	if o == nil || o.Kafka == nil {
		var ret KafkaIntegration
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetKafkaOk() (*KafkaIntegration, bool) {
	if o == nil || o.Kafka == nil {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasKafka() bool {
	if o != nil && o.Kafka != nil {
		return true
	}

	return false
}

// SetKafka gets a reference to the given KafkaIntegration and assigns it to the Kafka field.
func (o *CreateIntegrationRequest) SetKafka(v KafkaIntegration) {
	o.Kafka = &v
}

// GetMongodb returns the Mongodb field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetMongodb() MongoDbIntegration {
	if o == nil || o.Mongodb == nil {
		var ret MongoDbIntegration
		return ret
	}
	return *o.Mongodb
}

// GetMongodbOk returns a tuple with the Mongodb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetMongodbOk() (*MongoDbIntegration, bool) {
	if o == nil || o.Mongodb == nil {
		return nil, false
	}
	return o.Mongodb, true
}

// HasMongodb returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasMongodb() bool {
	if o != nil && o.Mongodb != nil {
		return true
	}

	return false
}

// SetMongodb gets a reference to the given MongoDbIntegration and assigns it to the Mongodb field.
func (o *CreateIntegrationRequest) SetMongodb(v MongoDbIntegration) {
	o.Mongodb = &v
}

// GetSnowflake returns the Snowflake field value if set, zero value otherwise.
func (o *CreateIntegrationRequest) GetSnowflake() SnowflakeIntegration {
	if o == nil || o.Snowflake == nil {
		var ret SnowflakeIntegration
		return ret
	}
	return *o.Snowflake
}

// GetSnowflakeOk returns a tuple with the Snowflake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateIntegrationRequest) GetSnowflakeOk() (*SnowflakeIntegration, bool) {
	if o == nil || o.Snowflake == nil {
		return nil, false
	}
	return o.Snowflake, true
}

// HasSnowflake returns a boolean if a field has been set.
func (o *CreateIntegrationRequest) HasSnowflake() bool {
	if o != nil && o.Snowflake != nil {
		return true
	}

	return false
}

// SetSnowflake gets a reference to the given SnowflakeIntegration and assigns it to the Snowflake field.
func (o *CreateIntegrationRequest) SetSnowflake(v SnowflakeIntegration) {
	o.Snowflake = &v
}

func (o CreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.S3 != nil {
		toSerialize["s3"] = o.S3
	}
	if o.Kinesis != nil {
		toSerialize["kinesis"] = o.Kinesis
	}
	if o.Dynamodb != nil {
		toSerialize["dynamodb"] = o.Dynamodb
	}
	if o.Gcs != nil {
		toSerialize["gcs"] = o.Gcs
	}
	if o.AzureBlobStorage != nil {
		toSerialize["azure_blob_storage"] = o.AzureBlobStorage
	}
	if o.AzureServiceBus != nil {
		toSerialize["azure_service_bus"] = o.AzureServiceBus
	}
	if o.AzureEventHubs != nil {
		toSerialize["azure_event_hubs"] = o.AzureEventHubs
	}
	if o.Kafka != nil {
		toSerialize["kafka"] = o.Kafka
	}
	if o.Mongodb != nil {
		toSerialize["mongodb"] = o.Mongodb
	}
	if o.Snowflake != nil {
		toSerialize["snowflake"] = o.Snowflake
	}
	return json.Marshal(toSerialize)
}

type NullableCreateIntegrationRequest struct {
	value *CreateIntegrationRequest
	isSet bool
}

func (v NullableCreateIntegrationRequest) Get() *CreateIntegrationRequest {
	return v.value
}

func (v *NullableCreateIntegrationRequest) Set(val *CreateIntegrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIntegrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIntegrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIntegrationRequest(val *CreateIntegrationRequest) *NullableCreateIntegrationRequest {
	return &NullableCreateIntegrationRequest{value: val, isSet: true}
}

func (v NullableCreateIntegrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIntegrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


