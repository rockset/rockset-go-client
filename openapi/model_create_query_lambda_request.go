/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateQueryLambdaRequest struct for CreateQueryLambdaRequest
type CreateQueryLambdaRequest struct {
	// Query Lambda name.
	Name string `json:"name"`
	// Optional description.
	Description *string `json:"description,omitempty"`
	Sql QueryLambdaSql `json:"sql"`
	IsPublic *bool `json:"is_public,omitempty"`
}

// NewCreateQueryLambdaRequest instantiates a new CreateQueryLambdaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateQueryLambdaRequest(name string, sql QueryLambdaSql) *CreateQueryLambdaRequest {
	this := CreateQueryLambdaRequest{}
	this.Name = name
	this.Sql = sql
	return &this
}

// NewCreateQueryLambdaRequestWithDefaults instantiates a new CreateQueryLambdaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateQueryLambdaRequestWithDefaults() *CreateQueryLambdaRequest {
	this := CreateQueryLambdaRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateQueryLambdaRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateQueryLambdaRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateQueryLambdaRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateQueryLambdaRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateQueryLambdaRequest) SetDescription(v string) {
	o.Description = &v
}

// GetSql returns the Sql field value
func (o *CreateQueryLambdaRequest) GetSql() QueryLambdaSql {
	if o == nil {
		var ret QueryLambdaSql
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaRequest) GetSqlOk() (*QueryLambdaSql, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *CreateQueryLambdaRequest) SetSql(v QueryLambdaSql) {
	o.Sql = v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *CreateQueryLambdaRequest) GetIsPublic() bool {
	if o == nil || o.IsPublic == nil {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaRequest) GetIsPublicOk() (*bool, bool) {
	if o == nil || o.IsPublic == nil {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *CreateQueryLambdaRequest) HasIsPublic() bool {
	if o != nil && o.IsPublic != nil {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *CreateQueryLambdaRequest) SetIsPublic(v bool) {
	o.IsPublic = &v
}

func (o CreateQueryLambdaRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["sql"] = o.Sql
	}
	if o.IsPublic != nil {
		toSerialize["is_public"] = o.IsPublic
	}
	return json.Marshal(toSerialize)
}

type NullableCreateQueryLambdaRequest struct {
	value *CreateQueryLambdaRequest
	isSet bool
}

func (v NullableCreateQueryLambdaRequest) Get() *CreateQueryLambdaRequest {
	return v.value
}

func (v *NullableCreateQueryLambdaRequest) Set(val *CreateQueryLambdaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateQueryLambdaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateQueryLambdaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateQueryLambdaRequest(val *CreateQueryLambdaRequest) *NullableCreateQueryLambdaRequest {
	return &NullableCreateQueryLambdaRequest{value: val, isSet: true}
}

func (v NullableCreateQueryLambdaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateQueryLambdaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


