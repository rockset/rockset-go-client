/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AwsRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsRole{}

// AwsRole struct for AwsRole
type AwsRole struct {
	// External id used for integration.
	AwsExternalId *string `json:"aws_external_id,omitempty"`
	// ARN of rockset-role created in your account.
	AwsRoleArn string `json:"aws_role_arn"`
}

// NewAwsRole instantiates a new AwsRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsRole(awsRoleArn string) *AwsRole {
	this := AwsRole{}
	this.AwsRoleArn = awsRoleArn
	return &this
}

// NewAwsRoleWithDefaults instantiates a new AwsRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsRoleWithDefaults() *AwsRole {
	this := AwsRole{}
	return &this
}

// GetAwsExternalId returns the AwsExternalId field value if set, zero value otherwise.
func (o *AwsRole) GetAwsExternalId() string {
	if o == nil || IsNil(o.AwsExternalId) {
		var ret string
		return ret
	}
	return *o.AwsExternalId
}

// GetAwsExternalIdOk returns a tuple with the AwsExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsRole) GetAwsExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.AwsExternalId) {
		return nil, false
	}
	return o.AwsExternalId, true
}

// HasAwsExternalId returns a boolean if a field has been set.
func (o *AwsRole) HasAwsExternalId() bool {
	if o != nil && !IsNil(o.AwsExternalId) {
		return true
	}

	return false
}

// SetAwsExternalId gets a reference to the given string and assigns it to the AwsExternalId field.
func (o *AwsRole) SetAwsExternalId(v string) {
	o.AwsExternalId = &v
}

// GetAwsRoleArn returns the AwsRoleArn field value
func (o *AwsRole) GetAwsRoleArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AwsRoleArn
}

// GetAwsRoleArnOk returns a tuple with the AwsRoleArn field value
// and a boolean to check if the value has been set.
func (o *AwsRole) GetAwsRoleArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AwsRoleArn, true
}

// SetAwsRoleArn sets field value
func (o *AwsRole) SetAwsRoleArn(v string) {
	o.AwsRoleArn = v
}

func (o AwsRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsExternalId) {
		toSerialize["aws_external_id"] = o.AwsExternalId
	}
	toSerialize["aws_role_arn"] = o.AwsRoleArn
	return toSerialize, nil
}

type NullableAwsRole struct {
	value *AwsRole
	isSet bool
}

func (v NullableAwsRole) Get() *AwsRole {
	return v.value
}

func (v *NullableAwsRole) Set(val *AwsRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsRole(val *AwsRole) *NullableAwsRole {
	return &NullableAwsRole{value: val, isSet: true}
}

func (v NullableAwsRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


