/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PaginationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationInfo{}

// PaginationInfo struct for PaginationInfo
type PaginationInfo struct {
	// Number of documents returned in this result set.
	CurrentPageDocCount *int64 `json:"current_page_doc_count,omitempty"`
	// Cursor to use to get the list of documents.
	NextCursor *string `json:"next_cursor,omitempty"`
	// The doc offset that next_cursor starts at.
	NextCursorOffset *int64 `json:"next_cursor_offset,omitempty"`
	// Direct link to the next page of results.
	NextPageLink *string `json:"next_page_link,omitempty"`
	// Cursor used to retrieve the first set of documents.
	StartCursor *string `json:"start_cursor,omitempty"`
}

// NewPaginationInfo instantiates a new PaginationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationInfo() *PaginationInfo {
	this := PaginationInfo{}
	return &this
}

// NewPaginationInfoWithDefaults instantiates a new PaginationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationInfoWithDefaults() *PaginationInfo {
	this := PaginationInfo{}
	return &this
}

// GetCurrentPageDocCount returns the CurrentPageDocCount field value if set, zero value otherwise.
func (o *PaginationInfo) GetCurrentPageDocCount() int64 {
	if o == nil || IsNil(o.CurrentPageDocCount) {
		var ret int64
		return ret
	}
	return *o.CurrentPageDocCount
}

// GetCurrentPageDocCountOk returns a tuple with the CurrentPageDocCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetCurrentPageDocCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentPageDocCount) {
		return nil, false
	}
	return o.CurrentPageDocCount, true
}

// HasCurrentPageDocCount returns a boolean if a field has been set.
func (o *PaginationInfo) HasCurrentPageDocCount() bool {
	if o != nil && !IsNil(o.CurrentPageDocCount) {
		return true
	}

	return false
}

// SetCurrentPageDocCount gets a reference to the given int64 and assigns it to the CurrentPageDocCount field.
func (o *PaginationInfo) SetCurrentPageDocCount(v int64) {
	o.CurrentPageDocCount = &v
}

// GetNextCursor returns the NextCursor field value if set, zero value otherwise.
func (o *PaginationInfo) GetNextCursor() string {
	if o == nil || IsNil(o.NextCursor) {
		var ret string
		return ret
	}
	return *o.NextCursor
}

// GetNextCursorOk returns a tuple with the NextCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetNextCursorOk() (*string, bool) {
	if o == nil || IsNil(o.NextCursor) {
		return nil, false
	}
	return o.NextCursor, true
}

// HasNextCursor returns a boolean if a field has been set.
func (o *PaginationInfo) HasNextCursor() bool {
	if o != nil && !IsNil(o.NextCursor) {
		return true
	}

	return false
}

// SetNextCursor gets a reference to the given string and assigns it to the NextCursor field.
func (o *PaginationInfo) SetNextCursor(v string) {
	o.NextCursor = &v
}

// GetNextCursorOffset returns the NextCursorOffset field value if set, zero value otherwise.
func (o *PaginationInfo) GetNextCursorOffset() int64 {
	if o == nil || IsNil(o.NextCursorOffset) {
		var ret int64
		return ret
	}
	return *o.NextCursorOffset
}

// GetNextCursorOffsetOk returns a tuple with the NextCursorOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetNextCursorOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.NextCursorOffset) {
		return nil, false
	}
	return o.NextCursorOffset, true
}

// HasNextCursorOffset returns a boolean if a field has been set.
func (o *PaginationInfo) HasNextCursorOffset() bool {
	if o != nil && !IsNil(o.NextCursorOffset) {
		return true
	}

	return false
}

// SetNextCursorOffset gets a reference to the given int64 and assigns it to the NextCursorOffset field.
func (o *PaginationInfo) SetNextCursorOffset(v int64) {
	o.NextCursorOffset = &v
}

// GetNextPageLink returns the NextPageLink field value if set, zero value otherwise.
func (o *PaginationInfo) GetNextPageLink() string {
	if o == nil || IsNil(o.NextPageLink) {
		var ret string
		return ret
	}
	return *o.NextPageLink
}

// GetNextPageLinkOk returns a tuple with the NextPageLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetNextPageLinkOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageLink) {
		return nil, false
	}
	return o.NextPageLink, true
}

// HasNextPageLink returns a boolean if a field has been set.
func (o *PaginationInfo) HasNextPageLink() bool {
	if o != nil && !IsNil(o.NextPageLink) {
		return true
	}

	return false
}

// SetNextPageLink gets a reference to the given string and assigns it to the NextPageLink field.
func (o *PaginationInfo) SetNextPageLink(v string) {
	o.NextPageLink = &v
}

// GetStartCursor returns the StartCursor field value if set, zero value otherwise.
func (o *PaginationInfo) GetStartCursor() string {
	if o == nil || IsNil(o.StartCursor) {
		var ret string
		return ret
	}
	return *o.StartCursor
}

// GetStartCursorOk returns a tuple with the StartCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationInfo) GetStartCursorOk() (*string, bool) {
	if o == nil || IsNil(o.StartCursor) {
		return nil, false
	}
	return o.StartCursor, true
}

// HasStartCursor returns a boolean if a field has been set.
func (o *PaginationInfo) HasStartCursor() bool {
	if o != nil && !IsNil(o.StartCursor) {
		return true
	}

	return false
}

// SetStartCursor gets a reference to the given string and assigns it to the StartCursor field.
func (o *PaginationInfo) SetStartCursor(v string) {
	o.StartCursor = &v
}

func (o PaginationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPageDocCount) {
		toSerialize["current_page_doc_count"] = o.CurrentPageDocCount
	}
	if !IsNil(o.NextCursor) {
		toSerialize["next_cursor"] = o.NextCursor
	}
	if !IsNil(o.NextCursorOffset) {
		toSerialize["next_cursor_offset"] = o.NextCursorOffset
	}
	// skip: next_page_link is readOnly
	if !IsNil(o.StartCursor) {
		toSerialize["start_cursor"] = o.StartCursor
	}
	return toSerialize, nil
}

type NullablePaginationInfo struct {
	value *PaginationInfo
	isSet bool
}

func (v NullablePaginationInfo) Get() *PaginationInfo {
	return v.value
}

func (v *NullablePaginationInfo) Set(val *PaginationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationInfo(val *PaginationInfo) *NullablePaginationInfo {
	return &NullablePaginationInfo{value: val, isSet: true}
}

func (v NullablePaginationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


