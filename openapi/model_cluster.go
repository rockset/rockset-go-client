/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Cluster struct for Cluster
type Cluster struct {
	// Unique identifier for the cluster.
	Id *string `json:"id,omitempty"`
	// Cluster type.
	ClusterType *string `json:"cluster_type,omitempty"`
	// Aws region.
	AwsRegion *string `json:"aws_region,omitempty"`
	// Domain of org using cluster.
	Domain *string `json:"domain,omitempty"`
	// Top level domain of org using cluster.
	TopLevelDomain *string `json:"top_level_domain,omitempty"`
	// Api server url for cluster.
	ApiserverUrl *string `json:"apiserver_url,omitempty"`
}

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster() *Cluster {
	this := Cluster{}
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Cluster) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Cluster) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Cluster) SetId(v string) {
	o.Id = &v
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
func (o *Cluster) GetClusterType() string {
	if o == nil || o.ClusterType == nil {
		var ret string
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetClusterTypeOk() (*string, bool) {
	if o == nil || o.ClusterType == nil {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *Cluster) HasClusterType() bool {
	if o != nil && o.ClusterType != nil {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given string and assigns it to the ClusterType field.
func (o *Cluster) SetClusterType(v string) {
	o.ClusterType = &v
}

// GetAwsRegion returns the AwsRegion field value if set, zero value otherwise.
func (o *Cluster) GetAwsRegion() string {
	if o == nil || o.AwsRegion == nil {
		var ret string
		return ret
	}
	return *o.AwsRegion
}

// GetAwsRegionOk returns a tuple with the AwsRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetAwsRegionOk() (*string, bool) {
	if o == nil || o.AwsRegion == nil {
		return nil, false
	}
	return o.AwsRegion, true
}

// HasAwsRegion returns a boolean if a field has been set.
func (o *Cluster) HasAwsRegion() bool {
	if o != nil && o.AwsRegion != nil {
		return true
	}

	return false
}

// SetAwsRegion gets a reference to the given string and assigns it to the AwsRegion field.
func (o *Cluster) SetAwsRegion(v string) {
	o.AwsRegion = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Cluster) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Cluster) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Cluster) SetDomain(v string) {
	o.Domain = &v
}

// GetTopLevelDomain returns the TopLevelDomain field value if set, zero value otherwise.
func (o *Cluster) GetTopLevelDomain() string {
	if o == nil || o.TopLevelDomain == nil {
		var ret string
		return ret
	}
	return *o.TopLevelDomain
}

// GetTopLevelDomainOk returns a tuple with the TopLevelDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetTopLevelDomainOk() (*string, bool) {
	if o == nil || o.TopLevelDomain == nil {
		return nil, false
	}
	return o.TopLevelDomain, true
}

// HasTopLevelDomain returns a boolean if a field has been set.
func (o *Cluster) HasTopLevelDomain() bool {
	if o != nil && o.TopLevelDomain != nil {
		return true
	}

	return false
}

// SetTopLevelDomain gets a reference to the given string and assigns it to the TopLevelDomain field.
func (o *Cluster) SetTopLevelDomain(v string) {
	o.TopLevelDomain = &v
}

// GetApiserverUrl returns the ApiserverUrl field value if set, zero value otherwise.
func (o *Cluster) GetApiserverUrl() string {
	if o == nil || o.ApiserverUrl == nil {
		var ret string
		return ret
	}
	return *o.ApiserverUrl
}

// GetApiserverUrlOk returns a tuple with the ApiserverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetApiserverUrlOk() (*string, bool) {
	if o == nil || o.ApiserverUrl == nil {
		return nil, false
	}
	return o.ApiserverUrl, true
}

// HasApiserverUrl returns a boolean if a field has been set.
func (o *Cluster) HasApiserverUrl() bool {
	if o != nil && o.ApiserverUrl != nil {
		return true
	}

	return false
}

// SetApiserverUrl gets a reference to the given string and assigns it to the ApiserverUrl field.
func (o *Cluster) SetApiserverUrl(v string) {
	o.ApiserverUrl = &v
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ClusterType != nil {
		toSerialize["cluster_type"] = o.ClusterType
	}
	if o.AwsRegion != nil {
		toSerialize["aws_region"] = o.AwsRegion
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.TopLevelDomain != nil {
		toSerialize["top_level_domain"] = o.TopLevelDomain
	}
	if o.ApiserverUrl != nil {
		toSerialize["apiserver_url"] = o.ApiserverUrl
	}
	return json.Marshal(toSerialize)
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


