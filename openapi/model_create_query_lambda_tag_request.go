/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateQueryLambdaTagRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateQueryLambdaTagRequest{}

// CreateQueryLambdaTagRequest struct for CreateQueryLambdaTagRequest
type CreateQueryLambdaTagRequest struct {
	// Name of Query Lambda tag.
	TagName string `json:"tag_name"`
	// Hash identifying a Query Lambda tag.
	Version string `json:"version"`
}

// NewCreateQueryLambdaTagRequest instantiates a new CreateQueryLambdaTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateQueryLambdaTagRequest(tagName string, version string) *CreateQueryLambdaTagRequest {
	this := CreateQueryLambdaTagRequest{}
	this.TagName = tagName
	this.Version = version
	return &this
}

// NewCreateQueryLambdaTagRequestWithDefaults instantiates a new CreateQueryLambdaTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateQueryLambdaTagRequestWithDefaults() *CreateQueryLambdaTagRequest {
	this := CreateQueryLambdaTagRequest{}
	return &this
}

// GetTagName returns the TagName field value
func (o *CreateQueryLambdaTagRequest) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaTagRequest) GetTagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *CreateQueryLambdaTagRequest) SetTagName(v string) {
	o.TagName = v
}

// GetVersion returns the Version field value
func (o *CreateQueryLambdaTagRequest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CreateQueryLambdaTagRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CreateQueryLambdaTagRequest) SetVersion(v string) {
	o.Version = v
}

func (o CreateQueryLambdaTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateQueryLambdaTagRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tag_name"] = o.TagName
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableCreateQueryLambdaTagRequest struct {
	value *CreateQueryLambdaTagRequest
	isSet bool
}

func (v NullableCreateQueryLambdaTagRequest) Get() *CreateQueryLambdaTagRequest {
	return v.value
}

func (v *NullableCreateQueryLambdaTagRequest) Set(val *CreateQueryLambdaTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateQueryLambdaTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateQueryLambdaTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateQueryLambdaTagRequest(val *CreateQueryLambdaTagRequest) *NullableCreateQueryLambdaTagRequest {
	return &NullableCreateQueryLambdaTagRequest{value: val, isSet: true}
}

func (v NullableCreateQueryLambdaTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateQueryLambdaTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


