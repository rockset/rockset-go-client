/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryFieldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryFieldType{}

// QueryFieldType struct for QueryFieldType
type QueryFieldType struct {
	// Name of the field.
	Name string `json:"name"`
	// Data type of the field.
	Type string `json:"type"`
}

// NewQueryFieldType instantiates a new QueryFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryFieldType(name string, type_ string) *QueryFieldType {
	this := QueryFieldType{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewQueryFieldTypeWithDefaults instantiates a new QueryFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryFieldTypeWithDefaults() *QueryFieldType {
	this := QueryFieldType{}
	return &this
}

// GetName returns the Name field value
func (o *QueryFieldType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *QueryFieldType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *QueryFieldType) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *QueryFieldType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *QueryFieldType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *QueryFieldType) SetType(v string) {
	o.Type = v
}

func (o QueryFieldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryFieldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableQueryFieldType struct {
	value *QueryFieldType
	isSet bool
}

func (v NullableQueryFieldType) Get() *QueryFieldType {
	return v.value
}

func (v *NullableQueryFieldType) Set(val *QueryFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryFieldType(val *QueryFieldType) *NullableQueryFieldType {
	return &NullableQueryFieldType{value: val, isSet: true}
}

func (v NullableQueryFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


