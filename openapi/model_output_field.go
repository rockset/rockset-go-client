/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OutputField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutputField{}

// OutputField struct for OutputField
type OutputField struct {
	// The name of a field, parsed as a SQL qualified name.
	FieldName *string `json:"field_name,omitempty"`
	// Error in Mapping execution: 'skip' or 'fail'.
	OnError *string `json:"on_error,omitempty"`
	Value *SqlExpression `json:"value,omitempty"`
}

// NewOutputField instantiates a new OutputField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputField() *OutputField {
	this := OutputField{}
	return &this
}

// NewOutputFieldWithDefaults instantiates a new OutputField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputFieldWithDefaults() *OutputField {
	this := OutputField{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *OutputField) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputField) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *OutputField) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *OutputField) SetFieldName(v string) {
	o.FieldName = &v
}

// GetOnError returns the OnError field value if set, zero value otherwise.
func (o *OutputField) GetOnError() string {
	if o == nil || IsNil(o.OnError) {
		var ret string
		return ret
	}
	return *o.OnError
}

// GetOnErrorOk returns a tuple with the OnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputField) GetOnErrorOk() (*string, bool) {
	if o == nil || IsNil(o.OnError) {
		return nil, false
	}
	return o.OnError, true
}

// HasOnError returns a boolean if a field has been set.
func (o *OutputField) HasOnError() bool {
	if o != nil && !IsNil(o.OnError) {
		return true
	}

	return false
}

// SetOnError gets a reference to the given string and assigns it to the OnError field.
func (o *OutputField) SetOnError(v string) {
	o.OnError = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OutputField) GetValue() SqlExpression {
	if o == nil || IsNil(o.Value) {
		var ret SqlExpression
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputField) GetValueOk() (*SqlExpression, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OutputField) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given SqlExpression and assigns it to the Value field.
func (o *OutputField) SetValue(v SqlExpression) {
	o.Value = &v
}

func (o OutputField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutputField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["field_name"] = o.FieldName
	}
	if !IsNil(o.OnError) {
		toSerialize["on_error"] = o.OnError
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableOutputField struct {
	value *OutputField
	isSet bool
}

func (v NullableOutputField) Get() *OutputField {
	return v.value
}

func (v *NullableOutputField) Set(val *OutputField) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputField) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputField(val *OutputField) *NullableOutputField {
	return &NullableOutputField{value: val, isSet: true}
}

func (v NullableOutputField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


