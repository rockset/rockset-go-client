/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryInfo struct for QueryInfo
type QueryInfo struct {
	// Unique Query ID.
	QueryId *string `json:"query_id,omitempty"`
	// Status of the query.
	Status *string `json:"status,omitempty"`
	// User ID who executed the query.
	ExecutedBy *string `json:"executed_by,omitempty"`
	// Time (UTC) the query request was first received and queued for execution.
	SubmittedAt *string `json:"submitted_at,omitempty"`
	// Time (UTC) that query results expire. Only populated if `status` is `COMPLETE`.
	ExpiresAt *string `json:"expires_at,omitempty"`
	Stats *Stats `json:"stats,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
	// The log offset that query results were written to in the destination collection. Only populated for INSERT INTO queries.
	LastOffset *string `json:"last_offset,omitempty"`
	// Errors encountered while executing the query.
	QueryErrors []QueryError `json:"query_errors,omitempty"`
}

// NewQueryInfo instantiates a new QueryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryInfo() *QueryInfo {
	this := QueryInfo{}
	return &this
}

// NewQueryInfoWithDefaults instantiates a new QueryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryInfoWithDefaults() *QueryInfo {
	this := QueryInfo{}
	return &this
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *QueryInfo) GetQueryId() string {
	if o == nil || o.QueryId == nil {
		var ret string
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetQueryIdOk() (*string, bool) {
	if o == nil || o.QueryId == nil {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *QueryInfo) HasQueryId() bool {
	if o != nil && o.QueryId != nil {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given string and assigns it to the QueryId field.
func (o *QueryInfo) SetQueryId(v string) {
	o.QueryId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *QueryInfo) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *QueryInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *QueryInfo) SetStatus(v string) {
	o.Status = &v
}

// GetExecutedBy returns the ExecutedBy field value if set, zero value otherwise.
func (o *QueryInfo) GetExecutedBy() string {
	if o == nil || o.ExecutedBy == nil {
		var ret string
		return ret
	}
	return *o.ExecutedBy
}

// GetExecutedByOk returns a tuple with the ExecutedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetExecutedByOk() (*string, bool) {
	if o == nil || o.ExecutedBy == nil {
		return nil, false
	}
	return o.ExecutedBy, true
}

// HasExecutedBy returns a boolean if a field has been set.
func (o *QueryInfo) HasExecutedBy() bool {
	if o != nil && o.ExecutedBy != nil {
		return true
	}

	return false
}

// SetExecutedBy gets a reference to the given string and assigns it to the ExecutedBy field.
func (o *QueryInfo) SetExecutedBy(v string) {
	o.ExecutedBy = &v
}

// GetSubmittedAt returns the SubmittedAt field value if set, zero value otherwise.
func (o *QueryInfo) GetSubmittedAt() string {
	if o == nil || o.SubmittedAt == nil {
		var ret string
		return ret
	}
	return *o.SubmittedAt
}

// GetSubmittedAtOk returns a tuple with the SubmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetSubmittedAtOk() (*string, bool) {
	if o == nil || o.SubmittedAt == nil {
		return nil, false
	}
	return o.SubmittedAt, true
}

// HasSubmittedAt returns a boolean if a field has been set.
func (o *QueryInfo) HasSubmittedAt() bool {
	if o != nil && o.SubmittedAt != nil {
		return true
	}

	return false
}

// SetSubmittedAt gets a reference to the given string and assigns it to the SubmittedAt field.
func (o *QueryInfo) SetSubmittedAt(v string) {
	o.SubmittedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *QueryInfo) GetExpiresAt() string {
	if o == nil || o.ExpiresAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetExpiresAtOk() (*string, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *QueryInfo) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *QueryInfo) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *QueryInfo) GetStats() Stats {
	if o == nil || o.Stats == nil {
		var ret Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetStatsOk() (*Stats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *QueryInfo) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given Stats and assigns it to the Stats field.
func (o *QueryInfo) SetStats(v Stats) {
	o.Stats = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *QueryInfo) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *QueryInfo) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *QueryInfo) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetLastOffset returns the LastOffset field value if set, zero value otherwise.
func (o *QueryInfo) GetLastOffset() string {
	if o == nil || o.LastOffset == nil {
		var ret string
		return ret
	}
	return *o.LastOffset
}

// GetLastOffsetOk returns a tuple with the LastOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetLastOffsetOk() (*string, bool) {
	if o == nil || o.LastOffset == nil {
		return nil, false
	}
	return o.LastOffset, true
}

// HasLastOffset returns a boolean if a field has been set.
func (o *QueryInfo) HasLastOffset() bool {
	if o != nil && o.LastOffset != nil {
		return true
	}

	return false
}

// SetLastOffset gets a reference to the given string and assigns it to the LastOffset field.
func (o *QueryInfo) SetLastOffset(v string) {
	o.LastOffset = &v
}

// GetQueryErrors returns the QueryErrors field value if set, zero value otherwise.
func (o *QueryInfo) GetQueryErrors() []QueryError {
	if o == nil || o.QueryErrors == nil {
		var ret []QueryError
		return ret
	}
	return o.QueryErrors
}

// GetQueryErrorsOk returns a tuple with the QueryErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryInfo) GetQueryErrorsOk() ([]QueryError, bool) {
	if o == nil || o.QueryErrors == nil {
		return nil, false
	}
	return o.QueryErrors, true
}

// HasQueryErrors returns a boolean if a field has been set.
func (o *QueryInfo) HasQueryErrors() bool {
	if o != nil && o.QueryErrors != nil {
		return true
	}

	return false
}

// SetQueryErrors gets a reference to the given []QueryError and assigns it to the QueryErrors field.
func (o *QueryInfo) SetQueryErrors(v []QueryError) {
	o.QueryErrors = v
}

func (o QueryInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QueryId != nil {
		toSerialize["query_id"] = o.QueryId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ExecutedBy != nil {
		toSerialize["executed_by"] = o.ExecutedBy
	}
	if o.SubmittedAt != nil {
		toSerialize["submitted_at"] = o.SubmittedAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.LastOffset != nil {
		toSerialize["last_offset"] = o.LastOffset
	}
	if o.QueryErrors != nil {
		toSerialize["query_errors"] = o.QueryErrors
	}
	return json.Marshal(toSerialize)
}

type NullableQueryInfo struct {
	value *QueryInfo
	isSet bool
}

func (v NullableQueryInfo) Get() *QueryInfo {
	return v.value
}

func (v *NullableQueryInfo) Set(val *QueryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryInfo(val *QueryInfo) *NullableQueryInfo {
	return &NullableQueryInfo{value: val, isSet: true}
}

func (v NullableQueryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


