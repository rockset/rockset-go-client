/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceDynamoDbSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceDynamoDbSettings{}

// SourceDynamoDbSettings struct for SourceDynamoDbSettings
type SourceDynamoDbSettings struct {
	// Each DynamoDB stream can have one to many shards, and Rockset polls each DynamoDB shard at a fixed rate. Decreasing the duration between polls helps reduce ingest latency, while increasing the duration can prevent  Rockset from keeping up with the updates. If the latency exceeds 24 hours (DynamoDB stream retention duration), Rockset will not be able to process all of the streaming updates. Each request also has a fixed price associated with it. Duration value is of type ISO 8601 (e.g. PT5H, PT4M, PT3S). It doesn't account for DST, leap seconds and leap years. Minimum value: PT0.25S. Maximum value: PT5M.
	DynamodbStreamPollFrequency *string `json:"dynamodb_stream_poll_frequency,omitempty"`
}

// NewSourceDynamoDbSettings instantiates a new SourceDynamoDbSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceDynamoDbSettings() *SourceDynamoDbSettings {
	this := SourceDynamoDbSettings{}
	return &this
}

// NewSourceDynamoDbSettingsWithDefaults instantiates a new SourceDynamoDbSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceDynamoDbSettingsWithDefaults() *SourceDynamoDbSettings {
	this := SourceDynamoDbSettings{}
	return &this
}

// GetDynamodbStreamPollFrequency returns the DynamodbStreamPollFrequency field value if set, zero value otherwise.
func (o *SourceDynamoDbSettings) GetDynamodbStreamPollFrequency() string {
	if o == nil || IsNil(o.DynamodbStreamPollFrequency) {
		var ret string
		return ret
	}
	return *o.DynamodbStreamPollFrequency
}

// GetDynamodbStreamPollFrequencyOk returns a tuple with the DynamodbStreamPollFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceDynamoDbSettings) GetDynamodbStreamPollFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.DynamodbStreamPollFrequency) {
		return nil, false
	}
	return o.DynamodbStreamPollFrequency, true
}

// HasDynamodbStreamPollFrequency returns a boolean if a field has been set.
func (o *SourceDynamoDbSettings) HasDynamodbStreamPollFrequency() bool {
	if o != nil && !IsNil(o.DynamodbStreamPollFrequency) {
		return true
	}

	return false
}

// SetDynamodbStreamPollFrequency gets a reference to the given string and assigns it to the DynamodbStreamPollFrequency field.
func (o *SourceDynamoDbSettings) SetDynamodbStreamPollFrequency(v string) {
	o.DynamodbStreamPollFrequency = &v
}

func (o SourceDynamoDbSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceDynamoDbSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DynamodbStreamPollFrequency) {
		toSerialize["dynamodb_stream_poll_frequency"] = o.DynamodbStreamPollFrequency
	}
	return toSerialize, nil
}

type NullableSourceDynamoDbSettings struct {
	value *SourceDynamoDbSettings
	isSet bool
}

func (v NullableSourceDynamoDbSettings) Get() *SourceDynamoDbSettings {
	return v.value
}

func (v *NullableSourceDynamoDbSettings) Set(val *SourceDynamoDbSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceDynamoDbSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceDynamoDbSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceDynamoDbSettings(val *SourceDynamoDbSettings) *NullableSourceDynamoDbSettings {
	return &NullableSourceDynamoDbSettings{value: val, isSet: true}
}

func (v NullableSourceDynamoDbSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceDynamoDbSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
