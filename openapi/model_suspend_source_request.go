/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SuspendSourceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuspendSourceRequest{}

// SuspendSourceRequest struct for SuspendSourceRequest
type SuspendSourceRequest struct {
	// duration to suspend source; 1h is the default
	ResumeAfterDuration *string `json:"resume_after_duration,omitempty"`
}

// NewSuspendSourceRequest instantiates a new SuspendSourceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuspendSourceRequest() *SuspendSourceRequest {
	this := SuspendSourceRequest{}
	return &this
}

// NewSuspendSourceRequestWithDefaults instantiates a new SuspendSourceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuspendSourceRequestWithDefaults() *SuspendSourceRequest {
	this := SuspendSourceRequest{}
	return &this
}

// GetResumeAfterDuration returns the ResumeAfterDuration field value if set, zero value otherwise.
func (o *SuspendSourceRequest) GetResumeAfterDuration() string {
	if o == nil || IsNil(o.ResumeAfterDuration) {
		var ret string
		return ret
	}
	return *o.ResumeAfterDuration
}

// GetResumeAfterDurationOk returns a tuple with the ResumeAfterDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendSourceRequest) GetResumeAfterDurationOk() (*string, bool) {
	if o == nil || IsNil(o.ResumeAfterDuration) {
		return nil, false
	}
	return o.ResumeAfterDuration, true
}

// HasResumeAfterDuration returns a boolean if a field has been set.
func (o *SuspendSourceRequest) HasResumeAfterDuration() bool {
	if o != nil && !IsNil(o.ResumeAfterDuration) {
		return true
	}

	return false
}

// SetResumeAfterDuration gets a reference to the given string and assigns it to the ResumeAfterDuration field.
func (o *SuspendSourceRequest) SetResumeAfterDuration(v string) {
	o.ResumeAfterDuration = &v
}

func (o SuspendSourceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuspendSourceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResumeAfterDuration) {
		toSerialize["resume_after_duration"] = o.ResumeAfterDuration
	}
	return toSerialize, nil
}

type NullableSuspendSourceRequest struct {
	value *SuspendSourceRequest
	isSet bool
}

func (v NullableSuspendSourceRequest) Get() *SuspendSourceRequest {
	return v.value
}

func (v *NullableSuspendSourceRequest) Set(val *SuspendSourceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendSourceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendSourceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendSourceRequest(val *SuspendSourceRequest) *NullableSuspendSourceRequest {
	return &NullableSuspendSourceRequest{value: val, isSet: true}
}

func (v NullableSuspendSourceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendSourceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


