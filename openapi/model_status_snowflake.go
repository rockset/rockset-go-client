/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatusSnowflake type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusSnowflake{}

// StatusSnowflake struct for StatusSnowflake
type StatusSnowflake struct {
	// State of current ingest for this table.
	State *string `json:"state,omitempty"`
}

// NewStatusSnowflake instantiates a new StatusSnowflake object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusSnowflake() *StatusSnowflake {
	this := StatusSnowflake{}
	return &this
}

// NewStatusSnowflakeWithDefaults instantiates a new StatusSnowflake object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusSnowflakeWithDefaults() *StatusSnowflake {
	this := StatusSnowflake{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StatusSnowflake) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusSnowflake) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StatusSnowflake) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *StatusSnowflake) SetState(v string) {
	o.State = &v
}

func (o StatusSnowflake) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusSnowflake) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableStatusSnowflake struct {
	value *StatusSnowflake
	isSet bool
}

func (v NullableStatusSnowflake) Get() *StatusSnowflake {
	return v.value
}

func (v *NullableStatusSnowflake) Set(val *StatusSnowflake) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusSnowflake) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusSnowflake) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusSnowflake(val *StatusSnowflake) *NullableStatusSnowflake {
	return &NullableStatusSnowflake{value: val, isSet: true}
}

func (v NullableStatusSnowflake) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusSnowflake) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


