/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VirtualInstanceRrn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualInstanceRrn{}

// VirtualInstanceRrn struct for VirtualInstanceRrn
type VirtualInstanceRrn struct {
	Cluster      *string `json:"cluster,omitempty"`
	ResourceType *string `json:"resourceType,omitempty"`
	Uuid         *string `json:"uuid,omitempty"`
	Version      *int32  `json:"version,omitempty"`
}

// NewVirtualInstanceRrn instantiates a new VirtualInstanceRrn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualInstanceRrn() *VirtualInstanceRrn {
	this := VirtualInstanceRrn{}
	return &this
}

// NewVirtualInstanceRrnWithDefaults instantiates a new VirtualInstanceRrn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualInstanceRrnWithDefaults() *VirtualInstanceRrn {
	this := VirtualInstanceRrn{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *VirtualInstanceRrn) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualInstanceRrn) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *VirtualInstanceRrn) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *VirtualInstanceRrn) SetCluster(v string) {
	o.Cluster = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *VirtualInstanceRrn) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualInstanceRrn) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *VirtualInstanceRrn) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *VirtualInstanceRrn) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualInstanceRrn) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualInstanceRrn) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualInstanceRrn) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualInstanceRrn) SetUuid(v string) {
	o.Uuid = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VirtualInstanceRrn) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualInstanceRrn) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VirtualInstanceRrn) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *VirtualInstanceRrn) SetVersion(v int32) {
	o.Version = &v
}

func (o VirtualInstanceRrn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualInstanceRrn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableVirtualInstanceRrn struct {
	value *VirtualInstanceRrn
	isSet bool
}

func (v NullableVirtualInstanceRrn) Get() *VirtualInstanceRrn {
	return v.value
}

func (v *NullableVirtualInstanceRrn) Set(val *VirtualInstanceRrn) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualInstanceRrn) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualInstanceRrn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualInstanceRrn(val *VirtualInstanceRrn) *NullableVirtualInstanceRrn {
	return &NullableVirtualInstanceRrn{value: val, isSet: true}
}

func (v NullableVirtualInstanceRrn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualInstanceRrn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
