/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryLambdaSql type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryLambdaSql{}

// QueryLambdaSql struct for QueryLambdaSql
type QueryLambdaSql struct {
	// Default parameters for this Query Lambda.
	DefaultParameters []QueryParameter `json:"default_parameters,omitempty"`
	// SQL text.
	Query string `json:"query"`
}

// NewQueryLambdaSql instantiates a new QueryLambdaSql object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryLambdaSql(query string) *QueryLambdaSql {
	this := QueryLambdaSql{}
	this.Query = query
	return &this
}

// NewQueryLambdaSqlWithDefaults instantiates a new QueryLambdaSql object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryLambdaSqlWithDefaults() *QueryLambdaSql {
	this := QueryLambdaSql{}
	return &this
}

// GetDefaultParameters returns the DefaultParameters field value if set, zero value otherwise.
func (o *QueryLambdaSql) GetDefaultParameters() []QueryParameter {
	if o == nil || IsNil(o.DefaultParameters) {
		var ret []QueryParameter
		return ret
	}
	return o.DefaultParameters
}

// GetDefaultParametersOk returns a tuple with the DefaultParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryLambdaSql) GetDefaultParametersOk() ([]QueryParameter, bool) {
	if o == nil || IsNil(o.DefaultParameters) {
		return nil, false
	}
	return o.DefaultParameters, true
}

// HasDefaultParameters returns a boolean if a field has been set.
func (o *QueryLambdaSql) HasDefaultParameters() bool {
	if o != nil && !IsNil(o.DefaultParameters) {
		return true
	}

	return false
}

// SetDefaultParameters gets a reference to the given []QueryParameter and assigns it to the DefaultParameters field.
func (o *QueryLambdaSql) SetDefaultParameters(v []QueryParameter) {
	o.DefaultParameters = v
}

// GetQuery returns the Query field value
func (o *QueryLambdaSql) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryLambdaSql) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryLambdaSql) SetQuery(v string) {
	o.Query = v
}

func (o QueryLambdaSql) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryLambdaSql) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultParameters) {
		toSerialize["default_parameters"] = o.DefaultParameters
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

type NullableQueryLambdaSql struct {
	value *QueryLambdaSql
	isSet bool
}

func (v NullableQueryLambdaSql) Get() *QueryLambdaSql {
	return v.value
}

func (v *NullableQueryLambdaSql) Set(val *QueryLambdaSql) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryLambdaSql) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryLambdaSql) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryLambdaSql(val *QueryLambdaSql) *NullableQueryLambdaSql {
	return &NullableQueryLambdaSql{value: val, isSet: true}
}

func (v NullableQueryLambdaSql) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryLambdaSql) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


