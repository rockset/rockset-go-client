/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceAzureBlobStorage struct for SourceAzureBlobStorage
type SourceAzureBlobStorage struct {
	// Name of Azure blob Storage container you want to ingest from.
	Container *string `json:"container,omitempty"`
	// Prefix that selects blobs to ingest.
	Prefix *string `json:"prefix,omitempty"`
	// Glob-style pattern that selects keys to ingest. Only either prefix or pattern can be specified.
	Pattern *string `json:"pattern,omitempty"`
	BlobCountDownloaded *int64 `json:"blob_count_downloaded,omitempty"`
	BlobCountTotal *int64 `json:"blob_count_total,omitempty"`
	BlobBytesTotal *int64 `json:"blob_bytes_total,omitempty"`
}

// NewSourceAzureBlobStorage instantiates a new SourceAzureBlobStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAzureBlobStorage() *SourceAzureBlobStorage {
	this := SourceAzureBlobStorage{}
	return &this
}

// NewSourceAzureBlobStorageWithDefaults instantiates a new SourceAzureBlobStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAzureBlobStorageWithDefaults() *SourceAzureBlobStorage {
	this := SourceAzureBlobStorage{}
	return &this
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetContainer() string {
	if o == nil || o.Container == nil {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetContainerOk() (*string, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *SourceAzureBlobStorage) SetContainer(v string) {
	o.Container = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *SourceAzureBlobStorage) SetPrefix(v string) {
	o.Prefix = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *SourceAzureBlobStorage) SetPattern(v string) {
	o.Pattern = &v
}

// GetBlobCountDownloaded returns the BlobCountDownloaded field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetBlobCountDownloaded() int64 {
	if o == nil || o.BlobCountDownloaded == nil {
		var ret int64
		return ret
	}
	return *o.BlobCountDownloaded
}

// GetBlobCountDownloadedOk returns a tuple with the BlobCountDownloaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetBlobCountDownloadedOk() (*int64, bool) {
	if o == nil || o.BlobCountDownloaded == nil {
		return nil, false
	}
	return o.BlobCountDownloaded, true
}

// HasBlobCountDownloaded returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasBlobCountDownloaded() bool {
	if o != nil && o.BlobCountDownloaded != nil {
		return true
	}

	return false
}

// SetBlobCountDownloaded gets a reference to the given int64 and assigns it to the BlobCountDownloaded field.
func (o *SourceAzureBlobStorage) SetBlobCountDownloaded(v int64) {
	o.BlobCountDownloaded = &v
}

// GetBlobCountTotal returns the BlobCountTotal field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetBlobCountTotal() int64 {
	if o == nil || o.BlobCountTotal == nil {
		var ret int64
		return ret
	}
	return *o.BlobCountTotal
}

// GetBlobCountTotalOk returns a tuple with the BlobCountTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetBlobCountTotalOk() (*int64, bool) {
	if o == nil || o.BlobCountTotal == nil {
		return nil, false
	}
	return o.BlobCountTotal, true
}

// HasBlobCountTotal returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasBlobCountTotal() bool {
	if o != nil && o.BlobCountTotal != nil {
		return true
	}

	return false
}

// SetBlobCountTotal gets a reference to the given int64 and assigns it to the BlobCountTotal field.
func (o *SourceAzureBlobStorage) SetBlobCountTotal(v int64) {
	o.BlobCountTotal = &v
}

// GetBlobBytesTotal returns the BlobBytesTotal field value if set, zero value otherwise.
func (o *SourceAzureBlobStorage) GetBlobBytesTotal() int64 {
	if o == nil || o.BlobBytesTotal == nil {
		var ret int64
		return ret
	}
	return *o.BlobBytesTotal
}

// GetBlobBytesTotalOk returns a tuple with the BlobBytesTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceAzureBlobStorage) GetBlobBytesTotalOk() (*int64, bool) {
	if o == nil || o.BlobBytesTotal == nil {
		return nil, false
	}
	return o.BlobBytesTotal, true
}

// HasBlobBytesTotal returns a boolean if a field has been set.
func (o *SourceAzureBlobStorage) HasBlobBytesTotal() bool {
	if o != nil && o.BlobBytesTotal != nil {
		return true
	}

	return false
}

// SetBlobBytesTotal gets a reference to the given int64 and assigns it to the BlobBytesTotal field.
func (o *SourceAzureBlobStorage) SetBlobBytesTotal(v int64) {
	o.BlobBytesTotal = &v
}

func (o SourceAzureBlobStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if o.BlobCountDownloaded != nil {
		toSerialize["blob_count_downloaded"] = o.BlobCountDownloaded
	}
	if o.BlobCountTotal != nil {
		toSerialize["blob_count_total"] = o.BlobCountTotal
	}
	if o.BlobBytesTotal != nil {
		toSerialize["blob_bytes_total"] = o.BlobBytesTotal
	}
	return json.Marshal(toSerialize)
}

type NullableSourceAzureBlobStorage struct {
	value *SourceAzureBlobStorage
	isSet bool
}

func (v NullableSourceAzureBlobStorage) Get() *SourceAzureBlobStorage {
	return v.value
}

func (v *NullableSourceAzureBlobStorage) Set(val *SourceAzureBlobStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAzureBlobStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAzureBlobStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAzureBlobStorage(val *SourceAzureBlobStorage) *NullableSourceAzureBlobStorage {
	return &NullableSourceAzureBlobStorage{value: val, isSet: true}
}

func (v NullableSourceAzureBlobStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAzureBlobStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


