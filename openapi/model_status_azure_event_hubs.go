/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatusAzureEventHubs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusAzureEventHubs{}

// StatusAzureEventHubs struct for StatusAzureEventHubs
type StatusAzureEventHubs struct {
	// Time at which the last document was consumed.
	LastConsumedTime *string `json:"last_consumed_time,omitempty"`
	// Number of documents consumed.
	NumDocumentsProcessed *int64 `json:"num_documents_processed,omitempty"`
	// Status info per partition.
	Partitions []StatusAzureEventHubsPartition `json:"partitions,omitempty"`
	// State of the source.
	State *string `json:"state,omitempty"`
}

// NewStatusAzureEventHubs instantiates a new StatusAzureEventHubs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusAzureEventHubs() *StatusAzureEventHubs {
	this := StatusAzureEventHubs{}
	return &this
}

// NewStatusAzureEventHubsWithDefaults instantiates a new StatusAzureEventHubs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusAzureEventHubsWithDefaults() *StatusAzureEventHubs {
	this := StatusAzureEventHubs{}
	return &this
}

// GetLastConsumedTime returns the LastConsumedTime field value if set, zero value otherwise.
func (o *StatusAzureEventHubs) GetLastConsumedTime() string {
	if o == nil || IsNil(o.LastConsumedTime) {
		var ret string
		return ret
	}
	return *o.LastConsumedTime
}

// GetLastConsumedTimeOk returns a tuple with the LastConsumedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusAzureEventHubs) GetLastConsumedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastConsumedTime) {
		return nil, false
	}
	return o.LastConsumedTime, true
}

// HasLastConsumedTime returns a boolean if a field has been set.
func (o *StatusAzureEventHubs) HasLastConsumedTime() bool {
	if o != nil && !IsNil(o.LastConsumedTime) {
		return true
	}

	return false
}

// SetLastConsumedTime gets a reference to the given string and assigns it to the LastConsumedTime field.
func (o *StatusAzureEventHubs) SetLastConsumedTime(v string) {
	o.LastConsumedTime = &v
}

// GetNumDocumentsProcessed returns the NumDocumentsProcessed field value if set, zero value otherwise.
func (o *StatusAzureEventHubs) GetNumDocumentsProcessed() int64 {
	if o == nil || IsNil(o.NumDocumentsProcessed) {
		var ret int64
		return ret
	}
	return *o.NumDocumentsProcessed
}

// GetNumDocumentsProcessedOk returns a tuple with the NumDocumentsProcessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusAzureEventHubs) GetNumDocumentsProcessedOk() (*int64, bool) {
	if o == nil || IsNil(o.NumDocumentsProcessed) {
		return nil, false
	}
	return o.NumDocumentsProcessed, true
}

// HasNumDocumentsProcessed returns a boolean if a field has been set.
func (o *StatusAzureEventHubs) HasNumDocumentsProcessed() bool {
	if o != nil && !IsNil(o.NumDocumentsProcessed) {
		return true
	}

	return false
}

// SetNumDocumentsProcessed gets a reference to the given int64 and assigns it to the NumDocumentsProcessed field.
func (o *StatusAzureEventHubs) SetNumDocumentsProcessed(v int64) {
	o.NumDocumentsProcessed = &v
}

// GetPartitions returns the Partitions field value if set, zero value otherwise.
func (o *StatusAzureEventHubs) GetPartitions() []StatusAzureEventHubsPartition {
	if o == nil || IsNil(o.Partitions) {
		var ret []StatusAzureEventHubsPartition
		return ret
	}
	return o.Partitions
}

// GetPartitionsOk returns a tuple with the Partitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusAzureEventHubs) GetPartitionsOk() ([]StatusAzureEventHubsPartition, bool) {
	if o == nil || IsNil(o.Partitions) {
		return nil, false
	}
	return o.Partitions, true
}

// HasPartitions returns a boolean if a field has been set.
func (o *StatusAzureEventHubs) HasPartitions() bool {
	if o != nil && !IsNil(o.Partitions) {
		return true
	}

	return false
}

// SetPartitions gets a reference to the given []StatusAzureEventHubsPartition and assigns it to the Partitions field.
func (o *StatusAzureEventHubs) SetPartitions(v []StatusAzureEventHubsPartition) {
	o.Partitions = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *StatusAzureEventHubs) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusAzureEventHubs) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *StatusAzureEventHubs) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *StatusAzureEventHubs) SetState(v string) {
	o.State = &v
}

func (o StatusAzureEventHubs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusAzureEventHubs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastConsumedTime) {
		toSerialize["last_consumed_time"] = o.LastConsumedTime
	}
	if !IsNil(o.NumDocumentsProcessed) {
		toSerialize["num_documents_processed"] = o.NumDocumentsProcessed
	}
	if !IsNil(o.Partitions) {
		toSerialize["partitions"] = o.Partitions
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableStatusAzureEventHubs struct {
	value *StatusAzureEventHubs
	isSet bool
}

func (v NullableStatusAzureEventHubs) Get() *StatusAzureEventHubs {
	return v.value
}

func (v *NullableStatusAzureEventHubs) Set(val *StatusAzureEventHubs) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusAzureEventHubs) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusAzureEventHubs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusAzureEventHubs(val *StatusAzureEventHubs) *NullableStatusAzureEventHubs {
	return &NullableStatusAzureEventHubs{value: val, isSet: true}
}

func (v NullableStatusAzureEventHubs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusAzureEventHubs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


