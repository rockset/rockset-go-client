/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AutoScalingPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoScalingPolicy{}

// AutoScalingPolicy struct for AutoScalingPolicy
type AutoScalingPolicy struct {
	// Whether auto scaling policy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Maximum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes greater than or same as the min_size and lower than or same as the current size.
	MaxSize *string `json:"max_size,omitempty"`
	// Minimum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes lower than or same as the max_size and greater than or same as the current size.
	MinSize *string `json:"min_size,omitempty"`
}

// NewAutoScalingPolicy instantiates a new AutoScalingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoScalingPolicy() *AutoScalingPolicy {
	this := AutoScalingPolicy{}
	return &this
}

// NewAutoScalingPolicyWithDefaults instantiates a new AutoScalingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoScalingPolicyWithDefaults() *AutoScalingPolicy {
	this := AutoScalingPolicy{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AutoScalingPolicy) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoScalingPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AutoScalingPolicy) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AutoScalingPolicy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *AutoScalingPolicy) GetMaxSize() string {
	if o == nil || IsNil(o.MaxSize) {
		var ret string
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoScalingPolicy) GetMaxSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxSize) {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *AutoScalingPolicy) HasMaxSize() bool {
	if o != nil && !IsNil(o.MaxSize) {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given string and assigns it to the MaxSize field.
func (o *AutoScalingPolicy) SetMaxSize(v string) {
	o.MaxSize = &v
}

// GetMinSize returns the MinSize field value if set, zero value otherwise.
func (o *AutoScalingPolicy) GetMinSize() string {
	if o == nil || IsNil(o.MinSize) {
		var ret string
		return ret
	}
	return *o.MinSize
}

// GetMinSizeOk returns a tuple with the MinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoScalingPolicy) GetMinSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MinSize) {
		return nil, false
	}
	return o.MinSize, true
}

// HasMinSize returns a boolean if a field has been set.
func (o *AutoScalingPolicy) HasMinSize() bool {
	if o != nil && !IsNil(o.MinSize) {
		return true
	}

	return false
}

// SetMinSize gets a reference to the given string and assigns it to the MinSize field.
func (o *AutoScalingPolicy) SetMinSize(v string) {
	o.MinSize = &v
}

func (o AutoScalingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoScalingPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.MaxSize) {
		toSerialize["max_size"] = o.MaxSize
	}
	if !IsNil(o.MinSize) {
		toSerialize["min_size"] = o.MinSize
	}
	return toSerialize, nil
}

type NullableAutoScalingPolicy struct {
	value *AutoScalingPolicy
	isSet bool
}

func (v NullableAutoScalingPolicy) Get() *AutoScalingPolicy {
	return v.value
}

func (v *NullableAutoScalingPolicy) Set(val *AutoScalingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoScalingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoScalingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoScalingPolicy(val *AutoScalingPolicy) *NullableAutoScalingPolicy {
	return &NullableAutoScalingPolicy{value: val, isSet: true}
}

func (v NullableAutoScalingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoScalingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


