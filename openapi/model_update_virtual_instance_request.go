/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateVirtualInstanceRequest struct for UpdateVirtualInstanceRequest
type UpdateVirtualInstanceRequest struct {
	// Requested virtual instance size.
	NewSize *string `json:"new_size,omitempty"`
	NewType *string `json:"new_type,omitempty"`
	MonitoringEnabled *bool `json:"monitoring_enabled,omitempty"`
	// New virtual instance name.
	Name *string `json:"name,omitempty"`
	// New virtual instance description.
	Description *string `json:"description,omitempty"`
}

// NewUpdateVirtualInstanceRequest instantiates a new UpdateVirtualInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVirtualInstanceRequest() *UpdateVirtualInstanceRequest {
	this := UpdateVirtualInstanceRequest{}
	return &this
}

// NewUpdateVirtualInstanceRequestWithDefaults instantiates a new UpdateVirtualInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVirtualInstanceRequestWithDefaults() *UpdateVirtualInstanceRequest {
	this := UpdateVirtualInstanceRequest{}
	return &this
}

// GetNewSize returns the NewSize field value if set, zero value otherwise.
func (o *UpdateVirtualInstanceRequest) GetNewSize() string {
	if o == nil || o.NewSize == nil {
		var ret string
		return ret
	}
	return *o.NewSize
}

// GetNewSizeOk returns a tuple with the NewSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualInstanceRequest) GetNewSizeOk() (*string, bool) {
	if o == nil || o.NewSize == nil {
		return nil, false
	}
	return o.NewSize, true
}

// HasNewSize returns a boolean if a field has been set.
func (o *UpdateVirtualInstanceRequest) HasNewSize() bool {
	if o != nil && o.NewSize != nil {
		return true
	}

	return false
}

// SetNewSize gets a reference to the given string and assigns it to the NewSize field.
func (o *UpdateVirtualInstanceRequest) SetNewSize(v string) {
	o.NewSize = &v
}

// GetNewType returns the NewType field value if set, zero value otherwise.
func (o *UpdateVirtualInstanceRequest) GetNewType() string {
	if o == nil || o.NewType == nil {
		var ret string
		return ret
	}
	return *o.NewType
}

// GetNewTypeOk returns a tuple with the NewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualInstanceRequest) GetNewTypeOk() (*string, bool) {
	if o == nil || o.NewType == nil {
		return nil, false
	}
	return o.NewType, true
}

// HasNewType returns a boolean if a field has been set.
func (o *UpdateVirtualInstanceRequest) HasNewType() bool {
	if o != nil && o.NewType != nil {
		return true
	}

	return false
}

// SetNewType gets a reference to the given string and assigns it to the NewType field.
func (o *UpdateVirtualInstanceRequest) SetNewType(v string) {
	o.NewType = &v
}

// GetMonitoringEnabled returns the MonitoringEnabled field value if set, zero value otherwise.
func (o *UpdateVirtualInstanceRequest) GetMonitoringEnabled() bool {
	if o == nil || o.MonitoringEnabled == nil {
		var ret bool
		return ret
	}
	return *o.MonitoringEnabled
}

// GetMonitoringEnabledOk returns a tuple with the MonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualInstanceRequest) GetMonitoringEnabledOk() (*bool, bool) {
	if o == nil || o.MonitoringEnabled == nil {
		return nil, false
	}
	return o.MonitoringEnabled, true
}

// HasMonitoringEnabled returns a boolean if a field has been set.
func (o *UpdateVirtualInstanceRequest) HasMonitoringEnabled() bool {
	if o != nil && o.MonitoringEnabled != nil {
		return true
	}

	return false
}

// SetMonitoringEnabled gets a reference to the given bool and assigns it to the MonitoringEnabled field.
func (o *UpdateVirtualInstanceRequest) SetMonitoringEnabled(v bool) {
	o.MonitoringEnabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateVirtualInstanceRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualInstanceRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateVirtualInstanceRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateVirtualInstanceRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateVirtualInstanceRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVirtualInstanceRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateVirtualInstanceRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateVirtualInstanceRequest) SetDescription(v string) {
	o.Description = &v
}

func (o UpdateVirtualInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewSize != nil {
		toSerialize["new_size"] = o.NewSize
	}
	if o.NewType != nil {
		toSerialize["new_type"] = o.NewType
	}
	if o.MonitoringEnabled != nil {
		toSerialize["monitoring_enabled"] = o.MonitoringEnabled
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateVirtualInstanceRequest struct {
	value *UpdateVirtualInstanceRequest
	isSet bool
}

func (v NullableUpdateVirtualInstanceRequest) Get() *UpdateVirtualInstanceRequest {
	return v.value
}

func (v *NullableUpdateVirtualInstanceRequest) Set(val *UpdateVirtualInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVirtualInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVirtualInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVirtualInstanceRequest(val *UpdateVirtualInstanceRequest) *NullableUpdateVirtualInstanceRequest {
	return &NullableUpdateVirtualInstanceRequest{value: val, isSet: true}
}

func (v NullableUpdateVirtualInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVirtualInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


