/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceGcsSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceGcsSettings{}

// SourceGcsSettings struct for SourceGcsSettings
type SourceGcsSettings struct {
	// Rockset scans a GCS bucket based on a defined time interval. The scan frequency determines the length of time between a new scan and the previous scan. If the previous scan finds new objects or updates to existing objects, Rockset immediately scans the bucket again after processing changes from the previous scan.
	GcsScanFrequency *string `json:"gcs_scan_frequency,omitempty"`
}

// NewSourceGcsSettings instantiates a new SourceGcsSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceGcsSettings() *SourceGcsSettings {
	this := SourceGcsSettings{}
	return &this
}

// NewSourceGcsSettingsWithDefaults instantiates a new SourceGcsSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceGcsSettingsWithDefaults() *SourceGcsSettings {
	this := SourceGcsSettings{}
	return &this
}

// GetGcsScanFrequency returns the GcsScanFrequency field value if set, zero value otherwise.
func (o *SourceGcsSettings) GetGcsScanFrequency() string {
	if o == nil || IsNil(o.GcsScanFrequency) {
		var ret string
		return ret
	}
	return *o.GcsScanFrequency
}

// GetGcsScanFrequencyOk returns a tuple with the GcsScanFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceGcsSettings) GetGcsScanFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.GcsScanFrequency) {
		return nil, false
	}
	return o.GcsScanFrequency, true
}

// HasGcsScanFrequency returns a boolean if a field has been set.
func (o *SourceGcsSettings) HasGcsScanFrequency() bool {
	if o != nil && !IsNil(o.GcsScanFrequency) {
		return true
	}

	return false
}

// SetGcsScanFrequency gets a reference to the given string and assigns it to the GcsScanFrequency field.
func (o *SourceGcsSettings) SetGcsScanFrequency(v string) {
	o.GcsScanFrequency = &v
}

func (o SourceGcsSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceGcsSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GcsScanFrequency) {
		toSerialize["gcs_scan_frequency"] = o.GcsScanFrequency
	}
	return toSerialize, nil
}

type NullableSourceGcsSettings struct {
	value *SourceGcsSettings
	isSet bool
}

func (v NullableSourceGcsSettings) Get() *SourceGcsSettings {
	return v.value
}

func (v *NullableSourceGcsSettings) Set(val *SourceGcsSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceGcsSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceGcsSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceGcsSettings(val *SourceGcsSettings) *NullableSourceGcsSettings {
	return &NullableSourceGcsSettings{value: val, isSet: true}
}

func (v NullableSourceGcsSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceGcsSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


