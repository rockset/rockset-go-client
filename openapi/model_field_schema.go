/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FieldSchema struct for FieldSchema
type FieldSchema struct {
	// The name of a field, parsed as a SQL qualified name
	FieldName *string `json:"field_name,omitempty"`
	FieldOptions *FieldOptions `json:"field_options,omitempty"`
}

// NewFieldSchema instantiates a new FieldSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldSchema() *FieldSchema {
	this := FieldSchema{}
	return &this
}

// NewFieldSchemaWithDefaults instantiates a new FieldSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldSchemaWithDefaults() *FieldSchema {
	this := FieldSchema{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FieldSchema) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldSchema) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FieldSchema) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FieldSchema) SetFieldName(v string) {
	o.FieldName = &v
}

// GetFieldOptions returns the FieldOptions field value if set, zero value otherwise.
func (o *FieldSchema) GetFieldOptions() FieldOptions {
	if o == nil || o.FieldOptions == nil {
		var ret FieldOptions
		return ret
	}
	return *o.FieldOptions
}

// GetFieldOptionsOk returns a tuple with the FieldOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldSchema) GetFieldOptionsOk() (*FieldOptions, bool) {
	if o == nil || o.FieldOptions == nil {
		return nil, false
	}
	return o.FieldOptions, true
}

// HasFieldOptions returns a boolean if a field has been set.
func (o *FieldSchema) HasFieldOptions() bool {
	if o != nil && o.FieldOptions != nil {
		return true
	}

	return false
}

// SetFieldOptions gets a reference to the given FieldOptions and assigns it to the FieldOptions field.
func (o *FieldSchema) SetFieldOptions(v FieldOptions) {
	o.FieldOptions = &v
}

func (o FieldSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldName != nil {
		toSerialize["field_name"] = o.FieldName
	}
	if o.FieldOptions != nil {
		toSerialize["field_options"] = o.FieldOptions
	}
	return json.Marshal(toSerialize)
}

type NullableFieldSchema struct {
	value *FieldSchema
	isSet bool
}

func (v NullableFieldSchema) Get() *FieldSchema {
	return v.value
}

func (v *NullableFieldSchema) Set(val *FieldSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldSchema(val *FieldSchema) *NullableFieldSchema {
	return &NullableFieldSchema{value: val, isSet: true}
}

func (v NullableFieldSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


