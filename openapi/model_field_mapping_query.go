/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FieldMappingQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldMappingQuery{}

// FieldMappingQuery struct for FieldMappingQuery
type FieldMappingQuery struct {
	// SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input.
	Sql *string `json:"sql,omitempty"`
}

// NewFieldMappingQuery instantiates a new FieldMappingQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldMappingQuery() *FieldMappingQuery {
	this := FieldMappingQuery{}
	return &this
}

// NewFieldMappingQueryWithDefaults instantiates a new FieldMappingQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldMappingQueryWithDefaults() *FieldMappingQuery {
	this := FieldMappingQuery{}
	return &this
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *FieldMappingQuery) GetSql() string {
	if o == nil || IsNil(o.Sql) {
		var ret string
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMappingQuery) GetSqlOk() (*string, bool) {
	if o == nil || IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *FieldMappingQuery) HasSql() bool {
	if o != nil && !IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given string and assigns it to the Sql field.
func (o *FieldMappingQuery) SetSql(v string) {
	o.Sql = &v
}

func (o FieldMappingQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldMappingQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	return toSerialize, nil
}

type NullableFieldMappingQuery struct {
	value *FieldMappingQuery
	isSet bool
}

func (v NullableFieldMappingQuery) Get() *FieldMappingQuery {
	return v.value
}

func (v *NullableFieldMappingQuery) Set(val *FieldMappingQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldMappingQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldMappingQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldMappingQuery(val *FieldMappingQuery) *NullableFieldMappingQuery {
	return &NullableFieldMappingQuery{value: val, isSet: true}
}

func (v NullableFieldMappingQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldMappingQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


