/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FieldMaskMask Field masking function name + args. The args is a JSON object.
type FieldMaskMask struct {
	Name string `json:"name"`
	Args map[string]interface{} `json:"args,omitempty"`
}

// NewFieldMaskMask instantiates a new FieldMaskMask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldMaskMask(name string) *FieldMaskMask {
	this := FieldMaskMask{}
	this.Name = name
	return &this
}

// NewFieldMaskMaskWithDefaults instantiates a new FieldMaskMask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldMaskMaskWithDefaults() *FieldMaskMask {
	this := FieldMaskMask{}
	return &this
}

// GetName returns the Name field value
func (o *FieldMaskMask) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FieldMaskMask) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FieldMaskMask) SetName(v string) {
	o.Name = v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *FieldMaskMask) GetArgs() map[string]interface{} {
	if o == nil || o.Args == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldMaskMask) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *FieldMaskMask) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *FieldMaskMask) SetArgs(v map[string]interface{}) {
	o.Args = v
}

func (o FieldMaskMask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return json.Marshal(toSerialize)
}

type NullableFieldMaskMask struct {
	value *FieldMaskMask
	isSet bool
}

func (v NullableFieldMaskMask) Get() *FieldMaskMask {
	return v.value
}

func (v *NullableFieldMaskMask) Set(val *FieldMaskMask) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldMaskMask) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldMaskMask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldMaskMask(val *FieldMaskMask) *NullableFieldMaskMask {
	return &NullableFieldMaskMask{value: val, isSet: true}
}

func (v NullableFieldMaskMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldMaskMask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


