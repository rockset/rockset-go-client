/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateCollectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCollectionRequest{}

// UpdateCollectionRequest struct for UpdateCollectionRequest
type UpdateCollectionRequest struct {
	// Updated text describing the collection.
	Description *string `json:"description,omitempty"`
	FieldMappingQuery *FieldMappingQuery `json:"field_mapping_query,omitempty"`
}

// NewUpdateCollectionRequest instantiates a new UpdateCollectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCollectionRequest() *UpdateCollectionRequest {
	this := UpdateCollectionRequest{}
	return &this
}

// NewUpdateCollectionRequestWithDefaults instantiates a new UpdateCollectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCollectionRequestWithDefaults() *UpdateCollectionRequest {
	this := UpdateCollectionRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateCollectionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateCollectionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateCollectionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetFieldMappingQuery returns the FieldMappingQuery field value if set, zero value otherwise.
func (o *UpdateCollectionRequest) GetFieldMappingQuery() FieldMappingQuery {
	if o == nil || IsNil(o.FieldMappingQuery) {
		var ret FieldMappingQuery
		return ret
	}
	return *o.FieldMappingQuery
}

// GetFieldMappingQueryOk returns a tuple with the FieldMappingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCollectionRequest) GetFieldMappingQueryOk() (*FieldMappingQuery, bool) {
	if o == nil || IsNil(o.FieldMappingQuery) {
		return nil, false
	}
	return o.FieldMappingQuery, true
}

// HasFieldMappingQuery returns a boolean if a field has been set.
func (o *UpdateCollectionRequest) HasFieldMappingQuery() bool {
	if o != nil && !IsNil(o.FieldMappingQuery) {
		return true
	}

	return false
}

// SetFieldMappingQuery gets a reference to the given FieldMappingQuery and assigns it to the FieldMappingQuery field.
func (o *UpdateCollectionRequest) SetFieldMappingQuery(v FieldMappingQuery) {
	o.FieldMappingQuery = &v
}

func (o UpdateCollectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCollectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FieldMappingQuery) {
		toSerialize["field_mapping_query"] = o.FieldMappingQuery
	}
	return toSerialize, nil
}

type NullableUpdateCollectionRequest struct {
	value *UpdateCollectionRequest
	isSet bool
}

func (v NullableUpdateCollectionRequest) Get() *UpdateCollectionRequest {
	return v.value
}

func (v *NullableUpdateCollectionRequest) Set(val *UpdateCollectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCollectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCollectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCollectionRequest(val *UpdateCollectionRequest) *NullableUpdateCollectionRequest {
	return &NullableUpdateCollectionRequest{value: val, isSet: true}
}

func (v NullableUpdateCollectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCollectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


