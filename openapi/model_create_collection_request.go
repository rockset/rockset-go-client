/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateCollectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCollectionRequest{}

// CreateCollectionRequest struct for CreateCollectionRequest
type CreateCollectionRequest struct {
	// Deprecated. List of clustering fields. Use CLUSTER BY clause in `field_mapping_query` instead.
	ClusteringKey []FieldPartition `json:"clustering_key,omitempty"`
	// Text describing the collection.
	Description *string `json:"description,omitempty"`
	EventTimeInfo *EventTimeInfo `json:"event_time_info,omitempty"`
	FieldMappingQuery *FieldMappingQuery `json:"field_mapping_query,omitempty"`
	// Unique identifier for collection, can contain alphanumeric or dash characters.
	Name *string `json:"name,omitempty"`
	// Number of seconds after which data is purged, based on event time.
	RetentionSecs *int64 `json:"retention_secs,omitempty"`
	// Soft ingest limit for this collection.
	SourceDownloadSoftLimitBytes *int64 `json:"source_download_soft_limit_bytes,omitempty"`
	// List of sources from which to ingest data.
	Sources []Source `json:"sources,omitempty"`
	// RocksDB storage compression type.
	StorageCompressionType *string `json:"storage_compression_type,omitempty"`
}

// NewCreateCollectionRequest instantiates a new CreateCollectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCollectionRequest() *CreateCollectionRequest {
	this := CreateCollectionRequest{}
	return &this
}

// NewCreateCollectionRequestWithDefaults instantiates a new CreateCollectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCollectionRequestWithDefaults() *CreateCollectionRequest {
	this := CreateCollectionRequest{}
	return &this
}

// GetClusteringKey returns the ClusteringKey field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetClusteringKey() []FieldPartition {
	if o == nil || IsNil(o.ClusteringKey) {
		var ret []FieldPartition
		return ret
	}
	return o.ClusteringKey
}

// GetClusteringKeyOk returns a tuple with the ClusteringKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetClusteringKeyOk() ([]FieldPartition, bool) {
	if o == nil || IsNil(o.ClusteringKey) {
		return nil, false
	}
	return o.ClusteringKey, true
}

// HasClusteringKey returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasClusteringKey() bool {
	if o != nil && !IsNil(o.ClusteringKey) {
		return true
	}

	return false
}

// SetClusteringKey gets a reference to the given []FieldPartition and assigns it to the ClusteringKey field.
func (o *CreateCollectionRequest) SetClusteringKey(v []FieldPartition) {
	o.ClusteringKey = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateCollectionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEventTimeInfo returns the EventTimeInfo field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetEventTimeInfo() EventTimeInfo {
	if o == nil || IsNil(o.EventTimeInfo) {
		var ret EventTimeInfo
		return ret
	}
	return *o.EventTimeInfo
}

// GetEventTimeInfoOk returns a tuple with the EventTimeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetEventTimeInfoOk() (*EventTimeInfo, bool) {
	if o == nil || IsNil(o.EventTimeInfo) {
		return nil, false
	}
	return o.EventTimeInfo, true
}

// HasEventTimeInfo returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasEventTimeInfo() bool {
	if o != nil && !IsNil(o.EventTimeInfo) {
		return true
	}

	return false
}

// SetEventTimeInfo gets a reference to the given EventTimeInfo and assigns it to the EventTimeInfo field.
func (o *CreateCollectionRequest) SetEventTimeInfo(v EventTimeInfo) {
	o.EventTimeInfo = &v
}

// GetFieldMappingQuery returns the FieldMappingQuery field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetFieldMappingQuery() FieldMappingQuery {
	if o == nil || IsNil(o.FieldMappingQuery) {
		var ret FieldMappingQuery
		return ret
	}
	return *o.FieldMappingQuery
}

// GetFieldMappingQueryOk returns a tuple with the FieldMappingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetFieldMappingQueryOk() (*FieldMappingQuery, bool) {
	if o == nil || IsNil(o.FieldMappingQuery) {
		return nil, false
	}
	return o.FieldMappingQuery, true
}

// HasFieldMappingQuery returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasFieldMappingQuery() bool {
	if o != nil && !IsNil(o.FieldMappingQuery) {
		return true
	}

	return false
}

// SetFieldMappingQuery gets a reference to the given FieldMappingQuery and assigns it to the FieldMappingQuery field.
func (o *CreateCollectionRequest) SetFieldMappingQuery(v FieldMappingQuery) {
	o.FieldMappingQuery = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateCollectionRequest) SetName(v string) {
	o.Name = &v
}

// GetRetentionSecs returns the RetentionSecs field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetRetentionSecs() int64 {
	if o == nil || IsNil(o.RetentionSecs) {
		var ret int64
		return ret
	}
	return *o.RetentionSecs
}

// GetRetentionSecsOk returns a tuple with the RetentionSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetRetentionSecsOk() (*int64, bool) {
	if o == nil || IsNil(o.RetentionSecs) {
		return nil, false
	}
	return o.RetentionSecs, true
}

// HasRetentionSecs returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasRetentionSecs() bool {
	if o != nil && !IsNil(o.RetentionSecs) {
		return true
	}

	return false
}

// SetRetentionSecs gets a reference to the given int64 and assigns it to the RetentionSecs field.
func (o *CreateCollectionRequest) SetRetentionSecs(v int64) {
	o.RetentionSecs = &v
}

// GetSourceDownloadSoftLimitBytes returns the SourceDownloadSoftLimitBytes field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetSourceDownloadSoftLimitBytes() int64 {
	if o == nil || IsNil(o.SourceDownloadSoftLimitBytes) {
		var ret int64
		return ret
	}
	return *o.SourceDownloadSoftLimitBytes
}

// GetSourceDownloadSoftLimitBytesOk returns a tuple with the SourceDownloadSoftLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetSourceDownloadSoftLimitBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SourceDownloadSoftLimitBytes) {
		return nil, false
	}
	return o.SourceDownloadSoftLimitBytes, true
}

// HasSourceDownloadSoftLimitBytes returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasSourceDownloadSoftLimitBytes() bool {
	if o != nil && !IsNil(o.SourceDownloadSoftLimitBytes) {
		return true
	}

	return false
}

// SetSourceDownloadSoftLimitBytes gets a reference to the given int64 and assigns it to the SourceDownloadSoftLimitBytes field.
func (o *CreateCollectionRequest) SetSourceDownloadSoftLimitBytes(v int64) {
	o.SourceDownloadSoftLimitBytes = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetSources() []Source {
	if o == nil || IsNil(o.Sources) {
		var ret []Source
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetSourcesOk() ([]Source, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Source and assigns it to the Sources field.
func (o *CreateCollectionRequest) SetSources(v []Source) {
	o.Sources = v
}

// GetStorageCompressionType returns the StorageCompressionType field value if set, zero value otherwise.
func (o *CreateCollectionRequest) GetStorageCompressionType() string {
	if o == nil || IsNil(o.StorageCompressionType) {
		var ret string
		return ret
	}
	return *o.StorageCompressionType
}

// GetStorageCompressionTypeOk returns a tuple with the StorageCompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCollectionRequest) GetStorageCompressionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageCompressionType) {
		return nil, false
	}
	return o.StorageCompressionType, true
}

// HasStorageCompressionType returns a boolean if a field has been set.
func (o *CreateCollectionRequest) HasStorageCompressionType() bool {
	if o != nil && !IsNil(o.StorageCompressionType) {
		return true
	}

	return false
}

// SetStorageCompressionType gets a reference to the given string and assigns it to the StorageCompressionType field.
func (o *CreateCollectionRequest) SetStorageCompressionType(v string) {
	o.StorageCompressionType = &v
}

func (o CreateCollectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCollectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusteringKey) {
		toSerialize["clustering_key"] = o.ClusteringKey
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EventTimeInfo) {
		toSerialize["event_time_info"] = o.EventTimeInfo
	}
	if !IsNil(o.FieldMappingQuery) {
		toSerialize["field_mapping_query"] = o.FieldMappingQuery
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RetentionSecs) {
		toSerialize["retention_secs"] = o.RetentionSecs
	}
	if !IsNil(o.SourceDownloadSoftLimitBytes) {
		toSerialize["source_download_soft_limit_bytes"] = o.SourceDownloadSoftLimitBytes
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.StorageCompressionType) {
		toSerialize["storage_compression_type"] = o.StorageCompressionType
	}
	return toSerialize, nil
}

type NullableCreateCollectionRequest struct {
	value *CreateCollectionRequest
	isSet bool
}

func (v NullableCreateCollectionRequest) Get() *CreateCollectionRequest {
	return v.value
}

func (v *NullableCreateCollectionRequest) Set(val *CreateCollectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCollectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCollectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCollectionRequest(val *CreateCollectionRequest) *NullableCreateCollectionRequest {
	return &NullableCreateCollectionRequest{value: val, isSet: true}
}

func (v NullableCreateCollectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCollectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


