/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddDocumentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddDocumentsRequest{}

// AddDocumentsRequest struct for AddDocumentsRequest
type AddDocumentsRequest struct {
	// Array of documents to be added to the collection.
	Data []map[string]interface{} `json:"data"`
}

// NewAddDocumentsRequest instantiates a new AddDocumentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDocumentsRequest(data []map[string]interface{}) *AddDocumentsRequest {
	this := AddDocumentsRequest{}
	this.Data = data
	return &this
}

// NewAddDocumentsRequestWithDefaults instantiates a new AddDocumentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDocumentsRequestWithDefaults() *AddDocumentsRequest {
	this := AddDocumentsRequest{}
	return &this
}

// GetData returns the Data field value
func (o *AddDocumentsRequest) GetData() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AddDocumentsRequest) GetDataOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *AddDocumentsRequest) SetData(v []map[string]interface{}) {
	o.Data = v
}

func (o AddDocumentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddDocumentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

type NullableAddDocumentsRequest struct {
	value *AddDocumentsRequest
	isSet bool
}

func (v NullableAddDocumentsRequest) Get() *AddDocumentsRequest {
	return v.value
}

func (v *NullableAddDocumentsRequest) Set(val *AddDocumentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDocumentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDocumentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDocumentsRequest(val *AddDocumentsRequest) *NullableAddDocumentsRequest {
	return &NullableAddDocumentsRequest{value: val, isSet: true}
}

func (v NullableAddDocumentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDocumentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


