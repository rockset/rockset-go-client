/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputField struct for InputField
type InputField struct {
	// The name of a field, parsed as a SQL qualified name.
	FieldName *string `json:"field_name,omitempty"`
	// Define the behaviour if fieldName is missing or is null.
	IfMissing *string `json:"if_missing,omitempty"`
	// If true, then drop fieldName from the document.
	IsDrop *bool `json:"is_drop,omitempty"`
	// Sql parameter name.
	Param *string `json:"param,omitempty"`
}

// NewInputField instantiates a new InputField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputField() *InputField {
	this := InputField{}
	return &this
}

// NewInputFieldWithDefaults instantiates a new InputField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputFieldWithDefaults() *InputField {
	this := InputField{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *InputField) GetFieldName() string {
	if o == nil || o.FieldName == nil {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputField) GetFieldNameOk() (*string, bool) {
	if o == nil || o.FieldName == nil {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *InputField) HasFieldName() bool {
	if o != nil && o.FieldName != nil {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *InputField) SetFieldName(v string) {
	o.FieldName = &v
}

// GetIfMissing returns the IfMissing field value if set, zero value otherwise.
func (o *InputField) GetIfMissing() string {
	if o == nil || o.IfMissing == nil {
		var ret string
		return ret
	}
	return *o.IfMissing
}

// GetIfMissingOk returns a tuple with the IfMissing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputField) GetIfMissingOk() (*string, bool) {
	if o == nil || o.IfMissing == nil {
		return nil, false
	}
	return o.IfMissing, true
}

// HasIfMissing returns a boolean if a field has been set.
func (o *InputField) HasIfMissing() bool {
	if o != nil && o.IfMissing != nil {
		return true
	}

	return false
}

// SetIfMissing gets a reference to the given string and assigns it to the IfMissing field.
func (o *InputField) SetIfMissing(v string) {
	o.IfMissing = &v
}

// GetIsDrop returns the IsDrop field value if set, zero value otherwise.
func (o *InputField) GetIsDrop() bool {
	if o == nil || o.IsDrop == nil {
		var ret bool
		return ret
	}
	return *o.IsDrop
}

// GetIsDropOk returns a tuple with the IsDrop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputField) GetIsDropOk() (*bool, bool) {
	if o == nil || o.IsDrop == nil {
		return nil, false
	}
	return o.IsDrop, true
}

// HasIsDrop returns a boolean if a field has been set.
func (o *InputField) HasIsDrop() bool {
	if o != nil && o.IsDrop != nil {
		return true
	}

	return false
}

// SetIsDrop gets a reference to the given bool and assigns it to the IsDrop field.
func (o *InputField) SetIsDrop(v bool) {
	o.IsDrop = &v
}

// GetParam returns the Param field value if set, zero value otherwise.
func (o *InputField) GetParam() string {
	if o == nil || o.Param == nil {
		var ret string
		return ret
	}
	return *o.Param
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputField) GetParamOk() (*string, bool) {
	if o == nil || o.Param == nil {
		return nil, false
	}
	return o.Param, true
}

// HasParam returns a boolean if a field has been set.
func (o *InputField) HasParam() bool {
	if o != nil && o.Param != nil {
		return true
	}

	return false
}

// SetParam gets a reference to the given string and assigns it to the Param field.
func (o *InputField) SetParam(v string) {
	o.Param = &v
}

func (o InputField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FieldName != nil {
		toSerialize["field_name"] = o.FieldName
	}
	if o.IfMissing != nil {
		toSerialize["if_missing"] = o.IfMissing
	}
	if o.IsDrop != nil {
		toSerialize["is_drop"] = o.IsDrop
	}
	if o.Param != nil {
		toSerialize["param"] = o.Param
	}
	return json.Marshal(toSerialize)
}

type NullableInputField struct {
	value *InputField
	isSet bool
}

func (v NullableInputField) Get() *InputField {
	return v.value
}

func (v *NullableInputField) Set(val *InputField) {
	v.value = val
	v.isSet = true
}

func (v NullableInputField) IsSet() bool {
	return v.isSet
}

func (v *NullableInputField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputField(val *InputField) *NullableInputField {
	return &NullableInputField{value: val, isSet: true}
}

func (v NullableInputField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


