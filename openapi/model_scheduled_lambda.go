/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScheduledLambda type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduledLambda{}

// ScheduledLambda struct for ScheduledLambda
type ScheduledLambda struct {
	// The UNIX-formatted cron string for this scheduled query lambda.
	CronString *string `json:"cron_string,omitempty"`
	// The number of times this scheduled QL has been executed.
	ExecutionCount *int64 `json:"execution_count,omitempty"`
	// The last time this scheduled query lambda completed successfully.
	LastCompletionDate *string `json:"last_completion_date,omitempty"`
	// The ID of the query that was triggered by this scheduled lambda's last run.
	LastQueryId *string `json:"last_query_id,omitempty"`
	// The next time this scheduled query lambda will be executed.
	NextExecutionDate *string `json:"next_execution_date,omitempty"`
	// The name of the associated query lambda.
	QlName *string `json:"ql_name,omitempty"`
	QueryExecutionStatus *ExecutionStatus `json:"query_execution_status,omitempty"`
	// Boolean flag to allow a scheduled query lambda to resume execution after being suspended due to execution failure. This flag will be unset after scheduled lambda execution.
	ResumePermanentError *bool `json:"resume_permanent_error,omitempty"`
	// Scheduled Lambda mapping RRN.
	Rrn *string `json:"rrn,omitempty"`
	// The query lambda tag.
	Tag *string `json:"tag,omitempty"`
	// The number of times to execute this scheduled query lambda. Once this scheduled query lambda has been executed this many times, it will no longer be executed.
	TotalTimesToExecute *int64 `json:"total_times_to_execute,omitempty"`
	// The version of the associated query lambda.
	Version *string `json:"version,omitempty"`
	// The payload that should be sent to the webhook.
	WebhookPayload *string `json:"webhook_payload,omitempty"`
	// The URL of the webhook that should be triggered after this scheduled query lambda completes.
	WebhookUrl *string `json:"webhook_url,omitempty"`
	// Workspace of the associated query lambda.
	Workspace *string `json:"workspace,omitempty"`
}

// NewScheduledLambda instantiates a new ScheduledLambda object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduledLambda() *ScheduledLambda {
	this := ScheduledLambda{}
	return &this
}

// NewScheduledLambdaWithDefaults instantiates a new ScheduledLambda object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduledLambdaWithDefaults() *ScheduledLambda {
	this := ScheduledLambda{}
	return &this
}

// GetCronString returns the CronString field value if set, zero value otherwise.
func (o *ScheduledLambda) GetCronString() string {
	if o == nil || IsNil(o.CronString) {
		var ret string
		return ret
	}
	return *o.CronString
}

// GetCronStringOk returns a tuple with the CronString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetCronStringOk() (*string, bool) {
	if o == nil || IsNil(o.CronString) {
		return nil, false
	}
	return o.CronString, true
}

// HasCronString returns a boolean if a field has been set.
func (o *ScheduledLambda) HasCronString() bool {
	if o != nil && !IsNil(o.CronString) {
		return true
	}

	return false
}

// SetCronString gets a reference to the given string and assigns it to the CronString field.
func (o *ScheduledLambda) SetCronString(v string) {
	o.CronString = &v
}

// GetExecutionCount returns the ExecutionCount field value if set, zero value otherwise.
func (o *ScheduledLambda) GetExecutionCount() int64 {
	if o == nil || IsNil(o.ExecutionCount) {
		var ret int64
		return ret
	}
	return *o.ExecutionCount
}

// GetExecutionCountOk returns a tuple with the ExecutionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetExecutionCountOk() (*int64, bool) {
	if o == nil || IsNil(o.ExecutionCount) {
		return nil, false
	}
	return o.ExecutionCount, true
}

// HasExecutionCount returns a boolean if a field has been set.
func (o *ScheduledLambda) HasExecutionCount() bool {
	if o != nil && !IsNil(o.ExecutionCount) {
		return true
	}

	return false
}

// SetExecutionCount gets a reference to the given int64 and assigns it to the ExecutionCount field.
func (o *ScheduledLambda) SetExecutionCount(v int64) {
	o.ExecutionCount = &v
}

// GetLastCompletionDate returns the LastCompletionDate field value if set, zero value otherwise.
func (o *ScheduledLambda) GetLastCompletionDate() string {
	if o == nil || IsNil(o.LastCompletionDate) {
		var ret string
		return ret
	}
	return *o.LastCompletionDate
}

// GetLastCompletionDateOk returns a tuple with the LastCompletionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetLastCompletionDateOk() (*string, bool) {
	if o == nil || IsNil(o.LastCompletionDate) {
		return nil, false
	}
	return o.LastCompletionDate, true
}

// HasLastCompletionDate returns a boolean if a field has been set.
func (o *ScheduledLambda) HasLastCompletionDate() bool {
	if o != nil && !IsNil(o.LastCompletionDate) {
		return true
	}

	return false
}

// SetLastCompletionDate gets a reference to the given string and assigns it to the LastCompletionDate field.
func (o *ScheduledLambda) SetLastCompletionDate(v string) {
	o.LastCompletionDate = &v
}

// GetLastQueryId returns the LastQueryId field value if set, zero value otherwise.
func (o *ScheduledLambda) GetLastQueryId() string {
	if o == nil || IsNil(o.LastQueryId) {
		var ret string
		return ret
	}
	return *o.LastQueryId
}

// GetLastQueryIdOk returns a tuple with the LastQueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetLastQueryIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastQueryId) {
		return nil, false
	}
	return o.LastQueryId, true
}

// HasLastQueryId returns a boolean if a field has been set.
func (o *ScheduledLambda) HasLastQueryId() bool {
	if o != nil && !IsNil(o.LastQueryId) {
		return true
	}

	return false
}

// SetLastQueryId gets a reference to the given string and assigns it to the LastQueryId field.
func (o *ScheduledLambda) SetLastQueryId(v string) {
	o.LastQueryId = &v
}

// GetNextExecutionDate returns the NextExecutionDate field value if set, zero value otherwise.
func (o *ScheduledLambda) GetNextExecutionDate() string {
	if o == nil || IsNil(o.NextExecutionDate) {
		var ret string
		return ret
	}
	return *o.NextExecutionDate
}

// GetNextExecutionDateOk returns a tuple with the NextExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetNextExecutionDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextExecutionDate) {
		return nil, false
	}
	return o.NextExecutionDate, true
}

// HasNextExecutionDate returns a boolean if a field has been set.
func (o *ScheduledLambda) HasNextExecutionDate() bool {
	if o != nil && !IsNil(o.NextExecutionDate) {
		return true
	}

	return false
}

// SetNextExecutionDate gets a reference to the given string and assigns it to the NextExecutionDate field.
func (o *ScheduledLambda) SetNextExecutionDate(v string) {
	o.NextExecutionDate = &v
}

// GetQlName returns the QlName field value if set, zero value otherwise.
func (o *ScheduledLambda) GetQlName() string {
	if o == nil || IsNil(o.QlName) {
		var ret string
		return ret
	}
	return *o.QlName
}

// GetQlNameOk returns a tuple with the QlName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetQlNameOk() (*string, bool) {
	if o == nil || IsNil(o.QlName) {
		return nil, false
	}
	return o.QlName, true
}

// HasQlName returns a boolean if a field has been set.
func (o *ScheduledLambda) HasQlName() bool {
	if o != nil && !IsNil(o.QlName) {
		return true
	}

	return false
}

// SetQlName gets a reference to the given string and assigns it to the QlName field.
func (o *ScheduledLambda) SetQlName(v string) {
	o.QlName = &v
}

// GetQueryExecutionStatus returns the QueryExecutionStatus field value if set, zero value otherwise.
func (o *ScheduledLambda) GetQueryExecutionStatus() ExecutionStatus {
	if o == nil || IsNil(o.QueryExecutionStatus) {
		var ret ExecutionStatus
		return ret
	}
	return *o.QueryExecutionStatus
}

// GetQueryExecutionStatusOk returns a tuple with the QueryExecutionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetQueryExecutionStatusOk() (*ExecutionStatus, bool) {
	if o == nil || IsNil(o.QueryExecutionStatus) {
		return nil, false
	}
	return o.QueryExecutionStatus, true
}

// HasQueryExecutionStatus returns a boolean if a field has been set.
func (o *ScheduledLambda) HasQueryExecutionStatus() bool {
	if o != nil && !IsNil(o.QueryExecutionStatus) {
		return true
	}

	return false
}

// SetQueryExecutionStatus gets a reference to the given ExecutionStatus and assigns it to the QueryExecutionStatus field.
func (o *ScheduledLambda) SetQueryExecutionStatus(v ExecutionStatus) {
	o.QueryExecutionStatus = &v
}

// GetResumePermanentError returns the ResumePermanentError field value if set, zero value otherwise.
func (o *ScheduledLambda) GetResumePermanentError() bool {
	if o == nil || IsNil(o.ResumePermanentError) {
		var ret bool
		return ret
	}
	return *o.ResumePermanentError
}

// GetResumePermanentErrorOk returns a tuple with the ResumePermanentError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetResumePermanentErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.ResumePermanentError) {
		return nil, false
	}
	return o.ResumePermanentError, true
}

// HasResumePermanentError returns a boolean if a field has been set.
func (o *ScheduledLambda) HasResumePermanentError() bool {
	if o != nil && !IsNil(o.ResumePermanentError) {
		return true
	}

	return false
}

// SetResumePermanentError gets a reference to the given bool and assigns it to the ResumePermanentError field.
func (o *ScheduledLambda) SetResumePermanentError(v bool) {
	o.ResumePermanentError = &v
}

// GetRrn returns the Rrn field value if set, zero value otherwise.
func (o *ScheduledLambda) GetRrn() string {
	if o == nil || IsNil(o.Rrn) {
		var ret string
		return ret
	}
	return *o.Rrn
}

// GetRrnOk returns a tuple with the Rrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetRrnOk() (*string, bool) {
	if o == nil || IsNil(o.Rrn) {
		return nil, false
	}
	return o.Rrn, true
}

// HasRrn returns a boolean if a field has been set.
func (o *ScheduledLambda) HasRrn() bool {
	if o != nil && !IsNil(o.Rrn) {
		return true
	}

	return false
}

// SetRrn gets a reference to the given string and assigns it to the Rrn field.
func (o *ScheduledLambda) SetRrn(v string) {
	o.Rrn = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ScheduledLambda) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ScheduledLambda) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *ScheduledLambda) SetTag(v string) {
	o.Tag = &v
}

// GetTotalTimesToExecute returns the TotalTimesToExecute field value if set, zero value otherwise.
func (o *ScheduledLambda) GetTotalTimesToExecute() int64 {
	if o == nil || IsNil(o.TotalTimesToExecute) {
		var ret int64
		return ret
	}
	return *o.TotalTimesToExecute
}

// GetTotalTimesToExecuteOk returns a tuple with the TotalTimesToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetTotalTimesToExecuteOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalTimesToExecute) {
		return nil, false
	}
	return o.TotalTimesToExecute, true
}

// HasTotalTimesToExecute returns a boolean if a field has been set.
func (o *ScheduledLambda) HasTotalTimesToExecute() bool {
	if o != nil && !IsNil(o.TotalTimesToExecute) {
		return true
	}

	return false
}

// SetTotalTimesToExecute gets a reference to the given int64 and assigns it to the TotalTimesToExecute field.
func (o *ScheduledLambda) SetTotalTimesToExecute(v int64) {
	o.TotalTimesToExecute = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ScheduledLambda) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ScheduledLambda) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ScheduledLambda) SetVersion(v string) {
	o.Version = &v
}

// GetWebhookPayload returns the WebhookPayload field value if set, zero value otherwise.
func (o *ScheduledLambda) GetWebhookPayload() string {
	if o == nil || IsNil(o.WebhookPayload) {
		var ret string
		return ret
	}
	return *o.WebhookPayload
}

// GetWebhookPayloadOk returns a tuple with the WebhookPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetWebhookPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookPayload) {
		return nil, false
	}
	return o.WebhookPayload, true
}

// HasWebhookPayload returns a boolean if a field has been set.
func (o *ScheduledLambda) HasWebhookPayload() bool {
	if o != nil && !IsNil(o.WebhookPayload) {
		return true
	}

	return false
}

// SetWebhookPayload gets a reference to the given string and assigns it to the WebhookPayload field.
func (o *ScheduledLambda) SetWebhookPayload(v string) {
	o.WebhookPayload = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *ScheduledLambda) GetWebhookUrl() string {
	if o == nil || IsNil(o.WebhookUrl) {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebhookUrl) {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *ScheduledLambda) HasWebhookUrl() bool {
	if o != nil && !IsNil(o.WebhookUrl) {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *ScheduledLambda) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise.
func (o *ScheduledLambda) GetWorkspace() string {
	if o == nil || IsNil(o.Workspace) {
		var ret string
		return ret
	}
	return *o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduledLambda) GetWorkspaceOk() (*string, bool) {
	if o == nil || IsNil(o.Workspace) {
		return nil, false
	}
	return o.Workspace, true
}

// HasWorkspace returns a boolean if a field has been set.
func (o *ScheduledLambda) HasWorkspace() bool {
	if o != nil && !IsNil(o.Workspace) {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given string and assigns it to the Workspace field.
func (o *ScheduledLambda) SetWorkspace(v string) {
	o.Workspace = &v
}

func (o ScheduledLambda) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduledLambda) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CronString) {
		toSerialize["cron_string"] = o.CronString
	}
	if !IsNil(o.ExecutionCount) {
		toSerialize["execution_count"] = o.ExecutionCount
	}
	if !IsNil(o.LastCompletionDate) {
		toSerialize["last_completion_date"] = o.LastCompletionDate
	}
	if !IsNil(o.LastQueryId) {
		toSerialize["last_query_id"] = o.LastQueryId
	}
	if !IsNil(o.NextExecutionDate) {
		toSerialize["next_execution_date"] = o.NextExecutionDate
	}
	if !IsNil(o.QlName) {
		toSerialize["ql_name"] = o.QlName
	}
	if !IsNil(o.QueryExecutionStatus) {
		toSerialize["query_execution_status"] = o.QueryExecutionStatus
	}
	if !IsNil(o.ResumePermanentError) {
		toSerialize["resume_permanent_error"] = o.ResumePermanentError
	}
	if !IsNil(o.Rrn) {
		toSerialize["rrn"] = o.Rrn
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.TotalTimesToExecute) {
		toSerialize["total_times_to_execute"] = o.TotalTimesToExecute
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.WebhookPayload) {
		toSerialize["webhook_payload"] = o.WebhookPayload
	}
	if !IsNil(o.WebhookUrl) {
		toSerialize["webhook_url"] = o.WebhookUrl
	}
	if !IsNil(o.Workspace) {
		toSerialize["workspace"] = o.Workspace
	}
	return toSerialize, nil
}

type NullableScheduledLambda struct {
	value *ScheduledLambda
	isSet bool
}

func (v NullableScheduledLambda) Get() *ScheduledLambda {
	return v.value
}

func (v *NullableScheduledLambda) Set(val *ScheduledLambda) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledLambda) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledLambda) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledLambda(val *ScheduledLambda) *NullableScheduledLambda {
	return &NullableScheduledLambda{value: val, isSet: true}
}

func (v NullableScheduledLambda) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledLambda) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


