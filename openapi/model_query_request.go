/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryRequest{}

// QueryRequest struct for QueryRequest
type QueryRequest struct {
	// If true, the query will run asynchronously for up to 30 minutes. The query request will immediately return with a query id that can be used to retrieve the query status and results. If false or not specified, the query will return with results once completed or timeout after 2 minutes. (To return results directly for shorter queries while still allowing a timeout of up to 30 minutes, set `async_options.client_timeout_ms`.) 
	Async *bool `json:"async,omitempty"`
	AsyncOptions *AsyncQueryOptions `json:"async_options,omitempty"`
	// If query execution takes longer than this value, debug information will be logged. If the query text includes the DEBUG hint and this parameter is also provided, only this value will be used and the DEBUG hint will be ignored.
	DebugThresholdMs *int64 `json:"debug_threshold_ms,omitempty"`
	// This limits the maximum number of results in the initial response. A pagination cursor is returned if the number of results exceeds `max_initial_results`. If `max_initial_results` is not set, all results will be returned in the initial response up to 4 million. If `max_initial_results` is set, the value must be between 0 and 100,000. If the query is async and `client_timeout_ms` is exceeded, `max_initial_results` does not apply since none of the results will be returned with the initial response.
	MaxInitialResults *int64 `json:"max_initial_results,omitempty"`
	Sql QueryRequestSql `json:"sql"`
	// If a query exceeds the specified timeout, the query will automatically stop and return an error. The query timeout defaults to a maximum of 2 minutes. If `async` is true, the query timeout defaults to a maximum of 30 minutes.
	TimeoutMs *int64 `json:"timeout_ms,omitempty"`
}

// NewQueryRequest instantiates a new QueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRequest(sql QueryRequestSql) *QueryRequest {
	this := QueryRequest{}
	this.Sql = sql
	return &this
}

// NewQueryRequestWithDefaults instantiates a new QueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRequestWithDefaults() *QueryRequest {
	this := QueryRequest{}
	return &this
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *QueryRequest) GetAsync() bool {
	if o == nil || IsNil(o.Async) {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetAsyncOk() (*bool, bool) {
	if o == nil || IsNil(o.Async) {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *QueryRequest) HasAsync() bool {
	if o != nil && !IsNil(o.Async) {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *QueryRequest) SetAsync(v bool) {
	o.Async = &v
}

// GetAsyncOptions returns the AsyncOptions field value if set, zero value otherwise.
func (o *QueryRequest) GetAsyncOptions() AsyncQueryOptions {
	if o == nil || IsNil(o.AsyncOptions) {
		var ret AsyncQueryOptions
		return ret
	}
	return *o.AsyncOptions
}

// GetAsyncOptionsOk returns a tuple with the AsyncOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetAsyncOptionsOk() (*AsyncQueryOptions, bool) {
	if o == nil || IsNil(o.AsyncOptions) {
		return nil, false
	}
	return o.AsyncOptions, true
}

// HasAsyncOptions returns a boolean if a field has been set.
func (o *QueryRequest) HasAsyncOptions() bool {
	if o != nil && !IsNil(o.AsyncOptions) {
		return true
	}

	return false
}

// SetAsyncOptions gets a reference to the given AsyncQueryOptions and assigns it to the AsyncOptions field.
func (o *QueryRequest) SetAsyncOptions(v AsyncQueryOptions) {
	o.AsyncOptions = &v
}

// GetDebugThresholdMs returns the DebugThresholdMs field value if set, zero value otherwise.
func (o *QueryRequest) GetDebugThresholdMs() int64 {
	if o == nil || IsNil(o.DebugThresholdMs) {
		var ret int64
		return ret
	}
	return *o.DebugThresholdMs
}

// GetDebugThresholdMsOk returns a tuple with the DebugThresholdMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetDebugThresholdMsOk() (*int64, bool) {
	if o == nil || IsNil(o.DebugThresholdMs) {
		return nil, false
	}
	return o.DebugThresholdMs, true
}

// HasDebugThresholdMs returns a boolean if a field has been set.
func (o *QueryRequest) HasDebugThresholdMs() bool {
	if o != nil && !IsNil(o.DebugThresholdMs) {
		return true
	}

	return false
}

// SetDebugThresholdMs gets a reference to the given int64 and assigns it to the DebugThresholdMs field.
func (o *QueryRequest) SetDebugThresholdMs(v int64) {
	o.DebugThresholdMs = &v
}

// GetMaxInitialResults returns the MaxInitialResults field value if set, zero value otherwise.
func (o *QueryRequest) GetMaxInitialResults() int64 {
	if o == nil || IsNil(o.MaxInitialResults) {
		var ret int64
		return ret
	}
	return *o.MaxInitialResults
}

// GetMaxInitialResultsOk returns a tuple with the MaxInitialResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetMaxInitialResultsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxInitialResults) {
		return nil, false
	}
	return o.MaxInitialResults, true
}

// HasMaxInitialResults returns a boolean if a field has been set.
func (o *QueryRequest) HasMaxInitialResults() bool {
	if o != nil && !IsNil(o.MaxInitialResults) {
		return true
	}

	return false
}

// SetMaxInitialResults gets a reference to the given int64 and assigns it to the MaxInitialResults field.
func (o *QueryRequest) SetMaxInitialResults(v int64) {
	o.MaxInitialResults = &v
}

// GetSql returns the Sql field value
func (o *QueryRequest) GetSql() QueryRequestSql {
	if o == nil {
		var ret QueryRequestSql
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetSqlOk() (*QueryRequestSql, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *QueryRequest) SetSql(v QueryRequestSql) {
	o.Sql = v
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *QueryRequest) GetTimeoutMs() int64 {
	if o == nil || IsNil(o.TimeoutMs) {
		var ret int64
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetTimeoutMsOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeoutMs) {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *QueryRequest) HasTimeoutMs() bool {
	if o != nil && !IsNil(o.TimeoutMs) {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given int64 and assigns it to the TimeoutMs field.
func (o *QueryRequest) SetTimeoutMs(v int64) {
	o.TimeoutMs = &v
}

func (o QueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Async) {
		toSerialize["async"] = o.Async
	}
	if !IsNil(o.AsyncOptions) {
		toSerialize["async_options"] = o.AsyncOptions
	}
	if !IsNil(o.DebugThresholdMs) {
		toSerialize["debug_threshold_ms"] = o.DebugThresholdMs
	}
	if !IsNil(o.MaxInitialResults) {
		toSerialize["max_initial_results"] = o.MaxInitialResults
	}
	toSerialize["sql"] = o.Sql
	if !IsNil(o.TimeoutMs) {
		toSerialize["timeout_ms"] = o.TimeoutMs
	}
	return toSerialize, nil
}

type NullableQueryRequest struct {
	value *QueryRequest
	isSet bool
}

func (v NullableQueryRequest) Get() *QueryRequest {
	return v.value
}

func (v *NullableQueryRequest) Set(val *QueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRequest(val *QueryRequest) *NullableQueryRequest {
	return &NullableQueryRequest{value: val, isSet: true}
}

func (v NullableQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


