/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValidateQueryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateQueryResponse{}

// ValidateQueryResponse struct for ValidateQueryResponse
type ValidateQueryResponse struct {
	// List of collections specified in query.
	Collections []string `json:"collections"`
	// List of parameters specified in query.
	Parameters []string `json:"parameters"`
}

// NewValidateQueryResponse instantiates a new ValidateQueryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateQueryResponse(collections []string, parameters []string) *ValidateQueryResponse {
	this := ValidateQueryResponse{}
	this.Collections = collections
	this.Parameters = parameters
	return &this
}

// NewValidateQueryResponseWithDefaults instantiates a new ValidateQueryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateQueryResponseWithDefaults() *ValidateQueryResponse {
	this := ValidateQueryResponse{}
	return &this
}

// GetCollections returns the Collections field value
func (o *ValidateQueryResponse) GetCollections() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value
// and a boolean to check if the value has been set.
func (o *ValidateQueryResponse) GetCollectionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Collections, true
}

// SetCollections sets field value
func (o *ValidateQueryResponse) SetCollections(v []string) {
	o.Collections = v
}

// GetParameters returns the Parameters field value
func (o *ValidateQueryResponse) GetParameters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *ValidateQueryResponse) GetParametersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *ValidateQueryResponse) SetParameters(v []string) {
	o.Parameters = v
}

func (o ValidateQueryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateQueryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collections"] = o.Collections
	toSerialize["parameters"] = o.Parameters
	return toSerialize, nil
}

type NullableValidateQueryResponse struct {
	value *ValidateQueryResponse
	isSet bool
}

func (v NullableValidateQueryResponse) Get() *ValidateQueryResponse {
	return v.value
}

func (v *NullableValidateQueryResponse) Set(val *ValidateQueryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateQueryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateQueryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateQueryResponse(val *ValidateQueryResponse) *NullableValidateQueryResponse {
	return &NullableValidateQueryResponse{value: val, isSet: true}
}

func (v NullableValidateQueryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateQueryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


