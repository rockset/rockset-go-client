/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SourceS3Settings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceS3Settings{}

// SourceS3Settings struct for SourceS3Settings
type SourceS3Settings struct {
	// Rockset scans an S3 bucket based on a defined time interval. The scan frequency determines the length of time between a new scan and the previous scan. If the previous scan finds new objects or updates to existing objects, Rockset immediately scans the bucket again after processing changes from the previous scan.
	S3ScanFrequency *string `json:"s3_scan_frequency,omitempty"`
}

// NewSourceS3Settings instantiates a new SourceS3Settings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceS3Settings() *SourceS3Settings {
	this := SourceS3Settings{}
	return &this
}

// NewSourceS3SettingsWithDefaults instantiates a new SourceS3Settings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceS3SettingsWithDefaults() *SourceS3Settings {
	this := SourceS3Settings{}
	return &this
}

// GetS3ScanFrequency returns the S3ScanFrequency field value if set, zero value otherwise.
func (o *SourceS3Settings) GetS3ScanFrequency() string {
	if o == nil || IsNil(o.S3ScanFrequency) {
		var ret string
		return ret
	}
	return *o.S3ScanFrequency
}

// GetS3ScanFrequencyOk returns a tuple with the S3ScanFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceS3Settings) GetS3ScanFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.S3ScanFrequency) {
		return nil, false
	}
	return o.S3ScanFrequency, true
}

// HasS3ScanFrequency returns a boolean if a field has been set.
func (o *SourceS3Settings) HasS3ScanFrequency() bool {
	if o != nil && !IsNil(o.S3ScanFrequency) {
		return true
	}

	return false
}

// SetS3ScanFrequency gets a reference to the given string and assigns it to the S3ScanFrequency field.
func (o *SourceS3Settings) SetS3ScanFrequency(v string) {
	o.S3ScanFrequency = &v
}

func (o SourceS3Settings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceS3Settings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3ScanFrequency) {
		toSerialize["s3_scan_frequency"] = o.S3ScanFrequency
	}
	return toSerialize, nil
}

type NullableSourceS3Settings struct {
	value *SourceS3Settings
	isSet bool
}

func (v NullableSourceS3Settings) Get() *SourceS3Settings {
	return v.value
}

func (v *NullableSourceS3Settings) Set(val *SourceS3Settings) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceS3Settings) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceS3Settings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceS3Settings(val *SourceS3Settings) *NullableSourceS3Settings {
	return &NullableSourceS3Settings{value: val, isSet: true}
}

func (v NullableSourceS3Settings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceS3Settings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


