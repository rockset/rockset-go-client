openapi: 3.0.1
info:
  description: |-
    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.

    All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example:
    ```
    Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
    ```

    All endpoints are only accessible via https.

    Build something awesome!
  title: REST API
  version: v1
servers:
- url: https://api.use1a1.rockset.com/
tags:
- name: API Keys
- name: Aliases
- name: Collections
- name: Custom Roles
- name: Documents
- name: Integrations
- name: Organizations
- name: Queries
- name: Query Lambdas
- name: Shared Lambdas
- name: Users
- name: Views
- name: Virtual Instances
- name: Workspaces
paths:
  /v1/orgs/self:
    get:
      description: Retrieve information about current organization.
      operationId: getOrganization
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
          description: organization retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Organization
      tags:
      - Organizations
      x-rename: get
  /v1/orgs/self/aliases:
    get:
      description: Retrieve all aliases in an organization
      operationId: listAliases
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Aliases
      tags:
      - Aliases
      x-rename: list
  /v1/orgs/self/collections:
    get:
      description: Retrieve all collections in an organization.
      operationId: listCollections
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsResponse'
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Collections
      tags:
      - Collections
      x-rename: list
  /v1/orgs/self/integrations:
    get:
      description: List all integrations in an organization.
      operationId: listIntegrations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
          description: integrations retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Integrations
      tags:
      - Integrations
      x-rename: list
    post:
      description: Create a new integration.
      operationId: createIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResponse'
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Integration
      tags:
      - Integrations
      x-codegen-request-body-name: body
  /v1/orgs/self/integrations/{integration}:
    delete:
      description: Remove an integration.
      operationId: deleteIntegration
      parameters:
      - description: name of the integration
        in: path
        name: integration
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIntegrationResponse'
          description: integration deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Integration
      tags:
      - Integrations
      x-rename: delete
    get:
      description: Retrieve information about a single integration.
      operationId: getIntegration
      parameters:
      - description: name of the integration
        in: path
        name: integration
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponse'
          description: integration retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Integration
      tags:
      - Integrations
      x-rename: get
  /v1/orgs/self/lambdas:
    get:
      description: List all Query Lambdas in an organization.
      operationId: listAllQueryLambdas
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdasResponse'
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambdas
      tags:
      - Query Lambdas
  /v1/orgs/self/queries:
    get:
      description: Lists actively queued and running queries.
      operationId: listActiveQueries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueriesResponse'
          description: successfully fetched queries
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Queries
      tags:
      - Queries
    post:
      description: Make a SQL query to Rockset.
      operationId: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute SQL Query
      tags:
      - Queries
      x-codegen-request-body-name: body
  /v1/orgs/self/queries/validations:
    post:
      description: Validate a SQL query with Rockset's parser and planner.
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateQueryResponse'
          description: query validated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Validate Query
      tags:
      - Queries
      x-codegen-request-body-name: body
  /v1/orgs/self/queries/{queryId}:
    delete:
      description: Attempts to cancel an actively-running query.
      operationId: cancelQuery
      parameters:
      - in: path
        name: queryId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelQueryResponse'
          description: Successfully canceled query
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Cancel Query
      tags:
      - Queries
    get:
      description: Returns information about a query.
      operationId: getQuery
      parameters:
      - in: path
        name: queryId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueryResponse'
          description: Successfully fetched query info
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Query
      tags:
      - Queries
  /v1/orgs/self/queries/{queryId}/pages:
    get:
      description: Returns a page of query results.
      operationId: getQueryResults
      parameters:
      - in: path
        name: queryId
        required: true
        schema:
          type: string
      - description: Cursor to current page. If unset, will default to the first page.
        in: query
        name: cursor
        schema:
          type: string
      - description: Number of documents to fetch.
        in: query
        name: docs
        schema:
          format: int32
          type: integer
      - description: Offset from the cursor of the first document to be returned
        in: query
        name: offset
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPaginationResponse'
          description: successfully fetched query results
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Query Results Page
      tags:
      - Queries
  /v1/orgs/self/roles:
    get:
      description: List all roles for your organization.
      operationId: listRoles
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRolesResponse'
          description: roles retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Roles
      tags:
      - Custom Roles
      x-rename: list
    post:
      description: Create a role for your organization.
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: role created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create a Role
      tags:
      - Custom Roles
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/roles/{roleName}:
    delete:
      description: Delete a role for your organization.
      operationId: deleteRole
      parameters:
      - in: path
        name: roleName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: role deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete a Role
      tags:
      - Custom Roles
      x-rename: delete
    get:
      description: Retrieve a role by name for your organization.
      operationId: getRole
      parameters:
      - in: path
        name: roleName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: role retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve role
      tags:
      - Custom Roles
      x-rename: get
    post:
      description: Update a role for your organization.
      operationId: updateRole
      parameters:
      - in: path
        name: roleName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'
          description: role updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update a Role
      tags:
      - Custom Roles
      x-rename: update
      x-codegen-request-body-name: body
  /v1/orgs/self/users:
    get:
      description: Retrieve all users for an organization.
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: users retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Users
      tags:
      - Users
      x-rename: list
    post:
      description: Create a new user for an organization.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
          description: user created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create User
      tags:
      - Users
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/users/self:
    get:
      description: Retrieve currently authenticated user.
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Current User
      tags:
      - Users
  /v1/orgs/self/users/self/apikeys:
    post:
      description: Create a new API key for the authenticated user.
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create API Key
      tags:
      - API Keys
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/users/self/preferences:
    get:
      description: Get all notification preferences.
      operationId: listUnsubscribePreferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUnsubscribePreferencesResponse'
          description: Notification preferences retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Notification Preferences
      tags:
      - Users
    post:
      description: Update notification preference.
      operationId: updateUnsubscribePreferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUnsubscribePreferencesRequest'
        description: JSON Object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUnsubscribePreferencesResponse'
          description: Notification preference created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update Notification Preferences
      tags:
      - Users
      x-codegen-request-body-name: body
  /v1/orgs/self/users/{user}:
    delete:
      description: Delete a user from an organization.
      operationId: deleteUser
      parameters:
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
          description: user deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete User
      tags:
      - Users
      x-rename: delete
    get:
      description: Retrieve user by email.
      operationId: getUser
      parameters:
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user found
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve User
      tags:
      - Users
      x-rename: get
    post:
      description: Update a user in an organization.
      operationId: updateUser
      parameters:
      - description: email of the user to update
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update User
      tags:
      - Users
      x-rename: update
      x-codegen-request-body-name: body
  /v1/orgs/self/users/{user}/apikeys:
    get:
      description: List API key metadata for any user in your organization.
      operationId: listApiKeys
      parameters:
      - description: Email of the API key owner. Use `self` to specify the currently
          authenticated user.
        example: admin@me.com
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
          description: API keys retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List API Keys
      tags:
      - API Keys
      x-rename: list
  /v1/orgs/self/users/{user}/apikeys/{name}:
    delete:
      description: Delete an API key for any user in your organization.
      operationId: deleteApiKey
      parameters:
      - description: Name of the API key.
        example: my-key
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Email of the API key owner. Use `self` to specify the currently
          authenticated user.
        example: admin@me.com
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
          description: API key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete API Key
      tags:
      - API Keys
      x-rename: delete
    get:
      description: Retrieve a particular API key for any user in your organization.
      operationId: getApiKey
      parameters:
      - description: Email of the API key owner. Use `self` to specify the currently
          authenticated user.
        example: admin@me.com
        in: path
        name: user
        required: true
        schema:
          type: string
      - description: Name of the API key.
        example: my-key
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Reveal full key.
        example: true
        in: query
        name: reveal
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponse'
          description: API key retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve API Key
      tags:
      - API Keys
      x-rename: get
    post:
      description: Update the state of an API key for any user in your organization.
      operationId: updateApiKey
      parameters:
      - description: Name of the API key.
        example: my-key
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Email of the API key owner. Use `self` to specify the currently
          authenticated user.
        example: admin@me.com
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiKeyResponse'
          description: API key successfully updated
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update API Key State
      tags:
      - API Keys
      x-rename: update
      x-codegen-request-body-name: body
  /v1/orgs/self/views:
    get:
      description: Retrieve all views in an organization
      operationId: listViews
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListViewsResponse'
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Views
      tags:
      - Views
      x-rename: list
  /v1/orgs/self/virtualinstances:
    get:
      description: Retrieve all virtual instances in an organization.
      operationId: listVirtualInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualInstancesResponse'
          description: virtual instances retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Virtual Instances
      tags:
      - Virtual Instances
      x-rename: list
    post:
      description: '[beta] Create virtual instance'
      operationId: createVirtualInstance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualInstanceRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualInstanceResponse'
          description: virtual instance created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Virtual Instance
      tags:
      - Virtual Instances
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/virtualinstances/{virtualInstanceId}:
    delete:
      description: '[beta] Delete a virtual instance.'
      operationId: deleteVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualInstanceResponse'
          description: virtual instance deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Virtual Instance
      tags:
      - Virtual Instances
      x-rename: delete
    get:
      description: Get details about a virtual instance.
      operationId: getVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualInstanceResponse'
          description: virtual instance retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Virtual Instance
      tags:
      - Virtual Instances
      x-rename: get
    post:
      description: Update the properties of a virtual instance.
      operationId: setVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualInstanceRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualInstanceResponse'
          description: virtual instance updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update Virtual Instance
      tags:
      - Virtual Instances
      x-rename: update
      x-codegen-request-body-name: body
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts:
    get:
      description: '[beta] List collection mounts for a particular VI.'
      operationId: listCollectionMounts
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionMountsResponse'
          description: resource mounted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Collection Mounts
      tags:
      - Virtual Instances
    post:
      description: '[beta] Mount a collection to this virtual instance.'
      operationId: mountCollection
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionMountRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollectionMountsResponse'
          description: collection mounted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Mount Collection
      tags:
      - Virtual Instances
      x-codegen-request-body-name: body
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/mounts/{collectionPath}:
    delete:
      description: '[beta] Unmount a collection from this virtual instance.'
      operationId: unmountCollection
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      - in: path
        name: collectionPath
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMountResponse'
          description: collection unmounted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Unmount Collection
      tags:
      - Virtual Instances
    get:
      description: '[beta] Get a mount on this virtual instance.'
      operationId: getCollectionMount
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      - in: path
        name: collectionPath
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMountResponse'
          description: collection unmounted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Collection Mount
      tags:
      - Virtual Instances
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/queries:
    get:
      description: '[beta] Lists actively queued and running queries for a particular
        Virtual Instance.'
      operationId: getVirtualInstanceQueries
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueriesResponse'
          description: successfully fetched queries
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Queries
      tags:
      - Virtual Instances
    post:
      description: '[beta] Make a SQL query to Rockset.'
      operationId: queryVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute SQL Query
      tags:
      - Virtual Instances
      x-codegen-request-body-name: body
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/resume:
    post:
      description: '[beta] Resume a virtual instance.'
      operationId: resumeVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeVirtualInstanceResponse'
          description: virtual instance resumed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Resume Virtual Instance
      tags:
      - Virtual Instances
  /v1/orgs/self/virtualinstances/{virtualInstanceId}/suspend:
    post:
      description: '[beta] Suspend a virtual instance.'
      operationId: suspendVirtualInstance
      parameters:
      - description: Virtual Instance RRN
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendVirtualInstanceResponse'
          description: virtual instance suspended successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Suspend Virtual Instance
      tags:
      - Virtual Instances
  /v1/orgs/self/ws:
    get:
      description: List all workspaces in an organization.
      operationId: listWorkspaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspacesResponse'
          description: workspaces retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Workspaces
      tags:
      - Workspaces
      x-rename: list
    post:
      description: Create a new workspace.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
        description: workspace details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkspaceResponse'
          description: workspace created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Workspace
      tags:
      - Workspaces
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}:
    delete:
      description: Remove a workspace.
      operationId: deleteWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkspaceResponse'
          description: workspace deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Workspace
      tags:
      - Workspaces
      x-rename: delete
    get:
      description: Get information about a single workspace.
      operationId: getWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceResponse'
          description: workspace retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Workspace
      tags:
      - Workspaces
      x-rename: get
  /v1/orgs/self/ws/{workspace}/aliases:
    get:
      description: Retrieve all aliases in a workspace.
      operationId: workspaceAliases
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Aliases in Workspace
      tags:
      - Aliases
    post:
      description: Create new alias in a workspace.
      operationId: createAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAliasRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAliasResponse'
          description: alias created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Alias
      tags:
      - Aliases
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/aliases/{alias}:
    delete:
      description: Delete an alias.
      operationId: deleteAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAliasResponse'
          description: alias deleted successfully
      summary: Delete Alias
      tags:
      - Aliases
      x-rename: delete
    get:
      description: Get details about an alias
      operationId: getAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAliasResponse'
          description: alias retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Alias
      tags:
      - Aliases
      x-rename: get
    post:
      description: Update alias in a workspace.
      operationId: updateAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAliasRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAliasResponse'
          description: alias updated successfully
      summary: Update Alias
      tags:
      - Aliases
      x-rename: update
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/collections:
    get:
      description: Retrieve all collections in a workspace.
      operationId: workspaceCollections
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsResponse'
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Collections in Workspace
      tags:
      - Collections
    post:
      description: Create new collection in a workspace.
      operationId: createCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollectionResponse'
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Collection
      tags:
      - Collections
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/collections/{collection}:
    delete:
      description: Delete a collection and all its documents from Rockset.
      operationId: deleteCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCollectionResponse'
          description: collection deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Collection
      tags:
      - Collections
      x-rename: delete
    get:
      description: Get details about a collection.
      operationId: getCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
          description: collection retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Collection
      tags:
      - Collections
      x-rename: get
  /v1/orgs/self/ws/{workspace}/collections/{collection}/docs:
    delete:
      description: Delete documents from a collection.
      operationId: deleteDocuments
      parameters:
      - description: Name of the workspace.
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: Name of the collection.
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsResponse'
          description: documents deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
    patch:
      description: Update existing documents in a collection.
      operationId: patchDocuments
      parameters:
      - description: Name of the workspace.
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: Name of the collection.
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDocumentsRequest'
        description: JSON Patch objects
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchDocumentsResponse'
          description: Documents patched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: content too large
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Patch Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
    post:
      description: Add documents to a collection.
      operationId: addDocuments
      parameters:
      - description: Name of the workspace.
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: Name of the collection.
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentsRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentsResponse'
          description: documents added successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: content too large
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Add Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas:
    get:
      description: List all Query Lambdas under given workspace.
      operationId: listQueryLambdasInWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdasResponse'
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambdas in Workspace
      tags:
      - Query Lambdas
    post:
      description: Create a Query Lambda in given workspace.
      operationId: createQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueryLambdaRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Query Lambda
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}:
    delete:
      description: Delete a Query Lambda.
      operationId: deleteQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteQueryLambdaResponse'
          description: Query Lambda deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda
      tags:
      - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags:
    get:
      description: List all tags associated with a Query Lambda
      operationId: listQueryLambdaTags
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaTagsResponse'
          description: tags listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambda Tags
      tags:
      - Query Lambdas
    post:
      description: Create a tag for a specific Query Lambda version, or update that
        tag if it already exists.
      operationId: createQueryLambdaTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueryLambdaTagRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: tag created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Query Lambda Tag
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}:
    delete:
      description: Delete a tag for a specific Query Lambda
      operationId: deleteQueryLambdaTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: tag deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda Tag Version
      tags:
      - Query Lambdas
    get:
      description: Retrieve the Query Lambda version associated with a given tag.
      operationId: getQueryLambdaTagVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: version retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Query Lambda Tag
      tags:
      - Query Lambdas
    post:
      description: Execute the Query Lambda version associated with a given tag.
      operationId: executeQueryLambdaByTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteQueryLambdaRequest'
        description: JSON object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute Query Lambda By Tag
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}:
    delete:
      description: Delete a Query Lambda version.
      operationId: deleteQueryLambdaVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda version deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda Version
      tags:
      - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions:
    get:
      description: List all versions of a Query Lambda.
      operationId: listQueryLambdaVersions
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaVersionsResponse'
          description: versions listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambda Versions
      tags:
      - Query Lambdas
    post:
      description: Create a new version of a Query Lambda in given workspace.
      operationId: updateQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: Create a new Query Lambda if one does not exist already.
        in: query
        name: create
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQueryLambdaRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update Query Lambda
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}:
    get:
      description: Retrieve details for a specified version of a Query Lambda.
      operationId: getQueryLambdaVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve Query Lambda Version
      tags:
      - Query Lambdas
    post:
      description: Execute a particular version of a Query Lambda.
      operationId: executeQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteQueryLambdaRequest'
        description: JSON object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute Query Lambda By Version
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/views:
    get:
      description: Retrieve all views in a workspace.
      operationId: workspaceViews
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListViewsResponse'
          description: views retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Views in Workspace
      tags:
      - Views
    post:
      description: Create a view
      operationId: createView
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViewRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateViewResponse'
          description: view created successfully
      summary: Create View
      tags:
      - Views
      x-rename: create
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/views/{view}:
    delete:
      description: Delete a view
      operationId: deleteView
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the view
        in: path
        name: view
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteViewResponse'
          description: view deleted successfully
      summary: Delete View
      tags:
      - Views
      x-rename: delete
    get:
      description: Get details about a view
      operationId: getView
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the view
        in: path
        name: view
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetViewResponse'
          description: view retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Retrieve View
      tags:
      - Views
      x-rename: get
    post:
      description: Update a view
      operationId: updateView
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the view
        in: path
        name: view
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateViewResponse'
          description: view updated successfully
      summary: Update View
      tags:
      - Views
      x-rename: update
      x-codegen-request-body-name: body
  /v1/public/shared_lambdas/{public_access_id}:
    post:
      description: Execute a public query lambda (full version).
      operationId: executePublicQueryLambdaWithParams
      parameters:
      - description: public access ID of the query lambda
        in: path
        name: public_access_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutePublicQueryLambdaRequest'
        description: JSON object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute a Public Query Lambda
      tags:
      - Shared Lambdas
      x-codegen-request-body-name: body
components:
  schemas:
    AddDocumentsRequest:
      example:
        data: '[{ "field": "value" }]'
      properties:
        data:
          description: Array of documents to be added to the collection.
          example: '[{ "field": "value" }]'
          items:
            properties: {}
            type: object
          type: array
      required:
      - data
      type: object
    AddDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
      properties:
        data:
          description: Information about the added documents.
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      type: object
    Alias:
      example:
        workspace: commons
        collections: '["commons.foo", "prod.demo"]'
        creator_email: xyz@rockset.com
        name: demo
        description: alias referencing collection in workspace
        created_at: 2001-08-28T00:23:41Z
        state: CREATED
        modified_at: 2001-08-28T00:23:42Z
      properties:
        name:
          description: Name of the alias.
          example: demo
          type: string
        description:
          description: Alias description.
          example: alias referencing collection in workspace
          type: string
        workspace:
          description: Name of the workspace.
          example: commons
          type: string
        creator_email:
          description: Email of the creator.
          example: xyz@rockset.com
          type: string
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
        state:
          description: State of the alias.
          enum:
          - CREATED
          - DELETED
          example: CREATED
          type: string
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        modified_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:42Z
          type: string
      type: object
    ApiKey:
      description: API keys are used to authenticate requests to Rockset's API. An
        API key is tied to the user who creates it.
      example:
        role: read-only
        name: my-key
        created_at: 2001-08-28T00:23:41Z
        state: ACTIVE
        expiry_time: 2001-08-28T00:23:41Z
        created_by: test@rockset.com
        key: aB35kDjg*******************************
        last_access_time: 2001-08-28T00:23:41Z
      properties:
        created_at:
          description: Date that API key was created (ISO-8601 format).
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: Name of the API key.
          example: my-key
          type: string
        key:
          description: API key string of 64 alphanumeric characters.
          example: aB35kDjg*******************************
          type: string
        last_access_time:
          description: Date that API key was most recently used (ISO-8601 format).
          example: 2001-08-28T00:23:41Z
          type: string
        expiry_time:
          description: The expiration date of this API key.
          example: 2001-08-28T00:23:41Z
          type: string
        role:
          description: Role specifying access control. If not specified, API key will
            have access to all of the associated user's roles.
          example: read-only
          type: string
        created_by:
          description: Email of API key owner.
          example: test@rockset.com
          type: string
        state:
          description: Current state of this key.
          enum:
          - ACTIVE
          - SUSPENDED
          example: ACTIVE
          type: string
      required:
      - key
      - name
      type: object
    AsyncQueryOptions:
      example:
        max_initial_results: 5
        client_timeout_ms: 1
        timeout_ms: 5
      properties:
        client_timeout_ms:
          description: The maximum amount of time that the client is willing to wait
            for the query to complete. If the query is not complete by this timeout,
            a response will be returned with a `query_id` that can be used to check
            the status of the query and retrieve results once the query has completed.
          format: int64
          type: integer
        timeout_ms:
          description: The maximum amount of time that the system will attempt to
            complete query execution before aborting the query and returning an error.
          format: int64
          type: integer
        max_initial_results:
          description: The maximum number of results you will receive as a client.
            If the query exceeds this limit, the remaining results can be requested
            using a returned pagination cursor. In addition, there is a maximum response
            size of 100MiB so fewer than `max_results` may be returned.
          format: int64
          type: integer
      type: object
    AvroParams:
      type: object
    AwsAccessKey:
      example:
        aws_access_key_id: AKIAIOSFODNN7EXAMPLE
        aws_secret_access_key: wJal....
      properties:
        aws_access_key_id:
          description: AWS access key ID.
          example: AKIAIOSFODNN7EXAMPLE
          type: string
        aws_secret_access_key:
          description: AWS secret access key.
          example: wJal....
          type: string
      required:
      - aws_access_key_id
      - aws_secret_access_key
      type: object
    AwsRole:
      example:
        aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        aws_external_id: external id of aws
      properties:
        aws_role_arn:
          description: ARN of rockset-role created in your account.
          example: arn:aws:iam::2378964092:role/rockset-role
          type: string
        aws_external_id:
          description: External id used for integration.
          example: external id of aws
          type: string
      required:
      - aws_role_arn
      type: object
    AzureBlobStorageIntegration:
      example:
        connection_string: |-
          BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
          SharedAccessSignature=<KeyValue>
      properties:
        connection_string:
          description: Credentials for the Azure Blob Service.
          example: |-
            BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
            SharedAccessSignature=<KeyValue>
          type: string
      required:
      - connection_string
      type: object
    AzureEventHubsIntegration:
      example:
        connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
      properties:
        connection_string:
          description: Credentials for the Azure Event Hubs.
          example: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          type: string
      type: object
    AzureServiceBusIntegration:
      example:
        connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
      properties:
        connection_string:
          description: Credentials for the Azure Service Bus.
          example: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          type: string
      required:
      - connection_string
      type: object
    BulkStats:
      example:
        transformation_compute_ms: 50000
        index_compute_ms: 100000
        indexing_stage_done_at: 2001-08-28T00:23:41Z
        data_downloaded_bytes: 10000000
        pre_index_size_bytes: 8000000
        data_indexed_bytes: 8000000
        total_index_size_bytes: 10000000
        data_indexed_throughput_bytes: 800000.5
        downloading_stage_done_at: 2001-08-28T00:23:41Z
        started_at: 2001-08-28T00:23:41Z
        provisioning_stage_done_at: 2001-08-28T00:23:41Z
        download_compute_ms: 50000
        documents_downloaded: 10000
        initializing_stage_done_at: 2001-08-28T00:23:41Z
        finalizing_stage_done_at: 2001-08-28T00:23:41Z
      properties:
        started_at:
          description: ISO-8601 date of when the bulk ingest was started.
          example: 2001-08-28T00:23:41Z
          type: string
        initializing_stage_done_at:
          description: ISO-8601 date of when the initializing stage was completed.
          example: 2001-08-28T00:23:41Z
          type: string
        downloading_stage_done_at:
          description: ISO-8601 date of when the downloading stage was completed.
          example: 2001-08-28T00:23:41Z
          type: string
        provisioning_stage_done_at:
          description: ISO-8601 date of when the provisioning stage was completed.
          example: 2001-08-28T00:23:41Z
          type: string
        indexing_stage_done_at:
          description: ISO-8601 date of when the indexing stage was completed.
          example: 2001-08-28T00:23:41Z
          type: string
        finalizing_stage_done_at:
          description: ISO-8601 date of when the finalizing stage was completed.
          example: 2001-08-28T00:23:41Z
          type: string
        documents_downloaded:
          description: Number of documents downloaded from source during an ongoing
            or completed bulk ingest. This includes documents that are dropped and
            reingested.
          example: 10000
          format: int64
          type: integer
        data_downloaded_bytes:
          description: Size in bytes of documents downloaded from source during an
            ongoing or completed bulk ingest. This includes documents that are dropped
            and reingested.
          example: 10000000
          format: int64
          type: integer
        download_compute_ms:
          description: Bulk ingest compute units in milliseconds used for downloading
            documents.
          example: 50000
          format: int64
          type: integer
        transformation_compute_ms:
          description: Bulk ingest compute units in milliseconds used for ingest transformation.
          example: 50000
          format: int64
          type: integer
        pre_index_size_bytes:
          description: Size in bytes of documents before being indexed. This is the
            total size of documents after decompression, transformations, and dropping.
            This is equal to data_indexed_bytes after the indexing stage is done unless
            there are retries during indexing the data.
          example: 8000000
          format: int64
          type: integer
        data_indexed_bytes:
          description: Size in bytes of documents indexed. This is the total size
            of documents after transformations and dropping before indexes are built.
          example: 8000000
          format: int64
          type: integer
        index_compute_ms:
          description: Bulk ingest compute units in milliseconds used for indexing
            documents.
          example: 100000
          format: int64
          type: integer
        total_index_size_bytes:
          description: Total size of indexes after the completed bulk ingest. This
            is the same as collection size.
          example: 10000000
          format: int64
          type: integer
        data_indexed_throughput_bytes:
          description: Throughput of documents indexed in the last minute measured
            in bytes/s. This is based off the data_indexed_bytes size. Throughput
            during the download stage is shown on a per-source granularity in the
            sources field of the Collection response.
          example: 800000.5
          format: double
          type: number
      type: object
    CancelQueryResponse:
      example:
        data:
          last_offset: last_offset
          executed_by: xyz@rockset.com
          expires_at: 2001-08-28T00:23:41Z
          pagination:
            start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          query_id: 5b596206-c632-4a08-8343-0c560f7ef7f1
          query_errors:
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          submitted_at: 2001-08-28T00:23:41Z
          stats:
            throttled_time_ms: 16
            result_set_bytes_size: 1235
            elapsed_time_ms: 128
            result_set_document_count: 1235
          status: RUNNING
      properties:
        data:
          $ref: '#/components/schemas/QueryInfo'
      type: object
    Cluster:
      properties:
        id:
          description: Unique identifier for the cluster.
          example: asdf98-as9df8adf-adsf9asfd
          type: string
        cluster_type:
          description: Cluster type.
          enum:
          - PUBLIC
          example: PRIVATE
          type: string
        aws_region:
          description: Aws region.
          example: us-west-2
          type: string
        domain:
          description: Domain of org using cluster.
          example: rockset
          type: string
        top_level_domain:
          description: Top level domain of org using cluster.
          example: .com
          type: string
        apiserver_url:
          description: Api server url for cluster.
          example: api.rockset.us-west-2.rockset.com
          type: string
      type: object
    Collection:
      example:
        field_mapping_query:
          sql: sql
        workspace: commons
        aliases:
        - workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        - workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        sources:
        - s3:
            bucket: s3://customer-account-info
            object_count_downloaded: 0
            prefixes: '["/transactions", "/stores"]'
            object_count_total: 6
            prefix: prefix/to/keys
            object_bytes_downloaded: 5
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 1
            region: us-west-2
          snowflake:
            schema: PUBLIC
            database: NASDAQ
            warehouse: COMPUTE_XL
            table_name: COMPANIES
            status:
              state: EXPORTING_TO_S3
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '["c1", "c2", "c3"]'
              columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            postgres_dms: true
            json: true
            mssql_dms: true
            oracle_dms: true
            mysql_dms: true
            avro: '{}'
          azure_blob_storage:
            container: server-logs
            prefix: prefix/to/blobs
            pattern: prefix/to/**/keys/*.format
            blob_count_total: 2
            blob_bytes_total: 4
            blob_count_downloaded: 3
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            offset_reset_policy: EARLIEST
            aws_region: us-east-2
            stream_name: click_stream
            dms_primary_key:
            - dms_primary_key
            - dms_primary_key
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            current_status:
              initial_dump_completion_percentage: 0.73
              stream_last_processed_at: 2019-01-15T21:48:23Z
              state: PROCESSING_STREAM
            use_scan_api: true
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          integration_name: aws-integration
          azure_event_hubs:
            offset_reset_policy: EARLIEST
            hub_id: event-hub-1
            status:
              partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          gcs:
            bucket: server-logs
            object_count_downloaded: 5
            object_count_total: 2
            prefix: prefix/to/keys
            object_bytes_downloaded: 9
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 7
          kafka:
            offset_reset_policy: EARLIEST
            consumer_group_id: org-collection
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              kafka_partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              state: ACTIVE
            use_v3: true
          azure_service_bus:
            topic: rockset-topic
            subscription: rockset-subscription
            status:
              sessions:
                key:
                  sequence_number: 323862
                  last_processed: 2022-08-23T00:13:41Z
              first_processed_at: 2021-08-28T00:23:41Z
              records_processed: 1000
          id: a1df483c-734e-485b-8005-f46386ef42f6
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_processed_at: 2019-01-15T21:48:23Z
            detected_size_bytes: 7
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
        - s3:
            bucket: s3://customer-account-info
            object_count_downloaded: 0
            prefixes: '["/transactions", "/stores"]'
            object_count_total: 6
            prefix: prefix/to/keys
            object_bytes_downloaded: 5
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 1
            region: us-west-2
          snowflake:
            schema: PUBLIC
            database: NASDAQ
            warehouse: COMPUTE_XL
            table_name: COMPANIES
            status:
              state: EXPORTING_TO_S3
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '["c1", "c2", "c3"]'
              columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            postgres_dms: true
            json: true
            mssql_dms: true
            oracle_dms: true
            mysql_dms: true
            avro: '{}'
          azure_blob_storage:
            container: server-logs
            prefix: prefix/to/blobs
            pattern: prefix/to/**/keys/*.format
            blob_count_total: 2
            blob_bytes_total: 4
            blob_count_downloaded: 3
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            offset_reset_policy: EARLIEST
            aws_region: us-east-2
            stream_name: click_stream
            dms_primary_key:
            - dms_primary_key
            - dms_primary_key
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            current_status:
              initial_dump_completion_percentage: 0.73
              stream_last_processed_at: 2019-01-15T21:48:23Z
              state: PROCESSING_STREAM
            use_scan_api: true
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          integration_name: aws-integration
          azure_event_hubs:
            offset_reset_policy: EARLIEST
            hub_id: event-hub-1
            status:
              partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          gcs:
            bucket: server-logs
            object_count_downloaded: 5
            object_count_total: 2
            prefix: prefix/to/keys
            object_bytes_downloaded: 9
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 7
          kafka:
            offset_reset_policy: EARLIEST
            consumer_group_id: org-collection
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              kafka_partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              state: ACTIVE
            use_v3: true
          azure_service_bus:
            topic: rockset-topic
            subscription: rockset-subscription
            status:
              sessions:
                key:
                  sequence_number: 323862
                  last_processed: 2022-08-23T00:13:41Z
              first_processed_at: 2021-08-28T00:23:41Z
              records_processed: 1000
          id: a1df483c-734e-485b-8005-f46386ef42f6
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_processed_at: 2019-01-15T21:48:23Z
            detected_size_bytes: 7
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
        insert_only: true
        created_at: 2001-08-28T00:23:41Z
        description: transactions from stores worldwide
        clustering_key:
        - keys: '["value1", "value2"]'
          type: AUTO
          field_name: address.city.zipcode
        - keys: '["value1", "value2"]'
          type: AUTO
          field_name: address.city.zipcode
        created_by: hello@rockset.com
        field_mappings:
        - output_field:
            on_error: SKIP
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        - output_field:
            on_error: SKIP
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        stats:
          doc_count: 2145
          inverted_index_size: 123456
          last_updated_ms: 1535101094433
          total_size: 123456
          purged_doc_count: 2145
          range_index_size: 123456
          purged_doc_size: 123456
          bulk_bytes_inserted: 1
          fill_progress: 0.6
          bytes_overwritten: 123456
          bytes_inserted: 123456
          total_index_size: 123456
          column_index_size: 123456
          last_queried_ms: 1535101119334
          row_index_size: 123456
          bulk_bytes_overwritten: 1
        read_only: true
        bulk_stats:
        - transformation_compute_ms: 50000
          index_compute_ms: 100000
          indexing_stage_done_at: 2001-08-28T00:23:41Z
          data_downloaded_bytes: 10000000
          pre_index_size_bytes: 8000000
          data_indexed_bytes: 8000000
          total_index_size_bytes: 10000000
          data_indexed_throughput_bytes: 800000.5
          downloading_stage_done_at: 2001-08-28T00:23:41Z
          started_at: 2001-08-28T00:23:41Z
          provisioning_stage_done_at: 2001-08-28T00:23:41Z
          download_compute_ms: 50000
          documents_downloaded: 10000
          initializing_stage_done_at: 2001-08-28T00:23:41Z
          finalizing_stage_done_at: 2001-08-28T00:23:41Z
        - transformation_compute_ms: 50000
          index_compute_ms: 100000
          indexing_stage_done_at: 2001-08-28T00:23:41Z
          data_downloaded_bytes: 10000000
          pre_index_size_bytes: 8000000
          data_indexed_bytes: 8000000
          total_index_size_bytes: 10000000
          data_indexed_throughput_bytes: 800000.5
          downloading_stage_done_at: 2001-08-28T00:23:41Z
          started_at: 2001-08-28T00:23:41Z
          provisioning_stage_done_at: 2001-08-28T00:23:41Z
          download_compute_ms: 50000
          documents_downloaded: 10000
          initializing_stage_done_at: 2001-08-28T00:23:41Z
          finalizing_stage_done_at: 2001-08-28T00:23:41Z
        retention_secs: 2592000
        name: global-transactions
        status: READY
      properties:
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        created_by:
          description: Email of user who created the collection.
          example: hello@rockset.com
          type: string
        name:
          description: Unique identifer for collection, can contain alphanumeric or
            dash characters.
          example: global-transactions
          pattern: ^[A-Za-z0-9_\-.]+$
          type: string
        description:
          description: Text describing the collection.
          example: transactions from stores worldwide
          type: string
        workspace:
          description: Name of the workspace that the collection is in.
          example: commons
          type: string
        status:
          description: Current status of collection.
          enum:
          - INITIALIZED
          - CREATED
          - READY
          - PAUSED
          - DELETED
          - PAUSING
          - RESUMING
          - PREPARING_BULK
          - BULK_INGEST_MODE
          - EXITING_BULK_INGEST_MODE
          - UNKNOWN
          example: READY
          type: string
        sources:
          description: List of sources from which collection ingests.
          items:
            $ref: '#/components/schemas/Source'
          type: array
        stats:
          $ref: '#/components/schemas/CollectionStats'
        retention_secs:
          description: Number of seconds after which data is purged based on event
            time.
          example: 2592000
          format: int64
          type: integer
        field_mappings:
          description: List of mappings applied on all documents in a collection.
          items:
            $ref: '#/components/schemas/FieldMappingV2'
          type: array
        field_mapping_query:
          $ref: '#/components/schemas/FieldMappingQuery'
        clustering_key:
          description: List of clustering fields for a collection.
          items:
            $ref: '#/components/schemas/FieldPartition'
          type: array
        aliases:
          description: List of aliases for a collection.
          items:
            $ref: '#/components/schemas/Alias'
          type: array
        read_only:
          description: Whether the collection is read-only or not.
          type: boolean
        insert_only:
          description: Whether the collection is insert only or not.
          type: boolean
        bulk_stats:
          items:
            $ref: '#/components/schemas/BulkStats'
          type: array
      type: object
    CollectionMount:
      example:
        snapshot_expiration_time_millis: 864000000
        collection_path: commons.foo
        stats:
          last_queried_ms: 1535101119334
        virtual_instance_id: 5ac23....
        last_refresh_time_millis: 123123764
        created_at: 2001-08-28T00:23:41Z
        state: ACTIVE
        id: 5ac23....
        type: STATIC
        virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
        rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
      properties:
        type:
          description: Mount type.
          enum:
          - STATIC
          - LIVE
          example: STATIC
          type: string
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        state:
          description: Mount type.
          enum:
          - CREATING
          - ACTIVE
          - REFRESHING
          - EXPIRED
          - DELETING
          example: ACTIVE
          type: string
        collection_path:
          description: Collection path.
          example: commons.foo
          type: string
        virtual_instance_id:
          description: Virtual instance ID.
          example: 5ac23....
          type: string
        virtual_instance_rrn:
          description: Virtual Instance RRN.
          example: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          type: string
        id:
          description: Mount ID.
          example: 5ac23....
          type: string
        rrn:
          description: Mount RRN.
          example: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
          type: string
        last_refresh_time_millis:
          description: Unix timestamp of most recent refresh. Not applicable for live
            mounts.
          example: 123123764
          format: int64
          type: integer
        snapshot_expiration_time_millis:
          description: Time in millis at which the snapshot expires.
          example: 864000000
          format: int64
          type: integer
        stats:
          $ref: '#/components/schemas/CollectionMountStats'
      type: object
    CollectionMountResponse:
      example:
        data:
          snapshot_expiration_time_millis: 864000000
          collection_path: commons.foo
          stats:
            last_queried_ms: 1535101119334
          virtual_instance_id: 5ac23....
          last_refresh_time_millis: 123123764
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          id: 5ac23....
          type: STATIC
          virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
      properties:
        data:
          $ref: '#/components/schemas/CollectionMount'
      type: object
    CollectionMountStats:
      example:
        last_queried_ms: 1535101119334
      properties:
        last_queried_ms:
          description: Milliseconds since Unix epoch Jan 1, 1970.
          example: 1535101119334
          format: int64
          type: integer
      type: object
    CollectionStats:
      example:
        doc_count: 2145
        inverted_index_size: 123456
        last_updated_ms: 1535101094433
        total_size: 123456
        purged_doc_count: 2145
        range_index_size: 123456
        purged_doc_size: 123456
        bulk_bytes_inserted: 1
        fill_progress: 0.6
        bytes_overwritten: 123456
        bytes_inserted: 123456
        total_index_size: 123456
        column_index_size: 123456
        last_queried_ms: 1535101119334
        row_index_size: 123456
        bulk_bytes_overwritten: 1
      properties:
        doc_count:
          description: Number of documents in the collection.
          example: 2145
          format: int64
          type: integer
        purged_doc_count:
          description: Number of documents purged from the collection.
          example: 2145
          format: int64
          type: integer
        fill_progress:
          description: Number between 0 and 1 that indicates progress of collection
            creation.
          example: 0.6
          format: double
          type: number
        last_queried_ms:
          description: Milliseconds since Unix epoch Jan 1, 1970.
          example: 1535101119334
          format: int64
          type: integer
        last_updated_ms:
          description: Milliseconds since Unix epoch Jan 1, 1970.
          example: 1535101094433
          format: int64
          type: integer
        total_size:
          description: Total collection size in bytes.
          example: 123456
          format: int64
          type: integer
        total_index_size:
          description: Total collection index size in bytes.
          example: 123456
          format: int64
          type: integer
        row_index_size:
          description: Total collection row index size in bytes.
          example: 123456
          format: int64
          type: integer
        column_index_size:
          description: Total collection column index size in bytes.
          example: 123456
          format: int64
          type: integer
        inverted_index_size:
          description: Total collection inverted index size in bytes.
          example: 123456
          format: int64
          type: integer
        range_index_size:
          description: Total collection range index size in bytes.
          example: 123456
          format: int64
          type: integer
        purged_doc_size:
          description: Total size of bytes purged in bytes.
          example: 123456
          format: int64
          type: integer
        bytes_inserted:
          description: Total number of bytes inserted into the collection.
          example: 123456
          format: int64
          type: integer
        bytes_overwritten:
          description: Total number of bytes overwritten in writing into the collection.
          example: 123456
          format: int64
          type: integer
        bulk_bytes_inserted:
          description: Total number of bytes inserted into the collection during bulk.
          format: int64
          type: integer
        bulk_bytes_overwritten:
          description: Total number of bytes overwritten in writing into the collection
            during bulk.
          format: int64
          type: integer
      type: object
    CreateAliasRequest:
      example:
        collections: '["commons.foo", "prod.demo"]'
        name: aliasName
        description: version alias
      properties:
        name:
          description: Alias name.
          example: aliasName
          type: string
        description:
          description: Optional description.
          example: version alias
          type: string
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
      required:
      - collections
      - name
      type: object
    CreateAliasResponse:
      example:
        data:
          workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    CreateApiKeyRequest:
      example:
        role: role
        name: my-app
        created_by: created_by
      properties:
        name:
          description: Name for this API key.
          example: my-app
          type: string
        role:
          type: string
        created_by:
          type: string
      required:
      - name
      type: object
    CreateApiKeyResponse:
      example:
        data:
          role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    CreateCollectionMountRequest:
      example:
        collection_paths: '["commons.foo", "commons.bar"]'
        type: STATIC
      properties:
        type:
          description: Mount type.
          enum:
          - STATIC
          - LIVE
          example: STATIC
          type: string
        collection_paths:
          description: Collections to mount.
          example: '["commons.foo", "commons.bar"]'
          items:
            type: string
          type: array
      type: object
    CreateCollectionMountsResponse:
      example:
        data:
        - snapshot_expiration_time_millis: 864000000
          collection_path: commons.foo
          stats:
            last_queried_ms: 1535101119334
          virtual_instance_id: 5ac23....
          last_refresh_time_millis: 123123764
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          id: 5ac23....
          type: STATIC
          virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
        - snapshot_expiration_time_millis: 864000000
          collection_path: commons.foo
          stats:
            last_queried_ms: 1535101119334
          virtual_instance_id: 5ac23....
          last_refresh_time_millis: 123123764
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          id: 5ac23....
          type: STATIC
          virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
      properties:
        data:
          description: Mounts created.
          items:
            $ref: '#/components/schemas/CollectionMount'
          type: array
      type: object
    CreateCollectionRequest:
      example:
        field_mappings:
        - output_field:
            on_error: SKIP
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        - output_field:
            on_error: SKIP
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: SKIP
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        field_mapping_query:
          sql: sql
        sources:
        - s3:
            bucket: s3://customer-account-info
            object_count_downloaded: 0
            prefixes: '["/transactions", "/stores"]'
            object_count_total: 6
            prefix: prefix/to/keys
            object_bytes_downloaded: 5
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 1
            region: us-west-2
          snowflake:
            schema: PUBLIC
            database: NASDAQ
            warehouse: COMPUTE_XL
            table_name: COMPANIES
            status:
              state: EXPORTING_TO_S3
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '["c1", "c2", "c3"]'
              columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            postgres_dms: true
            json: true
            mssql_dms: true
            oracle_dms: true
            mysql_dms: true
            avro: '{}'
          azure_blob_storage:
            container: server-logs
            prefix: prefix/to/blobs
            pattern: prefix/to/**/keys/*.format
            blob_count_total: 2
            blob_bytes_total: 4
            blob_count_downloaded: 3
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            offset_reset_policy: EARLIEST
            aws_region: us-east-2
            stream_name: click_stream
            dms_primary_key:
            - dms_primary_key
            - dms_primary_key
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            current_status:
              initial_dump_completion_percentage: 0.73
              stream_last_processed_at: 2019-01-15T21:48:23Z
              state: PROCESSING_STREAM
            use_scan_api: true
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          integration_name: aws-integration
          azure_event_hubs:
            offset_reset_policy: EARLIEST
            hub_id: event-hub-1
            status:
              partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          gcs:
            bucket: server-logs
            object_count_downloaded: 5
            object_count_total: 2
            prefix: prefix/to/keys
            object_bytes_downloaded: 9
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 7
          kafka:
            offset_reset_policy: EARLIEST
            consumer_group_id: org-collection
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              kafka_partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              state: ACTIVE
            use_v3: true
          azure_service_bus:
            topic: rockset-topic
            subscription: rockset-subscription
            status:
              sessions:
                key:
                  sequence_number: 323862
                  last_processed: 2022-08-23T00:13:41Z
              first_processed_at: 2021-08-28T00:23:41Z
              records_processed: 1000
          id: a1df483c-734e-485b-8005-f46386ef42f6
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_processed_at: 2019-01-15T21:48:23Z
            detected_size_bytes: 7
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
        - s3:
            bucket: s3://customer-account-info
            object_count_downloaded: 0
            prefixes: '["/transactions", "/stores"]'
            object_count_total: 6
            prefix: prefix/to/keys
            object_bytes_downloaded: 5
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 1
            region: us-west-2
          snowflake:
            schema: PUBLIC
            database: NASDAQ
            warehouse: COMPUTE_XL
            table_name: COMPANIES
            status:
              state: EXPORTING_TO_S3
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '["c1", "c2", "c3"]'
              columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            postgres_dms: true
            json: true
            mssql_dms: true
            oracle_dms: true
            mysql_dms: true
            avro: '{}'
          azure_blob_storage:
            container: server-logs
            prefix: prefix/to/blobs
            pattern: prefix/to/**/keys/*.format
            blob_count_total: 2
            blob_bytes_total: 4
            blob_count_downloaded: 3
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            offset_reset_policy: EARLIEST
            aws_region: us-east-2
            stream_name: click_stream
            dms_primary_key:
            - dms_primary_key
            - dms_primary_key
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            current_status:
              initial_dump_completion_percentage: 0.73
              stream_last_processed_at: 2019-01-15T21:48:23Z
              state: PROCESSING_STREAM
            use_scan_api: true
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          integration_name: aws-integration
          azure_event_hubs:
            offset_reset_policy: EARLIEST
            hub_id: event-hub-1
            status:
              partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          gcs:
            bucket: server-logs
            object_count_downloaded: 5
            object_count_total: 2
            prefix: prefix/to/keys
            object_bytes_downloaded: 9
            pattern: prefix/to/**/keys/*.format
            object_bytes_total: 7
          kafka:
            offset_reset_policy: EARLIEST
            consumer_group_id: org-collection
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              kafka_partitions:
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              - partition_offset: 100
                partition_number: 123
                offset_lag: 10
              state: ACTIVE
            use_v3: true
          azure_service_bus:
            topic: rockset-topic
            subscription: rockset-subscription
            status:
              sessions:
                key:
                  sequence_number: 323862
                  last_processed: 2022-08-23T00:13:41Z
              first_processed_at: 2021-08-28T00:23:41Z
              records_processed: 1000
          id: a1df483c-734e-485b-8005-f46386ef42f6
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_processed_at: 2019-01-15T21:48:23Z
            detected_size_bytes: 7
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
        event_time_info:
          field: timestamp
          format: seconds_since_epoch
          time_zone: UTC
        storage_compression_type: LZ4
        retention_secs: 1000000
        name: global-transactions
        description: transactions from stores worldwide
        clustering_key:
        - keys: '["value1", "value2"]'
          type: AUTO
          field_name: address.city.zipcode
        - keys: '["value1", "value2"]'
          type: AUTO
          field_name: address.city.zipcode
      properties:
        name:
          description: Unique identifier for collection, can contain alphanumeric
            or dash characters.
          example: global-transactions
          type: string
        description:
          description: Text describing the collection.
          example: transactions from stores worldwide
          type: string
        sources:
          description: List of sources from which to ingest data.
          items:
            $ref: '#/components/schemas/Source'
          type: array
        retention_secs:
          description: Number of seconds after which data is purged, based on event
            time.
          example: 1000000
          format: int64
          minimum: 1
          type: integer
        event_time_info:
          $ref: '#/components/schemas/EventTimeInfo'
        field_mappings:
          description: Deprecated. List of mappings. Use field_mapping_query instead.
          items:
            $ref: '#/components/schemas/FieldMappingV2'
          type: array
        field_mapping_query:
          $ref: '#/components/schemas/FieldMappingQuery'
        clustering_key:
          description: Deprecated. List of clustering fields. Use CLUSTER BY clause
            in `field_mapping_query` instead.
          items:
            $ref: '#/components/schemas/FieldPartition'
          type: array
        storage_compression_type:
          description: RocksDB storage compression type.
          enum:
          - LZ4
          - ZSTD
          type: string
      type: object
    CreateCollectionResponse:
      example:
        data:
          field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    CreateIntegrationRequest:
      example:
        s3:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
        snowflake:
          user_role: user_role
          snowflake_url: acme-marketing-test-account.snowflakecomputing.com
          password: password
          default_warehouse: default_warehouse
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          s3_export_path: s3://bucket/prefix
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
          username: username
        azure_event_hubs:
          connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
        gcs:
          gcp_service_account:
            service_account_key_file_json: service_account_key_file_json
        kafka:
          source_status_by_topic: '{"topic-a": "DORMANT"}'
          kafka_topic_names:
          - kafka_topic_names
          - kafka_topic_names
          schema_registry_config:
            secret: secret
            url: url
            key: key
          security_config:
            api_key: api_key
            secret: secret
          kafka_data_format: JSON
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
          bootstrap_servers: localhost:9092
          connection_string: connection_string
          use_v3: true
        name: event-logs
        azure_blob_storage:
          connection_string: |-
            BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
            SharedAccessSignature=<KeyValue>
        azure_service_bus:
          connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
        description: AWS account with event data for the data science team.
        kinesis:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
        mongodb:
          connection_uri: mongodb+srv://<username>:<password>@server.example.com/
        dynamodb:
          s3_export_bucket_name: s3_export_bucket_name
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
      properties:
        name:
          description: Descriptive label.
          example: event-logs
          type: string
        description:
          description: Longer explanation for the integration.
          example: AWS account with event data for the data science team.
          type: string
        s3:
          $ref: '#/components/schemas/S3Integration'
        kinesis:
          $ref: '#/components/schemas/KinesisIntegration'
        dynamodb:
          $ref: '#/components/schemas/DynamodbIntegration'
        gcs:
          $ref: '#/components/schemas/GcsIntegration'
        azure_blob_storage:
          $ref: '#/components/schemas/AzureBlobStorageIntegration'
        azure_service_bus:
          $ref: '#/components/schemas/AzureServiceBusIntegration'
        azure_event_hubs:
          $ref: '#/components/schemas/AzureEventHubsIntegration'
        kafka:
          $ref: '#/components/schemas/KafkaIntegration'
        mongodb:
          $ref: '#/components/schemas/MongoDbIntegration'
        snowflake:
          $ref: '#/components/schemas/SnowflakeIntegration'
      required:
      - name
      type: object
    CreateIntegrationResponse:
      example:
        data:
          owner_email: abc@rockset.com
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          snowflake:
            user_role: user_role
            snowflake_url: acme-marketing-test-account.snowflakecomputing.com
            password: password
            default_warehouse: default_warehouse
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            s3_export_path: s3://bucket/prefix
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            username: username
          azure_blob_storage:
            connection_string: |-
              BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
              SharedAccessSignature=<KeyValue>
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          dynamodb:
            s3_export_bucket_name: s3_export_bucket_name
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          azure_event_hubs:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          collections:
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          kafka:
            source_status_by_topic: '{"topic-a": "DORMANT"}'
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            schema_registry_config:
              secret: secret
              url: url
              key: key
            security_config:
              api_key: api_key
              secret: secret
            kafka_data_format: JSON
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            bootstrap_servers: localhost:9092
            connection_string: connection_string
            use_v3: true
          name: event-logs
          azure_service_bus:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    CreateQueryLambdaRequest:
      example:
        name: myQueryLambda
        is_public: true
        description: production version foo
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        name:
          description: Query Lambda name.
          example: myQueryLambda
          type: string
        description:
          description: Optional description.
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
        is_public:
          type: boolean
      required:
      - name
      - sql
      type: object
    CreateQueryLambdaTagRequest:
      example:
        tag_name: production
        version: 123ABC
      properties:
        tag_name:
          description: Name of Query Lambda tag.
          example: production
          type: string
        version:
          description: Hash identifying a Query Lambda tag.
          example: 123ABC
          type: string
      required:
      - tag_name
      - version
      type: object
    CreateRoleRequest:
      example:
        role_name: read_write
        privileges:
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        description: Role with read and write privileges to all collections.
      properties:
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: '#/components/schemas/Privilege'
          type: array
      type: object
    CreateUserRequest:
      example:
        roles: '["admin", "member", "read-only"]'
        last_name: Doe
        first_name: John
        email: hello@rockset.com
      properties:
        email:
          description: User email, must be unique.
          example: hello@rockset.com
          type: string
        roles:
          description: List of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
      required:
      - email
      - roles
      type: object
    CreateUserResponse:
      example:
        data:
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          state: ACTIVE
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    CreateViewRequest:
      example:
        query: SELECT * FROM foo
        name: myAwesomeView
        description: view of awesome collection
      properties:
        name:
          description: View name.
          example: myAwesomeView
          type: string
        description:
          description: Optional description.
          example: view of awesome collection
          type: string
        query:
          description: SQL for this view.
          example: SELECT * FROM foo
          type: string
      required:
      - name
      - query
      type: object
    CreateViewResponse:
      example:
        data:
          owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/View'
      type: object
    CreateVirtualInstanceRequest:
      example:
        mount_refresh_interval_seconds: 3600
        name: prod_vi
        description: VI serving prod traffic
        auto_suspend_seconds: 3600
        type: LARGE
      properties:
        type:
          description: Requested virtual instance type.
          enum:
          - FREE
          - NANO
          - SHARED
          - MILLI
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: LARGE
          type: string
        name:
          description: Unique identifier for virtual instance, can contain alphanumeric
            or dash characters.
          example: prod_vi
          type: string
        description:
          description: Description of requested virtual instance.
          example: VI serving prod traffic
          type: string
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        mount_refresh_interval_seconds:
          description: Number of seconds between data refreshes for mounts on this
            Virtual Instance
          example: 3600
          format: int32
          type: integer
      required:
      - name
      type: object
    CreateVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    CreateWorkspaceRequest:
      example:
        name: event_logs
        description: Datasets of system logs for the ops team.
      properties:
        name:
          description: Descriptive label and unique identifier.
          example: event_logs
          type: string
        description:
          description: Longer explanation for the workspace.
          example: Datasets of system logs for the ops team.
          type: string
      required:
      - name
      type: object
    CreateWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    CsvParams:
      example:
        quoteChar: '"'
        escapeChar: \
        columnNames: '["c1", "c2", "c3"]'
        columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
        firstLineAsColumnNames: true
        encoding: UTF-8
        separator: ','
      properties:
        firstLineAsColumnNames:
          description: If the first line in every object specifies the column names.
          example: true
          type: boolean
        separator:
          description: A single character that is the column separator.
          example: ','
          type: string
        encoding:
          description: 'One of: UTF-8, ISO_8859_1, UTF-16.'
          example: UTF-8
          type: string
        columnNames:
          description: Names of columns.
          example: '["c1", "c2", "c3"]'
          items:
            type: string
          type: array
        columnTypes:
          description: Names of columns.
          example: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
          items:
            enum:
            - UNKNOWN
            - BOOLEAN
            - BOOL
            - INTEGER
            - INT
            - FLOAT
            - TIME
            - DATE
            - DATETIME
            - TIMESTAMP
            - STRING
            type: string
          type: array
        quoteChar:
          description: character within which a cell value is enclosed,null character
            if no such character, default is '"'
          example: '"'
          type: string
        escapeChar:
          description: escape character removes any special meaning from the following
            character,default is '\'
          example: \
          type: string
      type: object
    DeleteAliasResponse:
      example:
        data:
          workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    DeleteApiKeyResponse:
      example:
        data:
          role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    DeleteCollectionResponse:
      example:
        data:
          field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    DeleteDocumentsRequest:
      example:
        data:
        - _id: 2cd61e3b
        - _id: 2cd61e3b
      properties:
        data:
          description: Array of IDs of documents to be deleted.
          items:
            $ref: '#/components/schemas/DeleteDocumentsRequestData'
          type: array
      required:
      - data
      type: object
    DeleteDocumentsRequestData:
      example:
        _id: 2cd61e3b
      properties:
        _id:
          description: Unique document ID.
          example: 2cd61e3b
          type: string
      required:
      - _id
      type: object
    DeleteDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
      properties:
        data:
          description: Information about deleted documents.
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      type: object
    DeleteIntegrationResponse:
      example:
        data:
          owner_email: abc@rockset.com
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          snowflake:
            user_role: user_role
            snowflake_url: acme-marketing-test-account.snowflakecomputing.com
            password: password
            default_warehouse: default_warehouse
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            s3_export_path: s3://bucket/prefix
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            username: username
          azure_blob_storage:
            connection_string: |-
              BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
              SharedAccessSignature=<KeyValue>
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          dynamodb:
            s3_export_bucket_name: s3_export_bucket_name
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          azure_event_hubs:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          collections:
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          kafka:
            source_status_by_topic: '{"topic-a": "DORMANT"}'
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            schema_registry_config:
              secret: secret
              url: url
              key: key
            security_config:
              api_key: api_key
              secret: secret
            kafka_data_format: JSON
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            bootstrap_servers: localhost:9092
            connection_string: connection_string
            use_v3: true
          name: event-logs
          azure_service_bus:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    DeleteQueryLambdaResponse:
      example:
        data:
          workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
      properties:
        data:
          $ref: '#/components/schemas/QueryLambda'
      type: object
    DeleteUserResponse:
      example:
        data:
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          state: ACTIVE
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    DeleteViewResponse:
      example:
        data:
          owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/View'
      type: object
    DeleteVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    DeleteWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    DocumentStatus:
      example:
        patch_id: 486gsg8
        _collection: customers
        _id: 2cd61e3b
        error:
          trace_id: trace_id
          query_id: query_id
          error_id: error_id
          line: 0
          column: 6
          message: collection not found
          type: INVALIDINPUT
        status: ADDED
      properties:
        _collection:
          description: Collection name.
          example: customers
          type: string
        error:
          $ref: '#/components/schemas/ErrorModel'
        _id:
          description: Unique document ID.
          example: 2cd61e3b
          type: string
        status:
          description: Status of the document.
          enum:
          - ADDED
          - REPLACED
          - DELETED
          - PATCHED
          - ERROR
          example: ADDED
          type: string
        patch_id:
          description: Unique id used to represent each patch request.
          example: 486gsg8
          type: string
      type: object
    DynamodbIntegration:
      example:
        s3_export_bucket_name: s3_export_bucket_name
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          aws_external_id: external id of aws
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
        s3_export_bucket_name:
          description: S3 bucket used for export during collection initial dump.
          type: string
      type: object
    ErrorModel:
      description: Describes details about an error
      example:
        trace_id: trace_id
        query_id: query_id
        error_id: error_id
        line: 0
        column: 6
        message: collection not found
        type: INVALIDINPUT
      properties:
        message:
          description: Descriptive message about the error.
          example: collection not found
          type: string
        type:
          description: Category of the error.
          enum:
          - AUTHEXCEPTION
          - VERSIONEXCEPTION
          - INTERNALERROR
          - INVALIDINPUT
          - NOTIMPLEMENTEDYET
          - RESOURCEEXCEEDED
          - ALREADYEXISTS
          - NOTALLOWED
          - NOTACCEPTABLE
          - NOTSUPPORTED
          - NOTFOUND
          - DEPENDENTRESOURCES
          - QUERY_ERROR
          - NOT_READY
          - FORBIDDEN
          - QUERY_TIMEOUT
          - CONNECTION_ERROR
          - CONTENTTOOLARGE
          - CREATING
          - BADREQUEST
          - SERVICEUNAVAILABLE
          - CONFLICT
          - RATELIMITEXCEEDED
          - QUERY_CANCELLED
          - CLIENT_CONNECTION_ERROR
          example: INVALIDINPUT
          type: string
        line:
          description: Line where the error happened (if applicable).
          format: int32
          type: integer
        column:
          description: Column where the error happened (if applicable).
          format: int32
          type: integer
        trace_id:
          description: Internal trace ID to help with debugging.
          type: string
        error_id:
          description: ID of the error.
          type: string
        query_id:
          description: ID of the query (if applicable).
          type: string
      type: object
    EventTimeInfo:
      example:
        field: timestamp
        format: seconds_since_epoch
        time_zone: UTC
      properties:
        field:
          description: Name of the field containing event time.
          example: timestamp
          type: string
        format:
          description: 'Format of time field, can be one of: milliseconds_since_epoch,
            seconds_since_epoch.'
          example: seconds_since_epoch
          type: string
        time_zone:
          description: Default time zone, in standard IANA format.
          example: UTC
          type: string
      required:
      - field
      type: object
    ExecutePublicQueryLambdaRequest:
      example:
        generate_warnings: true
        default_row_limit: 0
        parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
      properties:
        parameters:
          description: List of named parameters.
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text.
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings.
          type: boolean
      type: object
    ExecuteQueryLambdaRequest:
      example:
        generate_warnings: true
        virtual_instance_id: virtual_instance_id
        initial_paginate_response_doc_count: 6
        paginate: true
        default_row_limit: 0
        parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
        async_options:
          max_initial_results: 5
          client_timeout_ms: 1
          timeout_ms: 5
      properties:
        parameters:
          description: List of named parameters.
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text.
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings.
          type: boolean
        paginate:
          description: Flag to paginate and store the results of this query for later
            / sequential retrieval.
          type: boolean
        initial_paginate_response_doc_count:
          description: Number of documents to return in addition to paginating for
            this query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
        async_options:
          $ref: '#/components/schemas/AsyncQueryOptions'
        virtual_instance_id:
          description: Virtual instance on which to run the query.
          type: string
      type: object
    FieldMapping:
      type: object
    FieldMappingQuery:
      example:
        sql: sql
      properties:
        sql:
          description: SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input.
          example: sql
          type: string
      type: object
    FieldMappingV2:
      example:
        output_field:
          on_error: SKIP
          value:
            sql: SHA256()
          field_name: zip_hash
        name: myTestMapping
        input_fields:
        - is_drop: true
          if_missing: SKIP
          param: zip
          field_name: address.city.zipcode
        - is_drop: true
          if_missing: SKIP
          param: zip
          field_name: address.city.zipcode
        is_drop_all_fields: true
      properties:
        name:
          description: A user specified string that is a name for this mapping.
          example: myTestMapping
          type: string
        is_drop_all_fields:
          description: A boolean that determines whether to drop all fields in this
            document. If set, input and output fields should not be set
          example: true
          type: boolean
        input_fields:
          description: A List of InputField for this mapping.
          items:
            $ref: '#/components/schemas/InputField'
          type: array
        output_field:
          $ref: '#/components/schemas/OutputField'
      type: object
    FieldPartition:
      example:
        keys: '["value1", "value2"]'
        type: AUTO
        field_name: address.city.zipcode
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name.
          example: address.city.zipcode
          type: string
        type:
          description: The type of partitions on a field.
          enum:
          - AUTO
          example: AUTO
          type: string
        keys:
          description: The values for partitioning of a field. Unneeded if the partition
            type is AUTO.
          example: '["value1", "value2"]'
          items:
            type: string
          type: array
      type: object
    FormatParams:
      example:
        xml:
          attribute_prefix: _attr
          doc_tag: row
          encoding: UTF-8
          value_tag: value
          root_tag: root
        csv:
          quoteChar: '"'
          escapeChar: \
          columnNames: '["c1", "c2", "c3"]'
          columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
          firstLineAsColumnNames: true
          encoding: UTF-8
          separator: ','
        postgres_dms: true
        json: true
        mssql_dms: true
        oracle_dms: true
        mysql_dms: true
        avro: '{}'
      properties:
        json:
          description: Source data is in json format.
          example: true
          type: boolean
        csv:
          $ref: '#/components/schemas/CsvParams'
        xml:
          $ref: '#/components/schemas/XmlParams'
        mysql_dms:
          type: boolean
        postgres_dms:
          type: boolean
        mssql_dms:
          type: boolean
        oracle_dms:
          type: boolean
        avro:
          type: object
      type: object
    GcpServiceAccount:
      example:
        service_account_key_file_json: service_account_key_file_json
      properties:
        service_account_key_file_json:
          description: Contents of JSON Service Account key file.
          type: string
      required:
      - service_account_key_file_json
      type: object
    GcsIntegration:
      example:
        gcp_service_account:
          service_account_key_file_json: service_account_key_file_json
      properties:
        gcp_service_account:
          $ref: '#/components/schemas/GcpServiceAccount'
      type: object
    GetAliasResponse:
      example:
        data:
          workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    GetApiKeyResponse:
      example:
        data:
          role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    GetCollectionResponse:
      example:
        data:
          field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    GetIntegrationResponse:
      example:
        data:
          owner_email: abc@rockset.com
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          snowflake:
            user_role: user_role
            snowflake_url: acme-marketing-test-account.snowflakecomputing.com
            password: password
            default_warehouse: default_warehouse
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            s3_export_path: s3://bucket/prefix
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            username: username
          azure_blob_storage:
            connection_string: |-
              BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
              SharedAccessSignature=<KeyValue>
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          dynamodb:
            s3_export_bucket_name: s3_export_bucket_name
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          azure_event_hubs:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          collections:
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          kafka:
            source_status_by_topic: '{"topic-a": "DORMANT"}'
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            schema_registry_config:
              secret: secret
              url: url
              key: key
            security_config:
              api_key: api_key
              secret: secret
            kafka_data_format: JSON
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            bootstrap_servers: localhost:9092
            connection_string: connection_string
            use_v3: true
          name: event-logs
          azure_service_bus:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    GetQueryResponse:
      example:
        data:
          last_offset: last_offset
          executed_by: xyz@rockset.com
          expires_at: 2001-08-28T00:23:41Z
          pagination:
            start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          query_id: 5b596206-c632-4a08-8343-0c560f7ef7f1
          query_errors:
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          submitted_at: 2001-08-28T00:23:41Z
          stats:
            throttled_time_ms: 16
            result_set_bytes_size: 1235
            elapsed_time_ms: 128
            result_set_document_count: 1235
          status: RUNNING
      properties:
        data:
          $ref: '#/components/schemas/QueryInfo'
      type: object
    GetViewResponse:
      example:
        data:
          owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/View'
      type: object
    GetVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    GetWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    InputField:
      example:
        is_drop: true
        if_missing: SKIP
        param: zip
        field_name: address.city.zipcode
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name.
          example: address.city.zipcode
          type: string
        if_missing:
          description: Define the behaviour if fieldName is missing or is null.
          enum:
          - SKIP
          - PASS
          example: SKIP
          type: string
        is_drop:
          description: If true, then drop fieldName from the document.
          example: true
          type: boolean
        param:
          description: Sql parameter name.
          example: zip
          type: string
      type: object
    Integration:
      description: Integrations that can be associated with data sources to create
        collections. Only one type of integration may be specified.
      example:
        owner_email: abc@rockset.com
        s3:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
        snowflake:
          user_role: user_role
          snowflake_url: acme-marketing-test-account.snowflakecomputing.com
          password: password
          default_warehouse: default_warehouse
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          s3_export_path: s3://bucket/prefix
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
          username: username
        azure_blob_storage:
          connection_string: |-
            BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
            SharedAccessSignature=<KeyValue>
        description: AWS account with event data for the data science team.
        created_at: 2001-08-28T00:23:41Z
        created_by: hello@rockset.com
        kinesis:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
        dynamodb:
          s3_export_bucket_name: s3_export_bucket_name
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
        azure_event_hubs:
          connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
        collections:
        - field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
        - field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
        gcs:
          gcp_service_account:
            service_account_key_file_json: service_account_key_file_json
        kafka:
          source_status_by_topic: '{"topic-a": "DORMANT"}'
          kafka_topic_names:
          - kafka_topic_names
          - kafka_topic_names
          schema_registry_config:
            secret: secret
            url: url
            key: key
          security_config:
            api_key: api_key
            secret: secret
          kafka_data_format: JSON
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
            aws_external_id: external id of aws
          bootstrap_servers: localhost:9092
          connection_string: connection_string
          use_v3: true
        name: event-logs
        azure_service_bus:
          connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
        mongodb:
          connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        name:
          description: Descriptive label and unique identifier.
          example: event-logs
          type: string
        description:
          description: Longer explanation for the integration.
          example: AWS account with event data for the data science team.
          type: string
        created_by:
          description: Email of user who created the integration.
          example: hello@rockset.com
          type: string
        owner_email:
          description: User that owns this integration.
          example: abc@rockset.com
          type: string
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        s3:
          $ref: '#/components/schemas/S3Integration'
        kinesis:
          $ref: '#/components/schemas/KinesisIntegration'
        dynamodb:
          $ref: '#/components/schemas/DynamodbIntegration'
        gcs:
          $ref: '#/components/schemas/GcsIntegration'
        azure_blob_storage:
          $ref: '#/components/schemas/AzureBlobStorageIntegration'
        azure_service_bus:
          $ref: '#/components/schemas/AzureServiceBusIntegration'
        azure_event_hubs:
          $ref: '#/components/schemas/AzureEventHubsIntegration'
        kafka:
          $ref: '#/components/schemas/KafkaIntegration'
        mongodb:
          $ref: '#/components/schemas/MongoDbIntegration'
        snowflake:
          $ref: '#/components/schemas/SnowflakeIntegration'
        collections:
          description: List of collections that use the integration.
          items:
            $ref: '#/components/schemas/Collection'
          type: array
      required:
      - created_by
      - name
      type: object
    KafkaIntegration:
      example:
        source_status_by_topic: '{"topic-a": "DORMANT"}'
        kafka_topic_names:
        - kafka_topic_names
        - kafka_topic_names
        schema_registry_config:
          secret: secret
          url: url
          key: key
        security_config:
          api_key: api_key
          secret: secret
        kafka_data_format: JSON
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          aws_external_id: external id of aws
        bootstrap_servers: localhost:9092
        connection_string: connection_string
        use_v3: true
      properties:
        kafka_topic_names:
          description: Kafka topics to tail.
          items:
            type: string
          type: array
          uniqueItems: true
        source_status_by_topic:
          additionalProperties:
            $ref: '#/components/schemas/StatusKafka'
          description: The status of the Kafka source by topic.
          example: '{"topic-a": "DORMANT"}'
          readOnly: true
          type: object
        kafka_data_format:
          description: The format of the Kafka topics being tailed.
          enum:
          - JSON
          - AVRO
          example: JSON
          type: string
        connection_string:
          description: Kafka connection string.
          type: string
        aws_role:
          $ref: '#/components/schemas/AwsRole'
        use_v3:
          type: boolean
        bootstrap_servers:
          description: The Kafka bootstrap server url(s). Required only for V3 integration.
          example: localhost:9092
          type: string
        security_config:
          $ref: '#/components/schemas/KafkaV3SecurityConfig'
        schema_registry_config:
          $ref: '#/components/schemas/SchemaRegistryConfig'
      type: object
    KafkaV3SecurityConfig:
      example:
        api_key: api_key
        secret: secret
      properties:
        api_key:
          type: string
        secret:
          type: string
      type: object
    KinesisIntegration:
      example:
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          aws_external_id: external id of aws
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
      type: object
    ListAliasesResponse:
      example:
        data:
        - workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        - workspace: commons
          collections: '["commons.foo", "prod.demo"]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          description: List of all aliases.
          items:
            $ref: '#/components/schemas/Alias'
          type: array
      type: object
    ListApiKeysResponse:
      example:
        data:
        - role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
        - role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          description: List of API key objects.
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      type: object
    ListCollectionMountsResponse:
      example:
        data:
        - snapshot_expiration_time_millis: 864000000
          collection_path: commons.foo
          stats:
            last_queried_ms: 1535101119334
          virtual_instance_id: 5ac23....
          last_refresh_time_millis: 123123764
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          id: 5ac23....
          type: STATIC
          virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
        - snapshot_expiration_time_millis: 864000000
          collection_path: commons.foo
          stats:
            last_queried_ms: 1535101119334
          virtual_instance_id: 5ac23....
          last_refresh_time_millis: 123123764
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          id: 5ac23....
          type: STATIC
          virtual_instance_rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          rrn: rrn:mnt:use1a1:123e4567-e89b-12d3-a456-556642440000
      properties:
        data:
          description: List of all collection mounts.
          items:
            $ref: '#/components/schemas/CollectionMount'
          type: array
      type: object
    ListCollectionsResponse:
      example:
        data:
        - field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
        - field_mapping_query:
            sql: sql
          workspace: commons
          aliases:
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '["commons.foo", "prod.demo"]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          - s3:
              bucket: s3://customer-account-info
              object_count_downloaded: 0
              prefixes: '["/transactions", "/stores"]'
              object_count_total: 6
              prefix: prefix/to/keys
              object_bytes_downloaded: 5
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 1
              region: us-west-2
            snowflake:
              schema: PUBLIC
              database: NASDAQ
              warehouse: COMPUTE_XL
              table_name: COMPANIES
              status:
                state: EXPORTING_TO_S3
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '["c1", "c2", "c3"]'
                columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              postgres_dms: true
              json: true
              mssql_dms: true
              oracle_dms: true
              mysql_dms: true
              avro: '{}'
            azure_blob_storage:
              container: server-logs
              prefix: prefix/to/blobs
              pattern: prefix/to/**/keys/*.format
              blob_count_total: 2
              blob_bytes_total: 4
              blob_count_downloaded: 3
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              offset_reset_policy: EARLIEST
              aws_region: us-east-2
              stream_name: click_stream
              dms_primary_key:
              - dms_primary_key
              - dms_primary_key
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              current_status:
                initial_dump_completion_percentage: 0.73
                stream_last_processed_at: 2019-01-15T21:48:23Z
                state: PROCESSING_STREAM
              use_scan_api: true
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            integration_name: aws-integration
            azure_event_hubs:
              offset_reset_policy: EARLIEST
              hub_id: event-hub-1
              status:
                partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            gcs:
              bucket: server-logs
              object_count_downloaded: 5
              object_count_total: 2
              prefix: prefix/to/keys
              object_bytes_downloaded: 9
              pattern: prefix/to/**/keys/*.format
              object_bytes_total: 7
            kafka:
              offset_reset_policy: EARLIEST
              consumer_group_id: org-collection
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                kafka_partitions:
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                - partition_offset: 100
                  partition_number: 123
                  offset_lag: 10
                state: ACTIVE
              use_v3: true
            azure_service_bus:
              topic: rockset-topic
              subscription: rockset-subscription
              status:
                sessions:
                  key:
                    sequence_number: 323862
                    last_processed: 2022-08-23T00:13:41Z
                first_processed_at: 2021-08-28T00:23:41Z
                records_processed: 1000
            id: a1df483c-734e-485b-8005-f46386ef42f6
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_processed_at: 2019-01-15T21:48:23Z
              detected_size_bytes: 7
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
          insert_only: true
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          - keys: '["value1", "value2"]'
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: SKIP
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: SKIP
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            bulk_bytes_inserted: 1
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
            bulk_bytes_overwritten: 1
          read_only: true
          bulk_stats:
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          - transformation_compute_ms: 50000
            index_compute_ms: 100000
            indexing_stage_done_at: 2001-08-28T00:23:41Z
            data_downloaded_bytes: 10000000
            pre_index_size_bytes: 8000000
            data_indexed_bytes: 8000000
            total_index_size_bytes: 10000000
            data_indexed_throughput_bytes: 800000.5
            downloading_stage_done_at: 2001-08-28T00:23:41Z
            started_at: 2001-08-28T00:23:41Z
            provisioning_stage_done_at: 2001-08-28T00:23:41Z
            download_compute_ms: 50000
            documents_downloaded: 10000
            initializing_stage_done_at: 2001-08-28T00:23:41Z
            finalizing_stage_done_at: 2001-08-28T00:23:41Z
          retention_secs: 2592000
          name: global-transactions
          status: READY
      properties:
        data:
          description: List of all collections.
          items:
            $ref: '#/components/schemas/Collection'
          type: array
      type: object
    ListIntegrationsResponse:
      example:
        data:
        - owner_email: abc@rockset.com
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          snowflake:
            user_role: user_role
            snowflake_url: acme-marketing-test-account.snowflakecomputing.com
            password: password
            default_warehouse: default_warehouse
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            s3_export_path: s3://bucket/prefix
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            username: username
          azure_blob_storage:
            connection_string: |-
              BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
              SharedAccessSignature=<KeyValue>
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          dynamodb:
            s3_export_bucket_name: s3_export_bucket_name
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          azure_event_hubs:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          collections:
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          kafka:
            source_status_by_topic: '{"topic-a": "DORMANT"}'
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            schema_registry_config:
              secret: secret
              url: url
              key: key
            security_config:
              api_key: api_key
              secret: secret
            kafka_data_format: JSON
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            bootstrap_servers: localhost:9092
            connection_string: connection_string
            use_v3: true
          name: event-logs
          azure_service_bus:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
        - owner_email: abc@rockset.com
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          snowflake:
            user_role: user_role
            snowflake_url: acme-marketing-test-account.snowflakecomputing.com
            password: password
            default_warehouse: default_warehouse
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            s3_export_path: s3://bucket/prefix
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            username: username
          azure_blob_storage:
            connection_string: |-
              BlobEndpoint=https://<NamespaceName>.blob.core.windows.net;
              SharedAccessSignature=<KeyValue>
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          dynamodb:
            s3_export_bucket_name: s3_export_bucket_name
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
          azure_event_hubs:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          collections:
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          - field_mapping_query:
              sql: sql
            workspace: commons
            aliases:
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '["commons.foo", "prod.demo"]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            - s3:
                bucket: s3://customer-account-info
                object_count_downloaded: 0
                prefixes: '["/transactions", "/stores"]'
                object_count_total: 6
                prefix: prefix/to/keys
                object_bytes_downloaded: 5
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 1
                region: us-west-2
              snowflake:
                schema: PUBLIC
                database: NASDAQ
                warehouse: COMPUTE_XL
                table_name: COMPANIES
                status:
                  state: EXPORTING_TO_S3
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '["c1", "c2", "c3"]'
                  columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                postgres_dms: true
                json: true
                mssql_dms: true
                oracle_dms: true
                mysql_dms: true
                avro: '{}'
              azure_blob_storage:
                container: server-logs
                prefix: prefix/to/blobs
                pattern: prefix/to/**/keys/*.format
                blob_count_total: 2
                blob_bytes_total: 4
                blob_count_downloaded: 3
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                offset_reset_policy: EARLIEST
                aws_region: us-east-2
                stream_name: click_stream
                dms_primary_key:
                - dms_primary_key
                - dms_primary_key
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                current_status:
                  initial_dump_completion_percentage: 0.73
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  state: PROCESSING_STREAM
                use_scan_api: true
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              integration_name: aws-integration
              azure_event_hubs:
                offset_reset_policy: EARLIEST
                hub_id: event-hub-1
                status:
                  partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              gcs:
                bucket: server-logs
                object_count_downloaded: 5
                object_count_total: 2
                prefix: prefix/to/keys
                object_bytes_downloaded: 9
                pattern: prefix/to/**/keys/*.format
                object_bytes_total: 7
              kafka:
                offset_reset_policy: EARLIEST
                consumer_group_id: org-collection
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  kafka_partitions:
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  - partition_offset: 100
                    partition_number: 123
                    offset_lag: 10
                  state: ACTIVE
                use_v3: true
              azure_service_bus:
                topic: rockset-topic
                subscription: rockset-subscription
                status:
                  sessions:
                    key:
                      sequence_number: 323862
                      last_processed: 2022-08-23T00:13:41Z
                  first_processed_at: 2021-08-28T00:23:41Z
                  records_processed: 1000
              id: a1df483c-734e-485b-8005-f46386ef42f6
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_processed_at: 2019-01-15T21:48:23Z
                detected_size_bytes: 7
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
            insert_only: true
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            - keys: '["value1", "value2"]'
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: SKIP
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: SKIP
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              bulk_bytes_inserted: 1
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
              bulk_bytes_overwritten: 1
            read_only: true
            bulk_stats:
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            - transformation_compute_ms: 50000
              index_compute_ms: 100000
              indexing_stage_done_at: 2001-08-28T00:23:41Z
              data_downloaded_bytes: 10000000
              pre_index_size_bytes: 8000000
              data_indexed_bytes: 8000000
              total_index_size_bytes: 10000000
              data_indexed_throughput_bytes: 800000.5
              downloading_stage_done_at: 2001-08-28T00:23:41Z
              started_at: 2001-08-28T00:23:41Z
              provisioning_stage_done_at: 2001-08-28T00:23:41Z
              download_compute_ms: 50000
              documents_downloaded: 10000
              initializing_stage_done_at: 2001-08-28T00:23:41Z
              finalizing_stage_done_at: 2001-08-28T00:23:41Z
            retention_secs: 2592000
            name: global-transactions
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          kafka:
            source_status_by_topic: '{"topic-a": "DORMANT"}'
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            schema_registry_config:
              secret: secret
              url: url
              key: key
            security_config:
              api_key: api_key
              secret: secret
            kafka_data_format: JSON
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
              aws_external_id: external id of aws
            bootstrap_servers: localhost:9092
            connection_string: connection_string
            use_v3: true
          name: event-logs
          azure_service_bus:
            connection_string: Endpoint=sb://<NamespaceName>.servicebus.windows.net/;SharedAccessKeyName=<KeyName>;SharedAccessKey=<KeyValue>
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          description: List of integration objects.
          items:
            $ref: '#/components/schemas/Integration'
          type: array
      type: object
    ListQueriesResponse:
      example:
        data:
        - last_offset: last_offset
          executed_by: xyz@rockset.com
          expires_at: 2001-08-28T00:23:41Z
          pagination:
            start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          query_id: 5b596206-c632-4a08-8343-0c560f7ef7f1
          query_errors:
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          submitted_at: 2001-08-28T00:23:41Z
          stats:
            throttled_time_ms: 16
            result_set_bytes_size: 1235
            elapsed_time_ms: 128
            result_set_document_count: 1235
          status: RUNNING
        - last_offset: last_offset
          executed_by: xyz@rockset.com
          expires_at: 2001-08-28T00:23:41Z
          pagination:
            start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          query_id: 5b596206-c632-4a08-8343-0c560f7ef7f1
          query_errors:
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          - status_code: 429
            type: ResourceExceeded
            message: Too many rows
          submitted_at: 2001-08-28T00:23:41Z
          stats:
            throttled_time_ms: 16
            result_set_bytes_size: 1235
            elapsed_time_ms: 128
            result_set_document_count: 1235
          status: RUNNING
      properties:
        data:
          items:
            $ref: '#/components/schemas/QueryInfo'
          type: array
      type: object
    ListQueryLambdaTagsResponse:
      example:
        data:
        - tag_name: production
          version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
        - tag_name: production
          version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
      properties:
        data:
          description: List of all tags associated with a Query Lambda.
          items:
            $ref: '#/components/schemas/QueryLambdaTag'
          type: array
      type: object
    ListQueryLambdaVersionsResponse:
      example:
        data:
        - workspace: commons
          public_access_id: public_access_id
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
        - workspace: commons
          public_access_id: public_access_id
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        data:
          description: List of all versions for a particular Query Lambda.
          items:
            $ref: '#/components/schemas/QueryLambdaVersion'
          type: array
      type: object
    ListQueryLambdasResponse:
      example:
        data:
        - workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
        - workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
      properties:
        data:
          description: List of all Query Lambdas.
          items:
            $ref: '#/components/schemas/QueryLambda'
          type: array
      type: object
    ListRolesResponse:
      example:
        data:
        - role_name: read_write
          owner_email: hello@rockset.com
          privileges:
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          description: Role with read and write privileges to all collections.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
        - role_name: read_write
          owner_email: hello@rockset.com
          privileges:
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          description: Role with read and write privileges to all collections.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
      properties:
        data:
          description: List of all roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
      type: object
    ListUnsubscribePreferencesResponse:
      example:
        data:
        - notificationType: create_apikey
        - notificationType: create_apikey
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: '#/components/schemas/UnsubscribePreference'
          type: array
      type: object
    ListUsersResponse:
      example:
        data:
        - roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          state: ACTIVE
          first_name: John
          email: hello@rockset.com
        - roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          state: ACTIVE
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          description: List of users.
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    ListViewsResponse:
      example:
        data:
        - owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        - owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          description: List of all views.
          items:
            $ref: '#/components/schemas/View'
          type: array
      type: object
    ListVirtualInstancesResponse:
      example:
        data:
        - default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
        - default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          description: List of all virtual instances.
          items:
            $ref: '#/components/schemas/VirtualInstance'
          type: array
      type: object
    ListWorkspacesResponse:
      example:
        data:
        - name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
        - name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          description: List of workspaces.
          items:
            $ref: '#/components/schemas/Workspace'
          type: array
      type: object
    MongoDbIntegration:
      example:
        connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        connection_uri:
          description: MongoDB connection URI string.
          example: mongodb+srv://<username>:<password>@server.example.com/
          type: string
      required:
      - connection_uri
      type: object
    Organization:
      description: An organization in Rockset is a container for users and collections.
      example:
        created_at: 2001-08-28T00:23:41Z
        external_id: <hash>
        id: rockset
        rockset_user: <id>
        display_name: Rockset, Inc
        clusters: '[{ ... }]'
      properties:
        id:
          description: Unique identifier for the organization.
          example: rockset
          type: string
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        display_name:
          description: Name of the organization.
          example: Rockset, Inc
          type: string
        external_id:
          description: Organization's unique external ID within Rockset.
          example: <hash>
          type: string
        rockset_user:
          description: Rockset's global AWS user.
          example: <id>
          type: string
        clusters:
          description: List of clusters associated with this org.
          example: '[{ ... }]'
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
      type: object
    OrganizationResponse:
      example:
        data:
          created_at: 2001-08-28T00:23:41Z
          external_id: <hash>
          id: rockset
          rockset_user: <id>
          display_name: Rockset, Inc
          clusters: '[{ ... }]'
      properties:
        data:
          $ref: '#/components/schemas/Organization'
      type: object
    OutputField:
      example:
        on_error: SKIP
        value:
          sql: SHA256()
        field_name: zip_hash
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name.
          example: zip_hash
          type: string
        value:
          $ref: '#/components/schemas/SqlExpression'
        on_error:
          description: 'Error in Mapping execution: ''skip'' or ''fail''.'
          enum:
          - SKIP
          - FAIL
          example: SKIP
          type: string
      type: object
    Pagination:
      example:
        start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
      properties:
        start_cursor:
          description: Use this cursor to fetch the first page of results for this
            query.
          example: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
          type: string
      type: object
    PaginationInfo:
      example:
        current_page_doc_count: 1000
        next_cursor: testnextcursor
        next_cursor_offset: 2000
        start_cursor: startcursor
        next_page_link: https://api.rs2.usw2.rockset.com/....
      properties:
        current_page_doc_count:
          description: Number of documents returned in this result set.
          example: 1000
          format: int64
          type: integer
        next_cursor_offset:
          description: The doc offset that next_cursor starts at.
          example: 2000
          format: int64
          type: integer
        start_cursor:
          description: Cursor used to retrieve the first set of documents.
          example: startcursor
          type: string
        next_cursor:
          description: Cursor to use to get the list of documents.
          example: testnextcursor
          type: string
        next_page_link:
          description: Direct link to the next page of results.
          example: https://api.rs2.usw2.rockset.com/....
          readOnly: true
          type: string
      type: object
    PatchDocument:
      example:
        patch:
        - op: ADD
          path: /foo/bar
          from: from
          value: baz
        - op: ADD
          path: /foo/bar
          from: from
          value: baz
        _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
      properties:
        _id:
          description: Unique ID of the document to be patched.
          example: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
          type: string
        patch:
          description: List of patch operations.
          items:
            $ref: '#/components/schemas/PatchOperation'
          type: array
      required:
      - _id
      - patch
      type: object
    PatchDocumentsRequest:
      example:
        data:
        - patch:
          - op: ADD
            path: /foo/bar
            from: from
            value: baz
          - op: ADD
            path: /foo/bar
            from: from
            value: baz
          _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
        - patch:
          - op: ADD
            path: /foo/bar
            from: from
            value: baz
          - op: ADD
            path: /foo/bar
            from: from
            value: baz
          _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
      properties:
        data:
          description: List of patches to be applied.
          items:
            $ref: '#/components/schemas/PatchDocument'
          type: array
      required:
      - data
      type: object
    PatchDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            query_id: query_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: INVALIDINPUT
          status: ADDED
      properties:
        data:
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      required:
      - data
      type: object
    PatchOperation:
      example:
        op: ADD
        path: /foo/bar
        from: from
        value: baz
      properties:
        op:
          description: '[JSON Patch operation](https://datatracker.ietf.org/doc/html/rfc6902#page-4)
            to be performed in this patch. Case insensitive.'
          enum:
          - ADD
          - REPLACE
          - REMOVE
          - COPY
          - MOVE
          - TEST
          - INCREMENT
          example: ADD
          type: string
        path:
          description: '[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document where the operation is performed'
          example: /foo/bar
          type: string
        value:
          description: Value used in the patch operation. Required for `ADD`, `REPLACE`,
            `TEST`, and `INCREMENT` operations.
          example: baz
          properties: {}
          type: object
        from:
          description: '[JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901)
            referencing a location in the target document. Required for `COPY` and
            `MOVE` operations.'
          type: string
      required:
      - op
      - path
      type: object
    Privilege:
      example:
        cluster: '*ALL*'
        action: CREATE_COLLECTION_WS
        resource_name: commons
      properties:
        action:
          description: The action allowed by this privilege.
          enum:
          - ALL_GLOBAL_ACTIONS
          - GET_ORG_GLOBAL
          - GET_CURRENT_USER_GLOBAL
          - INVITE_USER_GLOBAL
          - DELETE_USER_GLOBAL
          - LIST_USERS_GLOBAL
          - GET_BILLING_GLOBAL
          - UPDATE_BILLING_GLOBAL
          - UPDATE_SETTINGS_GLOBAL
          - GET_METRICS_GLOBAL
          - CREATE_VI_GLOBAL
          - UPDATE_VI_GLOBAL
          - LIST_VI_GLOBAL
          - CREATE_WS_GLOBAL
          - LIST_WS_GLOBAL
          - CREATE_INTEGRATION_GLOBAL
          - DELETE_INTEGRATION_GLOBAL
          - LIST_INTEGRATIONS_GLOBAL
          - UPDATE_RESOURCE_OWNER_GLOBAL
          - CREATE_API_KEY_GLOBAL
          - CREATE_ROLE_GLOBAL
          - UPDATE_ROLE_GLOBAL
          - DELETE_ROLE_GLOBAL
          - LIST_ROLES_GLOBAL
          - GRANT_REVOKE_ROLE_GLOBAL
          - ALL_INTEGRATION_ACTIONS
          - CREATE_COLLECTION_INTEGRATION
          - ALL_WORKSPACE_ACTIONS
          - DELETE_WS
          - QUERY_DATA_WS
          - WRITE_DATA_WS
          - CREATE_COLLECTION_WS
          - DELETE_COLLECTION_WS
          - CREATE_ALIAS_WS
          - DELETE_ALIAS_WS
          - LIST_RESOURCES_WS
          - CREATE_QUERY_LAMBDA_WS
          - DELETE_QUERY_LAMBDA_WS
          - EXECUTE_QUERY_LAMBDA_WS
          - CREATE_SCHEDULED_LAMBDA_WS
          - DELETE_SCHEDULED_LAMBDA_WS
          - CREATE_VIEW_WS
          - DELETE_VIEW_WS
          - ALL_VI_ACTIONS
          - QUERY_VI
          - UPDATE_VI
          - SUSPEND_RESUME_VI
          - DELETE_VI
          example: CREATE_COLLECTION_WS
          type: string
        resource_name:
          description: The resources on which the action is allowed. Defaults to '*All*'
            if not specified.
          example: commons
          type: string
        cluster:
          description: Cluster ID (`usw2a1` for us-west-2, `use1a1` for us-east-1,
            `euc1a1` for eu-central-1) for which the action is allowed. Defaults to
            '*All*' if not specified.
          example: '*ALL*'
          type: string
      type: object
    QueryError:
      example:
        status_code: 429
        type: ResourceExceeded
        message: Too many rows
      properties:
        type:
          description: The type of error.
          example: ResourceExceeded
          type: string
        message:
          description: A message associated with the error, containing more information
            about it.
          example: Too many rows
          type: string
        status_code:
          description: The HTTP status code associated with this error, had it been
            sent as the response status code
          example: 429
          format: int32
          type: integer
      type: object
    QueryFieldType:
      example:
        name: _id
        type: string
      properties:
        name:
          description: Name of the field.
          example: _id
          type: string
        type:
          description: Data type of the field.
          example: string
          type: string
      required:
      - name
      - type
      type: object
    QueryInfo:
      example:
        last_offset: last_offset
        executed_by: xyz@rockset.com
        expires_at: 2001-08-28T00:23:41Z
        pagination:
          start_cursor: vZNDIBi_E_cIwjo8ZbFl7XcxXxd4VfwjB7Q5CF6tplw0RqNgyG7q4sPuHUTBhYnrg
        query_id: 5b596206-c632-4a08-8343-0c560f7ef7f1
        query_errors:
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        submitted_at: 2001-08-28T00:23:41Z
        stats:
          throttled_time_ms: 16
          result_set_bytes_size: 1235
          elapsed_time_ms: 128
          result_set_document_count: 1235
        status: RUNNING
      properties:
        query_id:
          description: Unique Query ID.
          example: 5b596206-c632-4a08-8343-0c560f7ef7f1
          type: string
        status:
          description: Status of the query.
          enum:
          - QUEUED
          - RUNNING
          - COMPLETED
          - ERROR
          - CANCELLED
          example: RUNNING
          type: string
        executed_by:
          description: User ID who executed the query.
          example: xyz@rockset.com
          type: string
        submitted_at:
          description: Time (UTC) the query request was first received and queued
            for execution.
          example: 2001-08-28T00:23:41Z
          type: string
        expires_at:
          description: Time (UTC) that query results expire. Only populated if `status`
            is `COMPLETE`.
          example: 2001-08-28T00:23:41Z
          type: string
        stats:
          $ref: '#/components/schemas/Stats'
        pagination:
          $ref: '#/components/schemas/Pagination'
        last_offset:
          description: The log offset that query results were written to in the destination
            collection. Only populated for INSERT INTO queries.
          type: string
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: '#/components/schemas/QueryError'
          type: array
      type: object
    QueryLambda:
      example:
        workspace: commons
        last_updated_by: ..@rockset.com
        last_updated: 2001-08-28T00:23:41Z
        latest_version:
          workspace: commons
          public_access_id: public_access_id
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
        collections:
        - collections
        - collections
        name: myQuery
        version_count: 1
      properties:
        workspace:
          description: Workspace of this Query Lambda.
          example: commons
          type: string
        last_updated_by:
          description: User that created this Query Lambda.
          example: ..@rockset.com
          type: string
        last_updated:
          description: ISO-8601 date of when Query Lambda was last updated.
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: Query Lambda name.
          example: myQuery
          type: string
        version_count:
          description: Number of Query Lambda versions.
          example: 1
          format: int32
          type: integer
        collections:
          description: Collections/aliases queried by underlying SQL query.
          items:
            type: string
          type: array
        latest_version:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryLambdaSql:
      example:
        default_parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
        query: SELECT 'Foo'
      properties:
        query:
          description: SQL text.
          example: SELECT 'Foo'
          type: string
        default_parameters:
          description: Default parameters for this Query Lambda.
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
      required:
      - query
      type: object
    QueryLambdaStats:
      example:
        last_executed_by: '...@rockset.com'
        last_execution_error_message: '[error message]'
        last_execution_error: 2001-08-28T00:23:41Z
        last_executed: 2001-08-28T00:23:41Z
      properties:
        last_executed:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        last_executed_by:
          description: User who last executed Query Lambda.
          example: '...@rockset.com'
          type: string
        last_execution_error:
          description: ISO-8601 date of last execution failure.
          example: 2001-08-28T00:23:41Z
          type: string
        last_execution_error_message:
          description: Error message associated with last failed execution.
          example: '[error message]'
          type: string
      type: object
    QueryLambdaTag:
      example:
        tag_name: production
        version:
          workspace: commons
          public_access_id: public_access_id
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        tag_name:
          description: Name of Query Lambda tag.
          example: production
          type: string
        version:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryLambdaTagResponse:
      example:
        data:
          tag_name: production
          version:
            workspace: commons
            public_access_id: public_access_id
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
      properties:
        data:
          $ref: '#/components/schemas/QueryLambdaTag'
      type: object
    QueryLambdaVersion:
      example:
        workspace: commons
        public_access_id: public_access_id
        collections:
        - collections
        - collections
        stats:
          last_executed_by: '...@rockset.com'
          last_execution_error_message: '[error message]'
          last_execution_error: 2001-08-28T00:23:41Z
          last_executed: 2001-08-28T00:23:41Z
        name: myQuery
        created_at: 2001-08-28T00:23:41Z
        description: production version foo
        state: ACTIVE
        created_by: ..@rockset.com
        version: acb99feg92bcaf
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        workspace:
          description: Workspace of this Query Lambda.
          example: commons
          type: string
        created_by:
          description: User that created this Query Lambda.
          example: ..@rockset.com
          type: string
        created_at:
          description: ISO-8601 date of when Query Lambda was created.
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: Query Lambda name.
          example: myQuery
          type: string
        version:
          description: Query Lambda version.
          example: acb99feg92bcaf
          type: string
        description:
          description: Optional description.
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
        collections:
          description: Collections queried by underlying SQL query.
          items:
            type: string
          type: array
        state:
          description: Status of this Query Lambda.
          enum:
          - ACTIVE
          - INVALID_SQL
          example: ACTIVE
          type: string
        stats:
          $ref: '#/components/schemas/QueryLambdaStats'
        public_access_id:
          description: Public access ID associated with this QL version
          type: string
      type: object
    QueryLambdaVersionResponse:
      example:
        data:
          workspace: commons
          public_access_id: public_access_id
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        data:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryPaginationResponse:
      example:
        pagination:
          current_page_doc_count: 1000
          next_cursor: testnextcursor
          next_cursor_offset: 2000
          start_cursor: startcursor
          next_page_link: https://api.rs2.usw2.rockset.com/....
        results_total_doc_count: 0
        results:
        - '{}'
        - '{}'
      properties:
        results:
          description: List of documents returned by the query.
          items:
            properties: {}
            type: object
          type: array
        results_total_doc_count:
          description: Total documents returned by the query.
          format: int64
          type: integer
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
    QueryParameter:
      example:
        name: _id
        type: string
        value: 85beb391
      properties:
        name:
          description: Name of the field.
          example: _id
          type: string
        type:
          description: Data type of the field.
          example: string
          type: string
        value:
          description: Literal value of the field.
          example: 85beb391
          type: string
      required:
      - name
      - type
      - value
      type: object
    QueryRequest:
      example:
        async_options:
          max_initial_results: 5
          client_timeout_ms: 1
          timeout_ms: 5
        sql:
          generate_warnings: false
          query: SELECT * FROM foo where _id = :_id
          initial_paginate_response_doc_count: 6
          default_row_limit: 0
          parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
      properties:
        sql:
          $ref: '#/components/schemas/QueryRequestSql'
        async_options:
          $ref: '#/components/schemas/AsyncQueryOptions'
      required:
      - sql
      type: object
    QueryRequestSql:
      example:
        generate_warnings: false
        query: SELECT * FROM foo where _id = :_id
        initial_paginate_response_doc_count: 6
        default_row_limit: 0
        parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
      properties:
        query:
          description: SQL query string.
          example: SELECT * FROM foo where _id = :_id
          type: string
        generate_warnings:
          description: Flag to enable warnings. Warnings can help debug query issues
            but negatively affect performance.
          example: false
          type: boolean
        parameters:
          description: List of named parameters.
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        default_row_limit:
          description: Row limit to use. Limits specified in the query text will override
            this default.
          format: int32
          type: integer
        initial_paginate_response_doc_count:
          description: Number of documents to return in addition to paginating for
            this query call. Only relevant if `paginate` flag is also set.
          format: int32
          type: integer
      required:
      - query
      type: object
    QueryResponse:
      example:
        last_offset: last_offset
        pagination:
          current_page_doc_count: 1000
          next_cursor: testnextcursor
          next_cursor_offset: 2000
          start_cursor: startcursor
          next_page_link: https://api.rs2.usw2.rockset.com/....
        query_id: query_id
        query_errors:
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        collections:
        - collections
        - collections
        stats:
          throttled_time_micros: 126
          elapsed_time_ms: 126
        warnings:
        - warnings
        - warnings
        query_lambda_path: query_lambda_path
        results_total_doc_count: 0
        column_fields:
        - name: _id
          type: string
        - name: _id
          type: string
        results:
        - '{}'
        - '{}'
      properties:
        query_id:
          description: Unique ID for this query.
          type: string
        collections:
          description: List of collections referenced in the query.
          items:
            type: string
          type: array
        results:
          description: Results from the query.
          items:
            properties: {}
            type: object
          type: array
        stats:
          $ref: '#/components/schemas/QueryResponseStats'
        warnings:
          description: Warnings generated by the query. Only populated if `generate_warnings`
            is specified in the query request.
          items:
            type: string
          type: array
        query_lambda_path:
          description: The full path of the executed query lambda. Includes version
            information.
          type: string
        query_errors:
          description: Errors encountered while executing the query.
          items:
            $ref: '#/components/schemas/QueryError'
          type: array
        column_fields:
          description: Meta information about each column in the result set. Not populated
            in `SELECT *` queries.
          items:
            $ref: '#/components/schemas/QueryFieldType'
          type: array
        results_total_doc_count:
          description: Number of results generated by the query.
          format: int64
          type: integer
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        last_offset:
          description: If this was a write query, this is the log offset the query
            was written to.
          type: string
      type: object
    QueryResponseStats:
      example:
        throttled_time_micros: 126
        elapsed_time_ms: 126
      properties:
        elapsed_time_ms:
          description: Query time in milliseconds.
          example: 126
          format: int64
          type: integer
        throttled_time_micros:
          description: Time query was throttled by admission control.
          example: 126
          format: int64
          type: integer
      type: object
    ResumeVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    Role:
      example:
        role_name: read_write
        owner_email: hello@rockset.com
        privileges:
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        description: Role with read and write privileges to all collections.
        created_at: 2001-08-28T00:23:41Z
        created_by: hello@rockset.com
      properties:
        role_name:
          description: Unique identifier for the role.
          example: read_write
          type: string
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        owner_email:
          description: Email of the user who currently owns the role.
          example: hello@rockset.com
          type: string
        created_by:
          description: Email of the user who created the role.
          example: hello@rockset.com
          type: string
        privileges:
          description: List of privileges associated with the role.
          items:
            $ref: '#/components/schemas/Privilege'
          type: array
        created_at:
          description: ISO-8601 date of when the role was created.
          example: 2001-08-28T00:23:41Z
          type: string
      type: object
    RoleResponse:
      example:
        data:
          role_name: read_write
          owner_email: hello@rockset.com
          privileges:
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          - cluster: '*ALL*'
            action: CREATE_COLLECTION_WS
            resource_name: commons
          description: Role with read and write privileges to all collections.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Role'
      type: object
    S3Integration:
      example:
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          aws_external_id: external id of aws
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
      type: object
    SchemaRegistryConfig:
      example:
        secret: secret
        url: url
        key: key
      properties:
        url:
          description: Schema registry URL.
          type: string
        key:
          description: The secure API key for schema registry.
          type: string
        secret:
          description: The secure API password registry.
          type: string
      type: object
    SnowflakeIntegration:
      example:
        user_role: user_role
        snowflake_url: acme-marketing-test-account.snowflakecomputing.com
        password: password
        default_warehouse: default_warehouse
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        s3_export_path: s3://bucket/prefix
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          aws_external_id: external id of aws
        username: username
      properties:
        snowflake_url:
          description: Snowflake browser url.
          example: acme-marketing-test-account.snowflakecomputing.com
          type: string
        username:
          description: Snowflake database username.
          type: string
        password:
          description: Snowflake database password.
          type: string
        user_role:
          description: Snowflake user role. If unspecified, will use the default user
            role.
          type: string
        aws_role:
          $ref: '#/components/schemas/AwsRole'
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        default_warehouse:
          description: default snowflake data warehouse name for query execution.
            Warehouse name can be overridden in the collection.
          type: string
        s3_export_path:
          description: S3 path used for running 'COPY INTO' command on snowflake table.
          example: s3://bucket/prefix
          type: string
      required:
      - default_warehouse
      - password
      - s3_export_path
      - snowflake_url
      - username
      type: object
    Source:
      description: 'Details about the data source for the given collection. Only one
        of the following fields are allowed to be defined. Only collections can act
        as data sources for views. '
      example:
        s3:
          bucket: s3://customer-account-info
          object_count_downloaded: 0
          prefixes: '["/transactions", "/stores"]'
          object_count_total: 6
          prefix: prefix/to/keys
          object_bytes_downloaded: 5
          pattern: prefix/to/**/keys/*.format
          object_bytes_total: 1
          region: us-west-2
        snowflake:
          schema: PUBLIC
          database: NASDAQ
          warehouse: COMPUTE_XL
          table_name: COMPANIES
          status:
            state: EXPORTING_TO_S3
        format_params:
          xml:
            attribute_prefix: _attr
            doc_tag: row
            encoding: UTF-8
            value_tag: value
            root_tag: root
          csv:
            quoteChar: '"'
            escapeChar: \
            columnNames: '["c1", "c2", "c3"]'
            columnTypes: '["BOOLEAN", "INTEGER", "FLOAT", "STRING"]'
            firstLineAsColumnNames: true
            encoding: UTF-8
            separator: ','
          postgres_dms: true
          json: true
          mssql_dms: true
          oracle_dms: true
          mysql_dms: true
          avro: '{}'
        azure_blob_storage:
          container: server-logs
          prefix: prefix/to/blobs
          pattern: prefix/to/**/keys/*.format
          blob_count_total: 2
          blob_bytes_total: 4
          blob_count_downloaded: 3
        file_upload:
          file_name: file1.json
          file_size: 12345
          file_upload_time: 2019-01-15T21:48:23Z
        kinesis:
          offset_reset_policy: EARLIEST
          aws_region: us-east-2
          stream_name: click_stream
          dms_primary_key:
          - dms_primary_key
          - dms_primary_key
        dynamodb:
          aws_region: us-east-2
          rcu: 1000
          current_status:
            initial_dump_completion_percentage: 0.73
            stream_last_processed_at: 2019-01-15T21:48:23Z
            state: PROCESSING_STREAM
          use_scan_api: true
          table_name: dynamodb_table_name
          status:
            scan_total_records: 2000
            stream_last_processed_at: 2019-01-15T21:48:23Z
            scan_start_time: 2001-08-28T00:23:41Z
            scan_end_time: 2001-08-28T00:23:41Z
            scan_records_processed: 1000
            state: SCANNING_TABLE
        integration_name: aws-integration
        azure_event_hubs:
          offset_reset_policy: EARLIEST
          hub_id: event-hub-1
          status:
            partitions:
            - partition_offset: 100
              partition_number: 123
              offset_lag: 10
            - partition_offset: 100
              partition_number: 123
              offset_lag: 10
            num_documents_processed: 1337
            last_consumed_time: 2001-08-28T00:23:41Z
            state: ACTIVE
        gcs:
          bucket: server-logs
          object_count_downloaded: 5
          object_count_total: 2
          prefix: prefix/to/keys
          object_bytes_downloaded: 9
          pattern: prefix/to/**/keys/*.format
          object_bytes_total: 7
        kafka:
          offset_reset_policy: EARLIEST
          consumer_group_id: org-collection
          kafka_topic_name: example-topic
          status:
            num_documents_processed: 1337
            last_consumed_time: 2001-08-28T00:23:41Z
            kafka_partitions:
            - partition_offset: 100
              partition_number: 123
              offset_lag: 10
            - partition_offset: 100
              partition_number: 123
              offset_lag: 10
            state: ACTIVE
          use_v3: true
        azure_service_bus:
          topic: rockset-topic
          subscription: rockset-subscription
          status:
            sessions:
              key:
                sequence_number: 323862
                last_processed: 2022-08-23T00:13:41Z
            first_processed_at: 2021-08-28T00:23:41Z
            records_processed: 1000
        id: a1df483c-734e-485b-8005-f46386ef42f6
        mongodb:
          database_name: my_database
          collection_name: my_collection
          status:
            scan_total_records: 2000
            stream_records_deleted: 100
            stream_records_inserted: 10000
            stream_records_updated: 1000
            scan_start_time: 2001-08-28T00:23:41Z
            stream_last_update_processed_at: 2019-01-15T21:48:23Z
            stream_last_delete_processed_at: 2019-01-15T21:48:23Z
            scan_end_time: 2001-08-28T00:23:41Z
            stream_last_insert_processed_at: 2019-01-15T21:48:23Z
            scan_records_processed: 1000
            state: SCANNING_TABLE
        status:
          last_processed_item: /path/to/some/object
          last_processed_at: 2019-01-15T21:48:23Z
          detected_size_bytes: 7
          total_processed_items: 32849023
          state: INITIALIZING
          message: error 403 forbidden
      properties:
        id:
          description: Unique source identifier.
          example: a1df483c-734e-485b-8005-f46386ef42f6
          type: string
        integration_name:
          description: Name of integration to use.
          example: aws-integration
          type: string
        s3:
          $ref: '#/components/schemas/SourceS3'
        kinesis:
          $ref: '#/components/schemas/SourceKinesis'
        gcs:
          $ref: '#/components/schemas/SourceGcs'
        azure_blob_storage:
          $ref: '#/components/schemas/SourceAzureBlobStorage'
        azure_service_bus:
          $ref: '#/components/schemas/SourceAzureServiceBus'
        azure_event_hubs:
          $ref: '#/components/schemas/SourceAzureEventHubs'
        dynamodb:
          $ref: '#/components/schemas/SourceDynamoDb'
        file_upload:
          $ref: '#/components/schemas/SourceFileUpload'
        kafka:
          $ref: '#/components/schemas/SourceKafka'
        mongodb:
          $ref: '#/components/schemas/SourceMongoDb'
        snowflake:
          $ref: '#/components/schemas/SourceSnowflake'
        status:
          $ref: '#/components/schemas/Status'
        format_params:
          $ref: '#/components/schemas/FormatParams'
      type: object
    SourceAzureBlobStorage:
      example:
        container: server-logs
        prefix: prefix/to/blobs
        pattern: prefix/to/**/keys/*.format
        blob_count_total: 2
        blob_bytes_total: 4
        blob_count_downloaded: 3
      properties:
        container:
          description: Name of Azure blob Storage container you want to ingest from.
          example: server-logs
          type: string
        prefix:
          description: Prefix that selects blobs to ingest.
          example: prefix/to/blobs
          type: string
        pattern:
          description: Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        blob_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        blob_count_total:
          format: int64
          readOnly: true
          type: integer
        blob_bytes_total:
          format: int64
          readOnly: true
          type: integer
      type: object
    SourceAzureEventHubs:
      example:
        offset_reset_policy: EARLIEST
        hub_id: event-hub-1
        status:
          partitions:
          - partition_offset: 100
            partition_number: 123
            offset_lag: 10
          - partition_offset: 100
            partition_number: 123
            offset_lag: 10
          num_documents_processed: 1337
          last_consumed_time: 2001-08-28T00:23:41Z
          state: ACTIVE
      properties:
        hub_id:
          description: Name of the hub which rockset should ingest from.
          example: event-hub-1
          type: string
        offset_reset_policy:
          description: The offset reset policy.
          enum:
          - LATEST
          - EARLIEST
          example: EARLIEST
          type: string
        status:
          $ref: '#/components/schemas/StatusAzureEventHubs'
      type: object
    SourceAzureServiceBus:
      example:
        topic: rockset-topic
        subscription: rockset-subscription
        status:
          sessions:
            key:
              sequence_number: 323862
              last_processed: 2022-08-23T00:13:41Z
          first_processed_at: 2021-08-28T00:23:41Z
          records_processed: 1000
      properties:
        topic:
          description: Name of the topic which rockset should ingest from.
          example: rockset-topic
          type: string
        subscription:
          description: The subscription to read from the topic.
          example: rockset-subscription
          type: string
        status:
          $ref: '#/components/schemas/StatusAzureServiceBus'
      type: object
    SourceDynamoDb:
      example:
        aws_region: us-east-2
        rcu: 1000
        current_status:
          initial_dump_completion_percentage: 0.73
          stream_last_processed_at: 2019-01-15T21:48:23Z
          state: PROCESSING_STREAM
        use_scan_api: true
        table_name: dynamodb_table_name
        status:
          scan_total_records: 2000
          stream_last_processed_at: 2019-01-15T21:48:23Z
          scan_start_time: 2001-08-28T00:23:41Z
          scan_end_time: 2001-08-28T00:23:41Z
          scan_records_processed: 1000
          state: SCANNING_TABLE
      properties:
        aws_region:
          description: AWS region name of DynamoDB table, by default us-west-2 is
            used.
          example: us-east-2
          type: string
        table_name:
          description: Name of DynamoDB table containing data.
          example: dynamodb_table_name
          type: string
        current_status:
          $ref: '#/components/schemas/StatusDynamoDbV2'
        rcu:
          description: Max RCU usage for scan.
          example: 1000
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/StatusDynamoDb'
        use_scan_api:
          description: Whether to use DynamoDB Scan API for the initial scan.
          type: boolean
      required:
      - table_name
      type: object
    SourceFileUpload:
      example:
        file_name: file1.json
        file_size: 12345
        file_upload_time: 2019-01-15T21:48:23Z
      properties:
        file_name:
          description: Name of the file.
          example: file1.json
          type: string
        file_size:
          description: Size of the file in bytes.
          example: 12345
          format: int64
          type: integer
        file_upload_time:
          description: Time of file upload.
          example: 2019-01-15T21:48:23Z
          type: string
      required:
      - file_name
      - file_size
      - file_upload_time
      type: object
    SourceGcs:
      example:
        bucket: server-logs
        object_count_downloaded: 5
        object_count_total: 2
        prefix: prefix/to/keys
        object_bytes_downloaded: 9
        pattern: prefix/to/**/keys/*.format
        object_bytes_total: 7
      properties:
        bucket:
          description: Name of GCS bucket you want to ingest from.
          example: server-logs
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
        pattern:
          description: Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_bytes_downloaded:
          format: int64
          readOnly: true
          type: integer
      type: object
    SourceKafka:
      example:
        offset_reset_policy: EARLIEST
        consumer_group_id: org-collection
        kafka_topic_name: example-topic
        status:
          num_documents_processed: 1337
          last_consumed_time: 2001-08-28T00:23:41Z
          kafka_partitions:
          - partition_offset: 100
            partition_number: 123
            offset_lag: 10
          - partition_offset: 100
            partition_number: 123
            offset_lag: 10
          state: ACTIVE
        use_v3: true
      properties:
        kafka_topic_name:
          description: The Kafka topic to be tailed.
          example: example-topic
          type: string
        status:
          $ref: '#/components/schemas/StatusKafka'
        consumer_group_id:
          description: The Kafka consumer group Id being used.
          example: org-collection
          type: string
        use_v3:
          description: Whether to use v3 integration.
          type: boolean
        offset_reset_policy:
          description: The offset reset policy.
          enum:
          - LATEST
          - EARLIEST
          example: EARLIEST
          type: string
      type: object
    SourceKinesis:
      example:
        offset_reset_policy: EARLIEST
        aws_region: us-east-2
        stream_name: click_stream
        dms_primary_key:
        - dms_primary_key
        - dms_primary_key
      properties:
        aws_region:
          description: AWS region name of Kinesis stream, by default us-west-2 is
            used.
          example: us-east-2
          type: string
        stream_name:
          description: Name of kinesis stream.
          example: click_stream
          type: string
        dms_primary_key:
          description: Set of fields that correspond to a DMS primary key.
          items:
            type: string
          type: array
        offset_reset_policy:
          description: For non-DMS streams, Rockset can tail from the earliest end
            or latest end of kinesis source.
          enum:
          - LATEST
          - EARLIEST
          example: EARLIEST
          type: string
      required:
      - stream_name
      type: object
    SourceMongoDb:
      example:
        database_name: my_database
        collection_name: my_collection
        status:
          scan_total_records: 2000
          stream_records_deleted: 100
          stream_records_inserted: 10000
          stream_records_updated: 1000
          scan_start_time: 2001-08-28T00:23:41Z
          stream_last_update_processed_at: 2019-01-15T21:48:23Z
          stream_last_delete_processed_at: 2019-01-15T21:48:23Z
          scan_end_time: 2001-08-28T00:23:41Z
          stream_last_insert_processed_at: 2019-01-15T21:48:23Z
          scan_records_processed: 1000
          state: SCANNING_TABLE
      properties:
        database_name:
          description: MongoDB database name containing this collection.
          example: my_database
          type: string
        collection_name:
          description: MongoDB collection name.
          example: my_collection
          type: string
        status:
          $ref: '#/components/schemas/StatusMongoDb'
      required:
      - collection_name
      - database_name
      type: object
    SourceS3:
      example:
        bucket: s3://customer-account-info
        object_count_downloaded: 0
        prefixes: '["/transactions", "/stores"]'
        object_count_total: 6
        prefix: prefix/to/keys
        object_bytes_downloaded: 5
        pattern: prefix/to/**/keys/*.format
        object_bytes_total: 1
        region: us-west-2
      properties:
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
        pattern:
          description: Glob-style pattern that selects keys to ingest. Only either
            prefix or pattern can be specified.
          example: prefix/to/**/keys/*.format
          type: string
        region:
          description: AWS region containing source bucket.
          example: us-west-2
          type: string
        bucket:
          description: Address of S3 bucket containing data.
          example: s3://customer-account-info
          type: string
        prefixes:
          description: List of prefixes to paths from which data should be ingested.
          example: '["/transactions", "/stores"]'
          items:
            type: string
          readOnly: true
          type: array
        object_count_downloaded:
          format: int64
          readOnly: true
          type: integer
        object_count_total:
          format: int64
          readOnly: true
          type: integer
        object_bytes_total:
          format: int64
          readOnly: true
          type: integer
        object_bytes_downloaded:
          format: int64
          readOnly: true
          type: integer
      required:
      - bucket
      - prefixes
      type: object
    SourceSnowflake:
      example:
        schema: PUBLIC
        database: NASDAQ
        warehouse: COMPUTE_XL
        table_name: COMPANIES
        status:
          state: EXPORTING_TO_S3
      properties:
        database:
          description: Name of the snowflake database.
          example: NASDAQ
          type: string
        schema:
          description: Name of the snowflake database schema.
          example: PUBLIC
          type: string
        table_name:
          description: Name of the snowflake table.
          example: COMPANIES
          type: string
        warehouse:
          description: Name of the data warehouse to be used.
          example: COMPUTE_XL
          type: string
        status:
          $ref: '#/components/schemas/StatusSnowflake'
      required:
      - database
      - schema
      - table_name
      type: object
    SqlExpression:
      example:
        sql: SHA256()
      properties:
        sql:
          description: The name of a sql function.
          example: SHA256()
          type: string
      type: object
    Stats:
      example:
        throttled_time_ms: 16
        result_set_bytes_size: 1235
        elapsed_time_ms: 128
        result_set_document_count: 1235
      properties:
        elapsed_time_ms:
          description: Total execution time (including time queued) of the query,
            in milliseconds.
          example: 128
          format: int64
          type: integer
        throttled_time_ms:
          description: Time query spent queued, in milliseconds.
          example: 16
          format: int64
          type: integer
        result_set_document_count:
          description: Number of documents returned by the query. Only populated if
            `status` is `COMPLETE`.
          example: 1235
          format: int64
          type: integer
        result_set_bytes_size:
          description: Number of bytes in the query result set. Only populated if
            `status` is `COMPLETE`. Not populated for INSERT INTO queries.
          example: 1235
          format: int64
          type: integer
      type: object
    Status:
      example:
        last_processed_item: /path/to/some/object
        last_processed_at: 2019-01-15T21:48:23Z
        detected_size_bytes: 7
        total_processed_items: 32849023
        state: INITIALIZING
        message: error 403 forbidden
      properties:
        state:
          description: Status of the Source's ingestion.
          enum:
          - INITIALIZING
          - WATCHING
          - PROCESSING
          - COMPLETED
          - ERROR
          example: INITIALIZING
          type: string
        message:
          description: State message.
          example: error 403 forbidden
          type: string
        last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
        last_processed_item:
          description: Last source item processed by ingester.
          example: /path/to/some/object
          type: string
        total_processed_items:
          description: Total items processed of source.
          example: 32849023
          format: int64
          type: integer
        detected_size_bytes:
          description: Size in bytes detected for the source at collection initialization.
            This size can be 0 or null for event stream sources.
          format: int64
          type: integer
      type: object
    StatusAzureEventHubs:
      example:
        partitions:
        - partition_offset: 100
          partition_number: 123
          offset_lag: 10
        - partition_offset: 100
          partition_number: 123
          offset_lag: 10
        num_documents_processed: 1337
        last_consumed_time: 2001-08-28T00:23:41Z
        state: ACTIVE
      properties:
        state:
          description: State of the source.
          enum:
          - NO_DOCS_YET
          - ACTIVE
          - DORMANT
          example: ACTIVE
          type: string
        last_consumed_time:
          description: Time at which the last document was consumed.
          example: 2001-08-28T00:23:41Z
          type: string
        num_documents_processed:
          description: Number of documents consumed.
          example: 1337
          format: int64
          type: integer
        partitions:
          description: Status info per partition.
          items:
            $ref: '#/components/schemas/StatusAzureEventHubsPartition'
          type: array
      type: object
    StatusAzureEventHubsPartition:
      example:
        partition_offset: 100
        partition_number: 123
        offset_lag: 10
      properties:
        partition_number:
          description: The number of this partition.
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition.
          example: 100
          format: int64
          type: integer
        offset_lag:
          description: Per partition lag for offset.
          example: 10
          format: int64
          type: integer
      type: object
    StatusAzureServiceBus:
      example:
        sessions:
          key:
            sequence_number: 323862
            last_processed: 2022-08-23T00:13:41Z
        first_processed_at: 2021-08-28T00:23:41Z
        records_processed: 1000
      properties:
        first_processed_at:
          description: Service Bus first message processed time in ISO-8601 format.
          example: 2021-08-28T00:23:41Z
          type: string
        records_processed:
          description: Number of records processed.
          example: 1000
          format: int64
          type: integer
        sessions:
          additionalProperties:
            $ref: '#/components/schemas/StatusAzureServiceBusSession'
          description: Sessions processed.
          type: object
      type: object
    StatusAzureServiceBusSession:
      example:
        sequence_number: 323862
        last_processed: 2022-08-23T00:13:41Z
      properties:
        sequence_number:
          description: The last processed sequence number within this session.
          example: 323862
          format: int64
          type: integer
        last_processed:
          description: Most recent ISO-8601 date when a message from this session
            was processed.
          example: 2022-08-23T00:13:41Z
          type: string
      type: object
    StatusDynamoDb:
      example:
        scan_total_records: 2000
        stream_last_processed_at: 2019-01-15T21:48:23Z
        scan_start_time: 2001-08-28T00:23:41Z
        scan_end_time: 2001-08-28T00:23:41Z
        scan_records_processed: 1000
        state: SCANNING_TABLE
      properties:
        scan_start_time:
          description: DynamoDB scan start time.
          example: 2001-08-28T00:23:41Z
          type: string
        scan_end_time:
          description: DynamoDb scan end time.
          example: 2001-08-28T00:23:41Z
          type: string
        scan_records_processed:
          description: Number of records inserted using scan.
          example: 1000
          format: int64
          type: integer
        scan_total_records:
          description: Number of records in DynamoDB table at time of scan.
          example: 2000
          format: int64
          type: integer
        state:
          description: State of current ingest for this table.
          enum:
          - INITIALIZING
          - SCANNING_TABLE
          - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
      type: object
    StatusDynamoDbV2:
      example:
        initial_dump_completion_percentage: 0.73
        stream_last_processed_at: 2019-01-15T21:48:23Z
        state: PROCESSING_STREAM
      properties:
        initial_dump_completion_percentage:
          example: 0.73
          format: double
          type: number
        state:
          description: State of current ingest for this table.
          enum:
          - INITIALIZING
          - SCANNING
          - EXPORTING_TO_S3
          - DOWNLOADING_FROM_S3
          - PROCESSING_STREAM
          example: PROCESSING_STREAM
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
      type: object
    StatusKafka:
      example:
        num_documents_processed: 1337
        last_consumed_time: 2001-08-28T00:23:41Z
        kafka_partitions:
        - partition_offset: 100
          partition_number: 123
          offset_lag: 10
        - partition_offset: 100
          partition_number: 123
          offset_lag: 10
        state: ACTIVE
      properties:
        state:
          description: State of the Kafka source.
          enum:
          - NO_DOCS_YET
          - ACTIVE
          - DORMANT
          example: ACTIVE
          type: string
        last_consumed_time:
          description: Time at which the last document was consumed from Kafka.
          example: 2001-08-28T00:23:41Z
          type: string
        num_documents_processed:
          description: Number of documents consumed by this Kafka topic.
          example: 1337
          format: int64
          type: integer
        kafka_partitions:
          description: Status info per partition.
          items:
            $ref: '#/components/schemas/StatusKafkaPartition'
          type: array
      type: object
    StatusKafkaPartition:
      example:
        partition_offset: 100
        partition_number: 123
        offset_lag: 10
      properties:
        partition_number:
          description: The number of this partition.
          example: 123
          format: int32
          type: integer
        partition_offset:
          description: Latest offset of partition.
          example: 100
          format: int64
          type: integer
        offset_lag:
          description: Per partition lag for offset.
          example: 10
          format: int64
          type: integer
      type: object
    StatusMongoDb:
      example:
        scan_total_records: 2000
        stream_records_deleted: 100
        stream_records_inserted: 10000
        stream_records_updated: 1000
        scan_start_time: 2001-08-28T00:23:41Z
        stream_last_update_processed_at: 2019-01-15T21:48:23Z
        stream_last_delete_processed_at: 2019-01-15T21:48:23Z
        scan_end_time: 2001-08-28T00:23:41Z
        stream_last_insert_processed_at: 2019-01-15T21:48:23Z
        scan_records_processed: 1000
        state: SCANNING_TABLE
      properties:
        scan_start_time:
          description: MongoDB scan start time.
          example: 2001-08-28T00:23:41Z
          type: string
        scan_end_time:
          description: MongoDB scan end time.
          example: 2001-08-28T00:23:41Z
          type: string
        scan_records_processed:
          description: Number of records inserted using scan.
          example: 1000
          format: int64
          type: integer
        scan_total_records:
          description: Number of records in MongoDB table at time of scan.
          example: 2000
          format: int64
          type: integer
        state:
          description: State of current ingest for this table.
          enum:
          - INITIALIZING
          - SCANNING_TABLE
          - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_insert_processed_at:
          description: ISO-8601 date when new insert from source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
        stream_last_update_processed_at:
          description: ISO-8601 date when update from source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
        stream_last_delete_processed_at:
          description: ISO-8601 date when delete from source was last processed.
          example: 2019-01-15T21:48:23Z
          type: string
        stream_records_inserted:
          description: Number of new records inserted using stream.
          example: 10000
          format: int64
          type: integer
        stream_records_updated:
          description: Number of new records updated using stream.
          example: 1000
          format: int64
          type: integer
        stream_records_deleted:
          description: Number of new records deleted using stream.
          example: 100
          format: int64
          type: integer
      type: object
    StatusSnowflake:
      example:
        state: EXPORTING_TO_S3
      properties:
        state:
          description: State of current ingest for this table.
          enum:
          - INITIALIZING
          - EXPORTING_TO_S3
          - DOWNLOADING_FROM_S3
          - COMPLETED
          example: EXPORTING_TO_S3
          type: string
      type: object
    SuspendVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    UnsubscribePreference:
      description: Notification preferences for the user.
      example:
        notificationType: create_apikey
      properties:
        notificationType:
          description: The type of notification to be unsubscribed from.
          example: create_apikey
          type: string
      required:
      - notificationType
      type: object
    UpdateAliasRequest:
      example:
        collections: '["commons.foo", "prod.demo"]'
        description: version alias
      properties:
        description:
          description: Optional description.
          example: version alias
          type: string
        collections:
          description: List of fully qualified collection names referenced by alias.
          example: '["commons.foo", "prod.demo"]'
          items:
            type: string
          type: array
      required:
      - collections
      type: object
    UpdateApiKeyRequest:
      example:
        state: ACTIVE
      properties:
        state:
          description: State that the api key should be set to.
          enum:
          - ACTIVE
          - SUSPENDED
          example: ACTIVE
          type: string
      type: object
    UpdateApiKeyResponse:
      example:
        data:
          role: read-only
          name: my-key
          created_at: 2001-08-28T00:23:41Z
          state: ACTIVE
          expiry_time: 2001-08-28T00:23:41Z
          created_by: test@rockset.com
          key: aB35kDjg*******************************
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    UpdateQueryLambdaRequest:
      example:
        is_public: true
        description: production version foo
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        description:
          description: Optional description.
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
        is_public:
          type: boolean
      type: object
    UpdateRoleRequest:
      example:
        privileges:
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        - cluster: '*ALL*'
          action: CREATE_COLLECTION_WS
          resource_name: commons
        description: Role with read and write privileges to all collections.
      properties:
        description:
          description: Description for the role.
          example: Role with read and write privileges to all collections.
          type: string
        privileges:
          description: List of privileges that will be associated with the role.
          items:
            $ref: '#/components/schemas/Privilege'
          type: array
      type: object
    UpdateUnsubscribePreferencesRequest:
      example:
        data:
        - notificationType: create_apikey
        - notificationType: create_apikey
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: '#/components/schemas/UnsubscribePreference'
          type: array
      type: object
    UpdateUnsubscribePreferencesResponse:
      example:
        data:
        - notificationType: create_apikey
        - notificationType: create_apikey
      properties:
        data:
          description: List of notification preferences.
          items:
            $ref: '#/components/schemas/UnsubscribePreference'
          type: array
      type: object
    UpdateUserRequest:
      example:
        roles: '["admin", "member", "read-only"]'
        last_name: Doe
        first_name: John
      properties:
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
        roles:
          description: New list of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
      type: object
    UpdateViewRequest:
      example:
        query: SELECT * FROM foo
        description: view of awesome collection
      properties:
        description:
          description: Optional description.
          example: view of awesome collection
          type: string
        query:
          description: SQL for this view.
          example: SELECT * FROM foo
          type: string
      required:
      - query
      type: object
    UpdateViewResponse:
      example:
        data:
          owner_email: abc@rockset.com
          path: path
          workspace: commons
          query_sql: SELECT * FROM commons.foo
          entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          creator_email: xyz@rockset.com
          name: demo
          description: view referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/View'
      type: object
    UpdateVirtualInstanceRequest:
      example:
        monitoring_enabled: true
        new_size: LARGE
        auto_suspend_enabled: true
        mount_refresh_interval_seconds: 3600
        name: prod_vi
        description: VI for prod traffic
        auto_suspend_seconds: 3600
      properties:
        new_size:
          description: Requested virtual instance size.
          enum:
          - FREE
          - NANO
          - SHARED
          - MILLI
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: LARGE
          type: string
        monitoring_enabled:
          type: boolean
        name:
          description: New virtual instance name.
          example: prod_vi
          type: string
        description:
          description: New virtual instance description.
          example: VI for prod traffic
          type: string
        auto_suspend_enabled:
          description: Whether auto-suspend should be enabled for this Virtual Instance.
          example: true
          type: boolean
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        mount_refresh_interval_seconds:
          description: Number of seconds between data refreshes for mounts on this
            Virtual Instance
          example: 3600
          format: int32
          type: integer
      type: object
    UpdateVirtualInstanceResponse:
      example:
        data:
          default_vi: true
          mount_refresh_interval_seconds: 3600
          description: VI for prod traffic
          created_at: 2001-08-28T00:23:41Z
          resumed_at: 2001-08-28T00:23:41Z
          current_size: MEDIUM
          created_by: hello@rockset.com
          default_pod_count: 0
          rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          scaled_pod_count: 6
          monitoring_enabled: true
          stats:
            last_queried_ms: 1535101119334
          name: prod_vi
          desired_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          auto_suspend_seconds: 3600
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    User:
      example:
        roles: '["admin", "member", "read-only"]'
        created_at: 2001-08-28T00:23:41Z
        last_name: Doe
        state: ACTIVE
        first_name: John
        email: hello@rockset.com
      properties:
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        email:
          description: User email.
          example: hello@rockset.com
          type: string
        first_name:
          description: User first name.
          example: John
          type: string
        last_name:
          description: User last name.
          example: Doe
          type: string
        roles:
          description: List of roles for a given user.
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
        state:
          description: State of user - NEW / ACTIVE.
          example: ACTIVE
          type: string
      required:
      - email
      type: object
    ValidateQueryResponse:
      example:
        collections: '["commons.foo"]'
        parameters: '["foo"]'
      properties:
        collections:
          description: List of collections specified in query.
          example: '["commons.foo"]'
          items:
            type: string
          type: array
        parameters:
          description: List of parameters specified in query.
          example: '["foo"]'
          items:
            type: string
          type: array
      required:
      - collections
      - parameters
      type: object
    View:
      example:
        owner_email: abc@rockset.com
        path: path
        workspace: commons
        query_sql: SELECT * FROM commons.foo
        entities: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
        creator_email: xyz@rockset.com
        name: demo
        description: view referencing collection in workspace
        created_at: 2001-08-28T00:23:41Z
        state: CREATED
        modified_at: 2001-08-28T00:23:42Z
      properties:
        path:
          type: string
        name:
          description: Name of the view.
          example: demo
          type: string
        description:
          description: View description.
          example: view referencing collection in workspace
          type: string
        workspace:
          description: Name of the workspace.
          example: commons
          type: string
        creator_email:
          description: Email of the creator.
          example: xyz@rockset.com
          type: string
        owner_email:
          description: 'Email of the owner, note: deprecated and will always be null.'
          example: abc@rockset.com
          type: string
        query_sql:
          description: SQL query of the view.
          example: SELECT * FROM commons.foo
          type: string
        entities:
          description: List of entities referenced by view. An entity can be a view,
            alias or collection.
          example: '["common.foo_view", "prod.demo_alias", "dev.user_collection"]'
          items:
            type: string
          type: array
        state:
          description: State of the view.
          enum:
          - CREATED
          - SYNCING
          - DELETED
          example: CREATED
          type: string
        created_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:41Z
          type: string
        modified_at:
          description: ISO-8601 date.
          example: 2001-08-28T00:23:42Z
          type: string
      type: object
    VirtualInstance:
      example:
        default_vi: true
        mount_refresh_interval_seconds: 3600
        description: VI for prod traffic
        created_at: 2001-08-28T00:23:41Z
        resumed_at: 2001-08-28T00:23:41Z
        current_size: MEDIUM
        created_by: hello@rockset.com
        default_pod_count: 0
        rrn: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
        scaled_pod_count: 6
        monitoring_enabled: true
        stats:
          last_queried_ms: 1535101119334
        name: prod_vi
        desired_size: MEDIUM
        state: ACTIVE
        id: 123e4567-e89b-12d3-a456-556642440000
        auto_suspend_seconds: 3600
      properties:
        name:
          description: Virtual instance name.
          example: prod_vi
          type: string
        description:
          description: Virtual instance description.
          example: VI for prod traffic
          type: string
        created_by:
          description: Creator of requested virtual instance.
          example: hello@rockset.com
          type: string
        created_at:
          description: ISO-8601 date of when virtual instance was created.
          example: 2001-08-28T00:23:41Z
          type: string
        resumed_at:
          description: ISO-8601 date of when virtual instance was created.
          example: 2001-08-28T00:23:41Z
          type: string
        state:
          description: Virtual instance state.
          enum:
          - INITIALIZING
          - PROVISIONING_RESOURCES
          - REBALANCING_COLLECTIONS
          - ACTIVE
          - SUSPENDING
          - SUSPENDED
          - RESUMING
          - DELETED
          example: ACTIVE
          type: string
        current_size:
          description: Virtual instance current size.
          enum:
          - FREE
          - NANO
          - SHARED
          - MILLI
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        desired_size:
          description: Virtual instance desired size.
          enum:
          - FREE
          - NANO
          - SHARED
          - MILLI
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        monitoring_enabled:
          type: boolean
        default_vi:
          type: boolean
        default_pod_count:
          format: int32
          type: integer
        scaled_pod_count:
          format: int32
          type: integer
        id:
          description: Unique identifier for virtual instance.
          example: 123e4567-e89b-12d3-a456-556642440000
          type: string
        rrn:
          description: Virtual Instance RRN.
          example: rrn:vi:use1a1:123e4567-e89b-12d3-a456-556642440000
          type: string
        auto_suspend_seconds:
          description: Number of seconds without queries after which the VI is suspended
          example: 3600
          format: int32
          type: integer
        mount_refresh_interval_seconds:
          description: Number of seconds between data refreshes for mounts on this
            Virtual Instance
          example: 3600
          format: int32
          type: integer
        stats:
          $ref: '#/components/schemas/VirtualInstanceStats'
      required:
      - name
      type: object
    VirtualInstanceStats:
      example:
        last_queried_ms: 1535101119334
      properties:
        last_queried_ms:
          description: Milliseconds since Unix epoch Jan 1, 1970.
          example: 1535101119334
          format: int64
          type: integer
      type: object
    Workspace:
      description: Workspaces are organizational containers for collections.
      example:
        name: event_logs
        created_at: 2001-08-28T00:23:41Z
        description: Datasets of system logs for the ops team.
        collection_count: 3
        created_by: hello@rockset.com
      properties:
        created_at:
          description: ISO-8601 date of when workspace was created.
          example: 2001-08-28T00:23:41Z
          type: string
        created_by:
          description: Email of user who created the workspace.
          example: hello@rockset.com
          type: string
        name:
          description: Descriptive label and unique identifier.
          example: event_logs
          type: string
        description:
          description: Longer explanation for the workspace.
          example: Datasets of system logs for the ops team.
          type: string
        collection_count:
          description: Number of collections that are immediate children of workspace.
          example: 3
          format: int64
          type: integer
      type: object
    XmlParams:
      example:
        attribute_prefix: _attr
        doc_tag: row
        encoding: UTF-8
        value_tag: value
        root_tag: root
      properties:
        root_tag:
          description: Tag until which xml is ignored.
          example: root
          type: string
        encoding:
          description: Encoding in which data source is encoded.
          example: UTF-8
          type: string
        doc_tag:
          description: Tags with which documents are identified.
          example: row
          type: string
        value_tag:
          description: tag used for the value when there are attributes in the element
            having no child
          example: value
          type: string
        attribute_prefix:
          description: Tag to differentiate between attributes and elements.
          example: _attr
          type: string
      type: object
x-original-swagger-version: "2.0"
