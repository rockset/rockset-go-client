/*
REST API

Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Collection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Collection{}

// Collection struct for Collection
type Collection struct {
	// List of aliases for a collection.
	Aliases []Alias `json:"aliases,omitempty"`
	BulkStats []BulkStats `json:"bulk_stats,omitempty"`
	// List of clustering fields for a collection.
	ClusteringKey []FieldPartition `json:"clustering_key,omitempty"`
	// ISO-8601 date.
	CreatedAt *string `json:"created_at,omitempty"`
	// Email of user who created the collection.
	CreatedBy *string `json:"created_by,omitempty"`
	// Name of the API key that was used to create this collection if one was used.
	CreatedByApikeyName *string `json:"created_by_apikey_name,omitempty"`
	// Text describing the collection.
	Description *string `json:"description,omitempty"`
	FieldMappingQuery *FieldMappingQuery `json:"field_mapping_query,omitempty"`
	// List of mappings applied on all documents in a collection.
	FieldMappings []FieldMappingV2 `json:"field_mappings,omitempty"`
	// Whether the collection is insert only or not.
	InsertOnly *bool `json:"insert_only,omitempty"`
	// Unique identifer for collection, can contain alphanumeric or dash characters.
	Name *string `json:"name,omitempty"`
	// Whether the collection is read-only or not.
	ReadOnly *bool `json:"read_only,omitempty"`
	// Number of seconds after which data is purged based on event time.
	RetentionSecs *int64 `json:"retention_secs,omitempty"`
	// Collection RRN.
	Rrn *string `json:"rrn,omitempty"`
	// List of sources from which collection ingests.
	Sources []Source `json:"sources,omitempty"`
	Stats *CollectionStats `json:"stats,omitempty"`
	// Current status of collection.
	Status *string `json:"status,omitempty"`
	// RocksDB storage compression type.
	StorageCompressionType *string `json:"storage_compression_type,omitempty"`
	// Name of the workspace that the collection is in.
	Workspace *string `json:"workspace,omitempty"`
}

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection() *Collection {
	this := Collection{}
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *Collection) GetAliases() []Alias {
	if o == nil || IsNil(o.Aliases) {
		var ret []Alias
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetAliasesOk() ([]Alias, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *Collection) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []Alias and assigns it to the Aliases field.
func (o *Collection) SetAliases(v []Alias) {
	o.Aliases = v
}

// GetBulkStats returns the BulkStats field value if set, zero value otherwise.
func (o *Collection) GetBulkStats() []BulkStats {
	if o == nil || IsNil(o.BulkStats) {
		var ret []BulkStats
		return ret
	}
	return o.BulkStats
}

// GetBulkStatsOk returns a tuple with the BulkStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetBulkStatsOk() ([]BulkStats, bool) {
	if o == nil || IsNil(o.BulkStats) {
		return nil, false
	}
	return o.BulkStats, true
}

// HasBulkStats returns a boolean if a field has been set.
func (o *Collection) HasBulkStats() bool {
	if o != nil && !IsNil(o.BulkStats) {
		return true
	}

	return false
}

// SetBulkStats gets a reference to the given []BulkStats and assigns it to the BulkStats field.
func (o *Collection) SetBulkStats(v []BulkStats) {
	o.BulkStats = v
}

// GetClusteringKey returns the ClusteringKey field value if set, zero value otherwise.
func (o *Collection) GetClusteringKey() []FieldPartition {
	if o == nil || IsNil(o.ClusteringKey) {
		var ret []FieldPartition
		return ret
	}
	return o.ClusteringKey
}

// GetClusteringKeyOk returns a tuple with the ClusteringKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetClusteringKeyOk() ([]FieldPartition, bool) {
	if o == nil || IsNil(o.ClusteringKey) {
		return nil, false
	}
	return o.ClusteringKey, true
}

// HasClusteringKey returns a boolean if a field has been set.
func (o *Collection) HasClusteringKey() bool {
	if o != nil && !IsNil(o.ClusteringKey) {
		return true
	}

	return false
}

// SetClusteringKey gets a reference to the given []FieldPartition and assigns it to the ClusteringKey field.
func (o *Collection) SetClusteringKey(v []FieldPartition) {
	o.ClusteringKey = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Collection) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Collection) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Collection) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Collection) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Collection) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Collection) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedByApikeyName returns the CreatedByApikeyName field value if set, zero value otherwise.
func (o *Collection) GetCreatedByApikeyName() string {
	if o == nil || IsNil(o.CreatedByApikeyName) {
		var ret string
		return ret
	}
	return *o.CreatedByApikeyName
}

// GetCreatedByApikeyNameOk returns a tuple with the CreatedByApikeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCreatedByApikeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByApikeyName) {
		return nil, false
	}
	return o.CreatedByApikeyName, true
}

// HasCreatedByApikeyName returns a boolean if a field has been set.
func (o *Collection) HasCreatedByApikeyName() bool {
	if o != nil && !IsNil(o.CreatedByApikeyName) {
		return true
	}

	return false
}

// SetCreatedByApikeyName gets a reference to the given string and assigns it to the CreatedByApikeyName field.
func (o *Collection) SetCreatedByApikeyName(v string) {
	o.CreatedByApikeyName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Collection) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Collection) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Collection) SetDescription(v string) {
	o.Description = &v
}

// GetFieldMappingQuery returns the FieldMappingQuery field value if set, zero value otherwise.
func (o *Collection) GetFieldMappingQuery() FieldMappingQuery {
	if o == nil || IsNil(o.FieldMappingQuery) {
		var ret FieldMappingQuery
		return ret
	}
	return *o.FieldMappingQuery
}

// GetFieldMappingQueryOk returns a tuple with the FieldMappingQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetFieldMappingQueryOk() (*FieldMappingQuery, bool) {
	if o == nil || IsNil(o.FieldMappingQuery) {
		return nil, false
	}
	return o.FieldMappingQuery, true
}

// HasFieldMappingQuery returns a boolean if a field has been set.
func (o *Collection) HasFieldMappingQuery() bool {
	if o != nil && !IsNil(o.FieldMappingQuery) {
		return true
	}

	return false
}

// SetFieldMappingQuery gets a reference to the given FieldMappingQuery and assigns it to the FieldMappingQuery field.
func (o *Collection) SetFieldMappingQuery(v FieldMappingQuery) {
	o.FieldMappingQuery = &v
}

// GetFieldMappings returns the FieldMappings field value if set, zero value otherwise.
func (o *Collection) GetFieldMappings() []FieldMappingV2 {
	if o == nil || IsNil(o.FieldMappings) {
		var ret []FieldMappingV2
		return ret
	}
	return o.FieldMappings
}

// GetFieldMappingsOk returns a tuple with the FieldMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetFieldMappingsOk() ([]FieldMappingV2, bool) {
	if o == nil || IsNil(o.FieldMappings) {
		return nil, false
	}
	return o.FieldMappings, true
}

// HasFieldMappings returns a boolean if a field has been set.
func (o *Collection) HasFieldMappings() bool {
	if o != nil && !IsNil(o.FieldMappings) {
		return true
	}

	return false
}

// SetFieldMappings gets a reference to the given []FieldMappingV2 and assigns it to the FieldMappings field.
func (o *Collection) SetFieldMappings(v []FieldMappingV2) {
	o.FieldMappings = v
}

// GetInsertOnly returns the InsertOnly field value if set, zero value otherwise.
func (o *Collection) GetInsertOnly() bool {
	if o == nil || IsNil(o.InsertOnly) {
		var ret bool
		return ret
	}
	return *o.InsertOnly
}

// GetInsertOnlyOk returns a tuple with the InsertOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetInsertOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.InsertOnly) {
		return nil, false
	}
	return o.InsertOnly, true
}

// HasInsertOnly returns a boolean if a field has been set.
func (o *Collection) HasInsertOnly() bool {
	if o != nil && !IsNil(o.InsertOnly) {
		return true
	}

	return false
}

// SetInsertOnly gets a reference to the given bool and assigns it to the InsertOnly field.
func (o *Collection) SetInsertOnly(v bool) {
	o.InsertOnly = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Collection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Collection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Collection) SetName(v string) {
	o.Name = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *Collection) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *Collection) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *Collection) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRetentionSecs returns the RetentionSecs field value if set, zero value otherwise.
func (o *Collection) GetRetentionSecs() int64 {
	if o == nil || IsNil(o.RetentionSecs) {
		var ret int64
		return ret
	}
	return *o.RetentionSecs
}

// GetRetentionSecsOk returns a tuple with the RetentionSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetRetentionSecsOk() (*int64, bool) {
	if o == nil || IsNil(o.RetentionSecs) {
		return nil, false
	}
	return o.RetentionSecs, true
}

// HasRetentionSecs returns a boolean if a field has been set.
func (o *Collection) HasRetentionSecs() bool {
	if o != nil && !IsNil(o.RetentionSecs) {
		return true
	}

	return false
}

// SetRetentionSecs gets a reference to the given int64 and assigns it to the RetentionSecs field.
func (o *Collection) SetRetentionSecs(v int64) {
	o.RetentionSecs = &v
}

// GetRrn returns the Rrn field value if set, zero value otherwise.
func (o *Collection) GetRrn() string {
	if o == nil || IsNil(o.Rrn) {
		var ret string
		return ret
	}
	return *o.Rrn
}

// GetRrnOk returns a tuple with the Rrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetRrnOk() (*string, bool) {
	if o == nil || IsNil(o.Rrn) {
		return nil, false
	}
	return o.Rrn, true
}

// HasRrn returns a boolean if a field has been set.
func (o *Collection) HasRrn() bool {
	if o != nil && !IsNil(o.Rrn) {
		return true
	}

	return false
}

// SetRrn gets a reference to the given string and assigns it to the Rrn field.
func (o *Collection) SetRrn(v string) {
	o.Rrn = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *Collection) GetSources() []Source {
	if o == nil || IsNil(o.Sources) {
		var ret []Source
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetSourcesOk() ([]Source, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Collection) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Source and assigns it to the Sources field.
func (o *Collection) SetSources(v []Source) {
	o.Sources = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Collection) GetStats() CollectionStats {
	if o == nil || IsNil(o.Stats) {
		var ret CollectionStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetStatsOk() (*CollectionStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Collection) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given CollectionStats and assigns it to the Stats field.
func (o *Collection) SetStats(v CollectionStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Collection) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Collection) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Collection) SetStatus(v string) {
	o.Status = &v
}

// GetStorageCompressionType returns the StorageCompressionType field value if set, zero value otherwise.
func (o *Collection) GetStorageCompressionType() string {
	if o == nil || IsNil(o.StorageCompressionType) {
		var ret string
		return ret
	}
	return *o.StorageCompressionType
}

// GetStorageCompressionTypeOk returns a tuple with the StorageCompressionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetStorageCompressionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.StorageCompressionType) {
		return nil, false
	}
	return o.StorageCompressionType, true
}

// HasStorageCompressionType returns a boolean if a field has been set.
func (o *Collection) HasStorageCompressionType() bool {
	if o != nil && !IsNil(o.StorageCompressionType) {
		return true
	}

	return false
}

// SetStorageCompressionType gets a reference to the given string and assigns it to the StorageCompressionType field.
func (o *Collection) SetStorageCompressionType(v string) {
	o.StorageCompressionType = &v
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise.
func (o *Collection) GetWorkspace() string {
	if o == nil || IsNil(o.Workspace) {
		var ret string
		return ret
	}
	return *o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetWorkspaceOk() (*string, bool) {
	if o == nil || IsNil(o.Workspace) {
		return nil, false
	}
	return o.Workspace, true
}

// HasWorkspace returns a boolean if a field has been set.
func (o *Collection) HasWorkspace() bool {
	if o != nil && !IsNil(o.Workspace) {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given string and assigns it to the Workspace field.
func (o *Collection) SetWorkspace(v string) {
	o.Workspace = &v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Collection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.BulkStats) {
		toSerialize["bulk_stats"] = o.BulkStats
	}
	if !IsNil(o.ClusteringKey) {
		toSerialize["clustering_key"] = o.ClusteringKey
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.CreatedByApikeyName) {
		toSerialize["created_by_apikey_name"] = o.CreatedByApikeyName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FieldMappingQuery) {
		toSerialize["field_mapping_query"] = o.FieldMappingQuery
	}
	if !IsNil(o.FieldMappings) {
		toSerialize["field_mappings"] = o.FieldMappings
	}
	if !IsNil(o.InsertOnly) {
		toSerialize["insert_only"] = o.InsertOnly
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["read_only"] = o.ReadOnly
	}
	if !IsNil(o.RetentionSecs) {
		toSerialize["retention_secs"] = o.RetentionSecs
	}
	if !IsNil(o.Rrn) {
		toSerialize["rrn"] = o.Rrn
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StorageCompressionType) {
		toSerialize["storage_compression_type"] = o.StorageCompressionType
	}
	if !IsNil(o.Workspace) {
		toSerialize["workspace"] = o.Workspace
	}
	return toSerialize, nil
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


