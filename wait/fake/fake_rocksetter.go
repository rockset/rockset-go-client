// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
	"github.com/rockset/rockset-go-client/retry"
	"github.com/rockset/rockset-go-client/wait"
)

type FakeRocksetter struct {
	GetAliasStub        func(context.Context, string, string) (openapi.Alias, error)
	getAliasMutex       sync.RWMutex
	getAliasArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getAliasReturns struct {
		result1 openapi.Alias
		result2 error
	}
	getAliasReturnsOnCall map[int]struct {
		result1 openapi.Alias
		result2 error
	}
	GetCollectionStub        func(context.Context, string, string) (openapi.Collection, error)
	getCollectionMutex       sync.RWMutex
	getCollectionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getCollectionReturns struct {
		result1 openapi.Collection
		result2 error
	}
	getCollectionReturnsOnCall map[int]struct {
		result1 openapi.Collection
		result2 error
	}
	RetryStub        func(context.Context, retry.Func) error
	retryMutex       sync.RWMutex
	retryArgsForCall []struct {
		arg1 context.Context
		arg2 retry.Func
	}
	retryReturns struct {
		result1 error
	}
	retryReturnsOnCall map[int]struct {
		result1 error
	}
	RetryWithCheckStub        func(context.Context, retry.CheckFn) error
	retryWithCheckMutex       sync.RWMutex
	retryWithCheckArgsForCall []struct {
		arg1 context.Context
		arg2 retry.CheckFn
	}
	retryWithCheckReturns struct {
		result1 error
	}
	retryWithCheckReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRocksetter) GetAlias(arg1 context.Context, arg2 string, arg3 string) (openapi.Alias, error) {
	fake.getAliasMutex.Lock()
	ret, specificReturn := fake.getAliasReturnsOnCall[len(fake.getAliasArgsForCall)]
	fake.getAliasArgsForCall = append(fake.getAliasArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetAliasStub
	fakeReturns := fake.getAliasReturns
	fake.recordInvocation("GetAlias", []interface{}{arg1, arg2, arg3})
	fake.getAliasMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRocksetter) GetAliasCallCount() int {
	fake.getAliasMutex.RLock()
	defer fake.getAliasMutex.RUnlock()
	return len(fake.getAliasArgsForCall)
}

func (fake *FakeRocksetter) GetAliasCalls(stub func(context.Context, string, string) (openapi.Alias, error)) {
	fake.getAliasMutex.Lock()
	defer fake.getAliasMutex.Unlock()
	fake.GetAliasStub = stub
}

func (fake *FakeRocksetter) GetAliasArgsForCall(i int) (context.Context, string, string) {
	fake.getAliasMutex.RLock()
	defer fake.getAliasMutex.RUnlock()
	argsForCall := fake.getAliasArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRocksetter) GetAliasReturns(result1 openapi.Alias, result2 error) {
	fake.getAliasMutex.Lock()
	defer fake.getAliasMutex.Unlock()
	fake.GetAliasStub = nil
	fake.getAliasReturns = struct {
		result1 openapi.Alias
		result2 error
	}{result1, result2}
}

func (fake *FakeRocksetter) GetAliasReturnsOnCall(i int, result1 openapi.Alias, result2 error) {
	fake.getAliasMutex.Lock()
	defer fake.getAliasMutex.Unlock()
	fake.GetAliasStub = nil
	if fake.getAliasReturnsOnCall == nil {
		fake.getAliasReturnsOnCall = make(map[int]struct {
			result1 openapi.Alias
			result2 error
		})
	}
	fake.getAliasReturnsOnCall[i] = struct {
		result1 openapi.Alias
		result2 error
	}{result1, result2}
}

func (fake *FakeRocksetter) GetCollection(arg1 context.Context, arg2 string, arg3 string) (openapi.Collection, error) {
	fake.getCollectionMutex.Lock()
	ret, specificReturn := fake.getCollectionReturnsOnCall[len(fake.getCollectionArgsForCall)]
	fake.getCollectionArgsForCall = append(fake.getCollectionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetCollectionStub
	fakeReturns := fake.getCollectionReturns
	fake.recordInvocation("GetCollection", []interface{}{arg1, arg2, arg3})
	fake.getCollectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRocksetter) GetCollectionCallCount() int {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	return len(fake.getCollectionArgsForCall)
}

func (fake *FakeRocksetter) GetCollectionCalls(stub func(context.Context, string, string) (openapi.Collection, error)) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = stub
}

func (fake *FakeRocksetter) GetCollectionArgsForCall(i int) (context.Context, string, string) {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	argsForCall := fake.getCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRocksetter) GetCollectionReturns(result1 openapi.Collection, result2 error) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	fake.getCollectionReturns = struct {
		result1 openapi.Collection
		result2 error
	}{result1, result2}
}

func (fake *FakeRocksetter) GetCollectionReturnsOnCall(i int, result1 openapi.Collection, result2 error) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	if fake.getCollectionReturnsOnCall == nil {
		fake.getCollectionReturnsOnCall = make(map[int]struct {
			result1 openapi.Collection
			result2 error
		})
	}
	fake.getCollectionReturnsOnCall[i] = struct {
		result1 openapi.Collection
		result2 error
	}{result1, result2}
}

func (fake *FakeRocksetter) Retry(arg1 context.Context, arg2 retry.Func) error {
	fake.retryMutex.Lock()
	ret, specificReturn := fake.retryReturnsOnCall[len(fake.retryArgsForCall)]
	fake.retryArgsForCall = append(fake.retryArgsForCall, struct {
		arg1 context.Context
		arg2 retry.Func
	}{arg1, arg2})
	stub := fake.RetryStub
	fakeReturns := fake.retryReturns
	fake.recordInvocation("Retry", []interface{}{arg1, arg2})
	fake.retryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRocksetter) RetryCallCount() int {
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	return len(fake.retryArgsForCall)
}

func (fake *FakeRocksetter) RetryCalls(stub func(context.Context, retry.Func) error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = stub
}

func (fake *FakeRocksetter) RetryArgsForCall(i int) (context.Context, retry.Func) {
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	argsForCall := fake.retryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRocksetter) RetryReturns(result1 error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = nil
	fake.retryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRocksetter) RetryReturnsOnCall(i int, result1 error) {
	fake.retryMutex.Lock()
	defer fake.retryMutex.Unlock()
	fake.RetryStub = nil
	if fake.retryReturnsOnCall == nil {
		fake.retryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.retryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRocksetter) RetryWithCheck(arg1 context.Context, arg2 retry.CheckFn) error {
	fake.retryWithCheckMutex.Lock()
	ret, specificReturn := fake.retryWithCheckReturnsOnCall[len(fake.retryWithCheckArgsForCall)]
	fake.retryWithCheckArgsForCall = append(fake.retryWithCheckArgsForCall, struct {
		arg1 context.Context
		arg2 retry.CheckFn
	}{arg1, arg2})
	stub := fake.RetryWithCheckStub
	fakeReturns := fake.retryWithCheckReturns
	fake.recordInvocation("RetryWithCheck", []interface{}{arg1, arg2})
	fake.retryWithCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRocksetter) RetryWithCheckCallCount() int {
	fake.retryWithCheckMutex.RLock()
	defer fake.retryWithCheckMutex.RUnlock()
	return len(fake.retryWithCheckArgsForCall)
}

func (fake *FakeRocksetter) RetryWithCheckCalls(stub func(context.Context, retry.CheckFn) error) {
	fake.retryWithCheckMutex.Lock()
	defer fake.retryWithCheckMutex.Unlock()
	fake.RetryWithCheckStub = stub
}

func (fake *FakeRocksetter) RetryWithCheckArgsForCall(i int) (context.Context, retry.CheckFn) {
	fake.retryWithCheckMutex.RLock()
	defer fake.retryWithCheckMutex.RUnlock()
	argsForCall := fake.retryWithCheckArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRocksetter) RetryWithCheckReturns(result1 error) {
	fake.retryWithCheckMutex.Lock()
	defer fake.retryWithCheckMutex.Unlock()
	fake.RetryWithCheckStub = nil
	fake.retryWithCheckReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRocksetter) RetryWithCheckReturnsOnCall(i int, result1 error) {
	fake.retryWithCheckMutex.Lock()
	defer fake.retryWithCheckMutex.Unlock()
	fake.RetryWithCheckStub = nil
	if fake.retryWithCheckReturnsOnCall == nil {
		fake.retryWithCheckReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.retryWithCheckReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRocksetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAliasMutex.RLock()
	defer fake.getAliasMutex.RUnlock()
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	fake.retryMutex.RLock()
	defer fake.retryMutex.RUnlock()
	fake.retryWithCheckMutex.RLock()
	defer fake.retryWithCheckMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRocksetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ wait.Rocksetter = new(FakeRocksetter)
