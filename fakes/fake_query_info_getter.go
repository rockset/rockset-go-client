// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeQueryInfoGetter struct {
	GetQueryInfoStub        func(context.Context, string) (openapi.QueryInfo, error)
	getQueryInfoMutex       sync.RWMutex
	getQueryInfoArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getQueryInfoReturns struct {
		result1 openapi.QueryInfo
		result2 error
	}
	getQueryInfoReturnsOnCall map[int]struct {
		result1 openapi.QueryInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQueryInfoGetter) GetQueryInfo(arg1 context.Context, arg2 string) (openapi.QueryInfo, error) {
	fake.getQueryInfoMutex.Lock()
	ret, specificReturn := fake.getQueryInfoReturnsOnCall[len(fake.getQueryInfoArgsForCall)]
	fake.getQueryInfoArgsForCall = append(fake.getQueryInfoArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetQueryInfoStub
	fakeReturns := fake.getQueryInfoReturns
	fake.recordInvocation("GetQueryInfo", []interface{}{arg1, arg2})
	fake.getQueryInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQueryInfoGetter) GetQueryInfoCallCount() int {
	fake.getQueryInfoMutex.RLock()
	defer fake.getQueryInfoMutex.RUnlock()
	return len(fake.getQueryInfoArgsForCall)
}

func (fake *FakeQueryInfoGetter) GetQueryInfoCalls(stub func(context.Context, string) (openapi.QueryInfo, error)) {
	fake.getQueryInfoMutex.Lock()
	defer fake.getQueryInfoMutex.Unlock()
	fake.GetQueryInfoStub = stub
}

func (fake *FakeQueryInfoGetter) GetQueryInfoArgsForCall(i int) (context.Context, string) {
	fake.getQueryInfoMutex.RLock()
	defer fake.getQueryInfoMutex.RUnlock()
	argsForCall := fake.getQueryInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQueryInfoGetter) GetQueryInfoReturns(result1 openapi.QueryInfo, result2 error) {
	fake.getQueryInfoMutex.Lock()
	defer fake.getQueryInfoMutex.Unlock()
	fake.GetQueryInfoStub = nil
	fake.getQueryInfoReturns = struct {
		result1 openapi.QueryInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryInfoGetter) GetQueryInfoReturnsOnCall(i int, result1 openapi.QueryInfo, result2 error) {
	fake.getQueryInfoMutex.Lock()
	defer fake.getQueryInfoMutex.Unlock()
	fake.GetQueryInfoStub = nil
	if fake.getQueryInfoReturnsOnCall == nil {
		fake.getQueryInfoReturnsOnCall = make(map[int]struct {
			result1 openapi.QueryInfo
			result2 error
		})
	}
	fake.getQueryInfoReturnsOnCall[i] = struct {
		result1 openapi.QueryInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeQueryInfoGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getQueryInfoMutex.RLock()
	defer fake.getQueryInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQueryInfoGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
