// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeCollectionGetter struct {
	GetCollectionStub        func(context.Context, string, string) (openapi.Collection, error)
	getCollectionMutex       sync.RWMutex
	getCollectionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getCollectionReturns struct {
		result1 openapi.Collection
		result2 error
	}
	getCollectionReturnsOnCall map[int]struct {
		result1 openapi.Collection
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCollectionGetter) GetCollection(arg1 context.Context, arg2 string, arg3 string) (openapi.Collection, error) {
	fake.getCollectionMutex.Lock()
	ret, specificReturn := fake.getCollectionReturnsOnCall[len(fake.getCollectionArgsForCall)]
	fake.getCollectionArgsForCall = append(fake.getCollectionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetCollectionStub
	fakeReturns := fake.getCollectionReturns
	fake.recordInvocation("GetCollection", []interface{}{arg1, arg2, arg3})
	fake.getCollectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCollectionGetter) GetCollectionCallCount() int {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	return len(fake.getCollectionArgsForCall)
}

func (fake *FakeCollectionGetter) GetCollectionCalls(stub func(context.Context, string, string) (openapi.Collection, error)) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = stub
}

func (fake *FakeCollectionGetter) GetCollectionArgsForCall(i int) (context.Context, string, string) {
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	argsForCall := fake.getCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCollectionGetter) GetCollectionReturns(result1 openapi.Collection, result2 error) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	fake.getCollectionReturns = struct {
		result1 openapi.Collection
		result2 error
	}{result1, result2}
}

func (fake *FakeCollectionGetter) GetCollectionReturnsOnCall(i int, result1 openapi.Collection, result2 error) {
	fake.getCollectionMutex.Lock()
	defer fake.getCollectionMutex.Unlock()
	fake.GetCollectionStub = nil
	if fake.getCollectionReturnsOnCall == nil {
		fake.getCollectionReturnsOnCall = make(map[int]struct {
			result1 openapi.Collection
			result2 error
		})
	}
	fake.getCollectionReturnsOnCall[i] = struct {
		result1 openapi.Collection
		result2 error
	}{result1, result2}
}

func (fake *FakeCollectionGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCollectionMutex.RLock()
	defer fake.getCollectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCollectionGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
