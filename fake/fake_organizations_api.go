// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeOrganizationsApi struct {
	GetOrganizationStub        func(context.Context) openapi.ApiGetOrganizationRequest
	getOrganizationMutex       sync.RWMutex
	getOrganizationArgsForCall []struct {
		arg1 context.Context
	}
	getOrganizationReturns struct {
		result1 openapi.ApiGetOrganizationRequest
	}
	getOrganizationReturnsOnCall map[int]struct {
		result1 openapi.ApiGetOrganizationRequest
	}
	GetOrganizationExecuteStub        func(openapi.ApiGetOrganizationRequest) (*openapi.OrganizationResponse, *http.Response, error)
	getOrganizationExecuteMutex       sync.RWMutex
	getOrganizationExecuteArgsForCall []struct {
		arg1 openapi.ApiGetOrganizationRequest
	}
	getOrganizationExecuteReturns struct {
		result1 *openapi.OrganizationResponse
		result2 *http.Response
		result3 error
	}
	getOrganizationExecuteReturnsOnCall map[int]struct {
		result1 *openapi.OrganizationResponse
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrganizationsApi) GetOrganization(arg1 context.Context) openapi.ApiGetOrganizationRequest {
	fake.getOrganizationMutex.Lock()
	ret, specificReturn := fake.getOrganizationReturnsOnCall[len(fake.getOrganizationArgsForCall)]
	fake.getOrganizationArgsForCall = append(fake.getOrganizationArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetOrganizationStub
	fakeReturns := fake.getOrganizationReturns
	fake.recordInvocation("GetOrganization", []interface{}{arg1})
	fake.getOrganizationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrganizationsApi) GetOrganizationCallCount() int {
	fake.getOrganizationMutex.RLock()
	defer fake.getOrganizationMutex.RUnlock()
	return len(fake.getOrganizationArgsForCall)
}

func (fake *FakeOrganizationsApi) GetOrganizationCalls(stub func(context.Context) openapi.ApiGetOrganizationRequest) {
	fake.getOrganizationMutex.Lock()
	defer fake.getOrganizationMutex.Unlock()
	fake.GetOrganizationStub = stub
}

func (fake *FakeOrganizationsApi) GetOrganizationArgsForCall(i int) context.Context {
	fake.getOrganizationMutex.RLock()
	defer fake.getOrganizationMutex.RUnlock()
	argsForCall := fake.getOrganizationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrganizationsApi) GetOrganizationReturns(result1 openapi.ApiGetOrganizationRequest) {
	fake.getOrganizationMutex.Lock()
	defer fake.getOrganizationMutex.Unlock()
	fake.GetOrganizationStub = nil
	fake.getOrganizationReturns = struct {
		result1 openapi.ApiGetOrganizationRequest
	}{result1}
}

func (fake *FakeOrganizationsApi) GetOrganizationReturnsOnCall(i int, result1 openapi.ApiGetOrganizationRequest) {
	fake.getOrganizationMutex.Lock()
	defer fake.getOrganizationMutex.Unlock()
	fake.GetOrganizationStub = nil
	if fake.getOrganizationReturnsOnCall == nil {
		fake.getOrganizationReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetOrganizationRequest
		})
	}
	fake.getOrganizationReturnsOnCall[i] = struct {
		result1 openapi.ApiGetOrganizationRequest
	}{result1}
}

func (fake *FakeOrganizationsApi) GetOrganizationExecute(arg1 openapi.ApiGetOrganizationRequest) (*openapi.OrganizationResponse, *http.Response, error) {
	fake.getOrganizationExecuteMutex.Lock()
	ret, specificReturn := fake.getOrganizationExecuteReturnsOnCall[len(fake.getOrganizationExecuteArgsForCall)]
	fake.getOrganizationExecuteArgsForCall = append(fake.getOrganizationExecuteArgsForCall, struct {
		arg1 openapi.ApiGetOrganizationRequest
	}{arg1})
	stub := fake.GetOrganizationExecuteStub
	fakeReturns := fake.getOrganizationExecuteReturns
	fake.recordInvocation("GetOrganizationExecute", []interface{}{arg1})
	fake.getOrganizationExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeOrganizationsApi) GetOrganizationExecuteCallCount() int {
	fake.getOrganizationExecuteMutex.RLock()
	defer fake.getOrganizationExecuteMutex.RUnlock()
	return len(fake.getOrganizationExecuteArgsForCall)
}

func (fake *FakeOrganizationsApi) GetOrganizationExecuteCalls(stub func(openapi.ApiGetOrganizationRequest) (*openapi.OrganizationResponse, *http.Response, error)) {
	fake.getOrganizationExecuteMutex.Lock()
	defer fake.getOrganizationExecuteMutex.Unlock()
	fake.GetOrganizationExecuteStub = stub
}

func (fake *FakeOrganizationsApi) GetOrganizationExecuteArgsForCall(i int) openapi.ApiGetOrganizationRequest {
	fake.getOrganizationExecuteMutex.RLock()
	defer fake.getOrganizationExecuteMutex.RUnlock()
	argsForCall := fake.getOrganizationExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrganizationsApi) GetOrganizationExecuteReturns(result1 *openapi.OrganizationResponse, result2 *http.Response, result3 error) {
	fake.getOrganizationExecuteMutex.Lock()
	defer fake.getOrganizationExecuteMutex.Unlock()
	fake.GetOrganizationExecuteStub = nil
	fake.getOrganizationExecuteReturns = struct {
		result1 *openapi.OrganizationResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrganizationsApi) GetOrganizationExecuteReturnsOnCall(i int, result1 *openapi.OrganizationResponse, result2 *http.Response, result3 error) {
	fake.getOrganizationExecuteMutex.Lock()
	defer fake.getOrganizationExecuteMutex.Unlock()
	fake.GetOrganizationExecuteStub = nil
	if fake.getOrganizationExecuteReturnsOnCall == nil {
		fake.getOrganizationExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.OrganizationResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.getOrganizationExecuteReturnsOnCall[i] = struct {
		result1 *openapi.OrganizationResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeOrganizationsApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrganizationMutex.RLock()
	defer fake.getOrganizationMutex.RUnlock()
	fake.getOrganizationExecuteMutex.RLock()
	defer fake.getOrganizationExecuteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrganizationsApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ openapi.OrganizationsApi = new(FakeOrganizationsApi)
