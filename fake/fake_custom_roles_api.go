// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeCustomRolesApi struct {
	CreateRoleStub        func(context.Context) openapi.ApiCreateRoleRequest
	createRoleMutex       sync.RWMutex
	createRoleArgsForCall []struct {
		arg1 context.Context
	}
	createRoleReturns struct {
		result1 openapi.ApiCreateRoleRequest
	}
	createRoleReturnsOnCall map[int]struct {
		result1 openapi.ApiCreateRoleRequest
	}
	CreateRoleExecuteStub        func(openapi.ApiCreateRoleRequest) (*openapi.RoleResponse, *http.Response, error)
	createRoleExecuteMutex       sync.RWMutex
	createRoleExecuteArgsForCall []struct {
		arg1 openapi.ApiCreateRoleRequest
	}
	createRoleExecuteReturns struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	createRoleExecuteReturnsOnCall map[int]struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	DeleteRoleStub        func(context.Context, string) openapi.ApiDeleteRoleRequest
	deleteRoleMutex       sync.RWMutex
	deleteRoleArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteRoleReturns struct {
		result1 openapi.ApiDeleteRoleRequest
	}
	deleteRoleReturnsOnCall map[int]struct {
		result1 openapi.ApiDeleteRoleRequest
	}
	DeleteRoleExecuteStub        func(openapi.ApiDeleteRoleRequest) (*openapi.RoleResponse, *http.Response, error)
	deleteRoleExecuteMutex       sync.RWMutex
	deleteRoleExecuteArgsForCall []struct {
		arg1 openapi.ApiDeleteRoleRequest
	}
	deleteRoleExecuteReturns struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	deleteRoleExecuteReturnsOnCall map[int]struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	GetRoleStub        func(context.Context, string) openapi.ApiGetRoleRequest
	getRoleMutex       sync.RWMutex
	getRoleArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getRoleReturns struct {
		result1 openapi.ApiGetRoleRequest
	}
	getRoleReturnsOnCall map[int]struct {
		result1 openapi.ApiGetRoleRequest
	}
	GetRoleExecuteStub        func(openapi.ApiGetRoleRequest) (*openapi.RoleResponse, *http.Response, error)
	getRoleExecuteMutex       sync.RWMutex
	getRoleExecuteArgsForCall []struct {
		arg1 openapi.ApiGetRoleRequest
	}
	getRoleExecuteReturns struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	getRoleExecuteReturnsOnCall map[int]struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	ListRolesStub        func(context.Context) openapi.ApiListRolesRequest
	listRolesMutex       sync.RWMutex
	listRolesArgsForCall []struct {
		arg1 context.Context
	}
	listRolesReturns struct {
		result1 openapi.ApiListRolesRequest
	}
	listRolesReturnsOnCall map[int]struct {
		result1 openapi.ApiListRolesRequest
	}
	ListRolesExecuteStub        func(openapi.ApiListRolesRequest) (*openapi.ListRolesResponse, *http.Response, error)
	listRolesExecuteMutex       sync.RWMutex
	listRolesExecuteArgsForCall []struct {
		arg1 openapi.ApiListRolesRequest
	}
	listRolesExecuteReturns struct {
		result1 *openapi.ListRolesResponse
		result2 *http.Response
		result3 error
	}
	listRolesExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListRolesResponse
		result2 *http.Response
		result3 error
	}
	UpdateRoleStub        func(context.Context, string) openapi.ApiUpdateRoleRequest
	updateRoleMutex       sync.RWMutex
	updateRoleArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	updateRoleReturns struct {
		result1 openapi.ApiUpdateRoleRequest
	}
	updateRoleReturnsOnCall map[int]struct {
		result1 openapi.ApiUpdateRoleRequest
	}
	UpdateRoleExecuteStub        func(openapi.ApiUpdateRoleRequest) (*openapi.RoleResponse, *http.Response, error)
	updateRoleExecuteMutex       sync.RWMutex
	updateRoleExecuteArgsForCall []struct {
		arg1 openapi.ApiUpdateRoleRequest
	}
	updateRoleExecuteReturns struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	updateRoleExecuteReturnsOnCall map[int]struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCustomRolesApi) CreateRole(arg1 context.Context) openapi.ApiCreateRoleRequest {
	fake.createRoleMutex.Lock()
	ret, specificReturn := fake.createRoleReturnsOnCall[len(fake.createRoleArgsForCall)]
	fake.createRoleArgsForCall = append(fake.createRoleArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CreateRoleStub
	fakeReturns := fake.createRoleReturns
	fake.recordInvocation("CreateRole", []interface{}{arg1})
	fake.createRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomRolesApi) CreateRoleCallCount() int {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	return len(fake.createRoleArgsForCall)
}

func (fake *FakeCustomRolesApi) CreateRoleCalls(stub func(context.Context) openapi.ApiCreateRoleRequest) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = stub
}

func (fake *FakeCustomRolesApi) CreateRoleArgsForCall(i int) context.Context {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	argsForCall := fake.createRoleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) CreateRoleReturns(result1 openapi.ApiCreateRoleRequest) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	fake.createRoleReturns = struct {
		result1 openapi.ApiCreateRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) CreateRoleReturnsOnCall(i int, result1 openapi.ApiCreateRoleRequest) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	if fake.createRoleReturnsOnCall == nil {
		fake.createRoleReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiCreateRoleRequest
		})
	}
	fake.createRoleReturnsOnCall[i] = struct {
		result1 openapi.ApiCreateRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) CreateRoleExecute(arg1 openapi.ApiCreateRoleRequest) (*openapi.RoleResponse, *http.Response, error) {
	fake.createRoleExecuteMutex.Lock()
	ret, specificReturn := fake.createRoleExecuteReturnsOnCall[len(fake.createRoleExecuteArgsForCall)]
	fake.createRoleExecuteArgsForCall = append(fake.createRoleExecuteArgsForCall, struct {
		arg1 openapi.ApiCreateRoleRequest
	}{arg1})
	stub := fake.CreateRoleExecuteStub
	fakeReturns := fake.createRoleExecuteReturns
	fake.recordInvocation("CreateRoleExecute", []interface{}{arg1})
	fake.createRoleExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCustomRolesApi) CreateRoleExecuteCallCount() int {
	fake.createRoleExecuteMutex.RLock()
	defer fake.createRoleExecuteMutex.RUnlock()
	return len(fake.createRoleExecuteArgsForCall)
}

func (fake *FakeCustomRolesApi) CreateRoleExecuteCalls(stub func(openapi.ApiCreateRoleRequest) (*openapi.RoleResponse, *http.Response, error)) {
	fake.createRoleExecuteMutex.Lock()
	defer fake.createRoleExecuteMutex.Unlock()
	fake.CreateRoleExecuteStub = stub
}

func (fake *FakeCustomRolesApi) CreateRoleExecuteArgsForCall(i int) openapi.ApiCreateRoleRequest {
	fake.createRoleExecuteMutex.RLock()
	defer fake.createRoleExecuteMutex.RUnlock()
	argsForCall := fake.createRoleExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) CreateRoleExecuteReturns(result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.createRoleExecuteMutex.Lock()
	defer fake.createRoleExecuteMutex.Unlock()
	fake.CreateRoleExecuteStub = nil
	fake.createRoleExecuteReturns = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) CreateRoleExecuteReturnsOnCall(i int, result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.createRoleExecuteMutex.Lock()
	defer fake.createRoleExecuteMutex.Unlock()
	fake.CreateRoleExecuteStub = nil
	if fake.createRoleExecuteReturnsOnCall == nil {
		fake.createRoleExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.RoleResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.createRoleExecuteReturnsOnCall[i] = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) DeleteRole(arg1 context.Context, arg2 string) openapi.ApiDeleteRoleRequest {
	fake.deleteRoleMutex.Lock()
	ret, specificReturn := fake.deleteRoleReturnsOnCall[len(fake.deleteRoleArgsForCall)]
	fake.deleteRoleArgsForCall = append(fake.deleteRoleArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteRoleStub
	fakeReturns := fake.deleteRoleReturns
	fake.recordInvocation("DeleteRole", []interface{}{arg1, arg2})
	fake.deleteRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomRolesApi) DeleteRoleCallCount() int {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	return len(fake.deleteRoleArgsForCall)
}

func (fake *FakeCustomRolesApi) DeleteRoleCalls(stub func(context.Context, string) openapi.ApiDeleteRoleRequest) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = stub
}

func (fake *FakeCustomRolesApi) DeleteRoleArgsForCall(i int) (context.Context, string) {
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	argsForCall := fake.deleteRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCustomRolesApi) DeleteRoleReturns(result1 openapi.ApiDeleteRoleRequest) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	fake.deleteRoleReturns = struct {
		result1 openapi.ApiDeleteRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) DeleteRoleReturnsOnCall(i int, result1 openapi.ApiDeleteRoleRequest) {
	fake.deleteRoleMutex.Lock()
	defer fake.deleteRoleMutex.Unlock()
	fake.DeleteRoleStub = nil
	if fake.deleteRoleReturnsOnCall == nil {
		fake.deleteRoleReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiDeleteRoleRequest
		})
	}
	fake.deleteRoleReturnsOnCall[i] = struct {
		result1 openapi.ApiDeleteRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) DeleteRoleExecute(arg1 openapi.ApiDeleteRoleRequest) (*openapi.RoleResponse, *http.Response, error) {
	fake.deleteRoleExecuteMutex.Lock()
	ret, specificReturn := fake.deleteRoleExecuteReturnsOnCall[len(fake.deleteRoleExecuteArgsForCall)]
	fake.deleteRoleExecuteArgsForCall = append(fake.deleteRoleExecuteArgsForCall, struct {
		arg1 openapi.ApiDeleteRoleRequest
	}{arg1})
	stub := fake.DeleteRoleExecuteStub
	fakeReturns := fake.deleteRoleExecuteReturns
	fake.recordInvocation("DeleteRoleExecute", []interface{}{arg1})
	fake.deleteRoleExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCustomRolesApi) DeleteRoleExecuteCallCount() int {
	fake.deleteRoleExecuteMutex.RLock()
	defer fake.deleteRoleExecuteMutex.RUnlock()
	return len(fake.deleteRoleExecuteArgsForCall)
}

func (fake *FakeCustomRolesApi) DeleteRoleExecuteCalls(stub func(openapi.ApiDeleteRoleRequest) (*openapi.RoleResponse, *http.Response, error)) {
	fake.deleteRoleExecuteMutex.Lock()
	defer fake.deleteRoleExecuteMutex.Unlock()
	fake.DeleteRoleExecuteStub = stub
}

func (fake *FakeCustomRolesApi) DeleteRoleExecuteArgsForCall(i int) openapi.ApiDeleteRoleRequest {
	fake.deleteRoleExecuteMutex.RLock()
	defer fake.deleteRoleExecuteMutex.RUnlock()
	argsForCall := fake.deleteRoleExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) DeleteRoleExecuteReturns(result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.deleteRoleExecuteMutex.Lock()
	defer fake.deleteRoleExecuteMutex.Unlock()
	fake.DeleteRoleExecuteStub = nil
	fake.deleteRoleExecuteReturns = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) DeleteRoleExecuteReturnsOnCall(i int, result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.deleteRoleExecuteMutex.Lock()
	defer fake.deleteRoleExecuteMutex.Unlock()
	fake.DeleteRoleExecuteStub = nil
	if fake.deleteRoleExecuteReturnsOnCall == nil {
		fake.deleteRoleExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.RoleResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.deleteRoleExecuteReturnsOnCall[i] = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) GetRole(arg1 context.Context, arg2 string) openapi.ApiGetRoleRequest {
	fake.getRoleMutex.Lock()
	ret, specificReturn := fake.getRoleReturnsOnCall[len(fake.getRoleArgsForCall)]
	fake.getRoleArgsForCall = append(fake.getRoleArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetRoleStub
	fakeReturns := fake.getRoleReturns
	fake.recordInvocation("GetRole", []interface{}{arg1, arg2})
	fake.getRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomRolesApi) GetRoleCallCount() int {
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	return len(fake.getRoleArgsForCall)
}

func (fake *FakeCustomRolesApi) GetRoleCalls(stub func(context.Context, string) openapi.ApiGetRoleRequest) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = stub
}

func (fake *FakeCustomRolesApi) GetRoleArgsForCall(i int) (context.Context, string) {
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	argsForCall := fake.getRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCustomRolesApi) GetRoleReturns(result1 openapi.ApiGetRoleRequest) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = nil
	fake.getRoleReturns = struct {
		result1 openapi.ApiGetRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) GetRoleReturnsOnCall(i int, result1 openapi.ApiGetRoleRequest) {
	fake.getRoleMutex.Lock()
	defer fake.getRoleMutex.Unlock()
	fake.GetRoleStub = nil
	if fake.getRoleReturnsOnCall == nil {
		fake.getRoleReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetRoleRequest
		})
	}
	fake.getRoleReturnsOnCall[i] = struct {
		result1 openapi.ApiGetRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) GetRoleExecute(arg1 openapi.ApiGetRoleRequest) (*openapi.RoleResponse, *http.Response, error) {
	fake.getRoleExecuteMutex.Lock()
	ret, specificReturn := fake.getRoleExecuteReturnsOnCall[len(fake.getRoleExecuteArgsForCall)]
	fake.getRoleExecuteArgsForCall = append(fake.getRoleExecuteArgsForCall, struct {
		arg1 openapi.ApiGetRoleRequest
	}{arg1})
	stub := fake.GetRoleExecuteStub
	fakeReturns := fake.getRoleExecuteReturns
	fake.recordInvocation("GetRoleExecute", []interface{}{arg1})
	fake.getRoleExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCustomRolesApi) GetRoleExecuteCallCount() int {
	fake.getRoleExecuteMutex.RLock()
	defer fake.getRoleExecuteMutex.RUnlock()
	return len(fake.getRoleExecuteArgsForCall)
}

func (fake *FakeCustomRolesApi) GetRoleExecuteCalls(stub func(openapi.ApiGetRoleRequest) (*openapi.RoleResponse, *http.Response, error)) {
	fake.getRoleExecuteMutex.Lock()
	defer fake.getRoleExecuteMutex.Unlock()
	fake.GetRoleExecuteStub = stub
}

func (fake *FakeCustomRolesApi) GetRoleExecuteArgsForCall(i int) openapi.ApiGetRoleRequest {
	fake.getRoleExecuteMutex.RLock()
	defer fake.getRoleExecuteMutex.RUnlock()
	argsForCall := fake.getRoleExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) GetRoleExecuteReturns(result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.getRoleExecuteMutex.Lock()
	defer fake.getRoleExecuteMutex.Unlock()
	fake.GetRoleExecuteStub = nil
	fake.getRoleExecuteReturns = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) GetRoleExecuteReturnsOnCall(i int, result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.getRoleExecuteMutex.Lock()
	defer fake.getRoleExecuteMutex.Unlock()
	fake.GetRoleExecuteStub = nil
	if fake.getRoleExecuteReturnsOnCall == nil {
		fake.getRoleExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.RoleResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.getRoleExecuteReturnsOnCall[i] = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) ListRoles(arg1 context.Context) openapi.ApiListRolesRequest {
	fake.listRolesMutex.Lock()
	ret, specificReturn := fake.listRolesReturnsOnCall[len(fake.listRolesArgsForCall)]
	fake.listRolesArgsForCall = append(fake.listRolesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListRolesStub
	fakeReturns := fake.listRolesReturns
	fake.recordInvocation("ListRoles", []interface{}{arg1})
	fake.listRolesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomRolesApi) ListRolesCallCount() int {
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	return len(fake.listRolesArgsForCall)
}

func (fake *FakeCustomRolesApi) ListRolesCalls(stub func(context.Context) openapi.ApiListRolesRequest) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = stub
}

func (fake *FakeCustomRolesApi) ListRolesArgsForCall(i int) context.Context {
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	argsForCall := fake.listRolesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) ListRolesReturns(result1 openapi.ApiListRolesRequest) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = nil
	fake.listRolesReturns = struct {
		result1 openapi.ApiListRolesRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) ListRolesReturnsOnCall(i int, result1 openapi.ApiListRolesRequest) {
	fake.listRolesMutex.Lock()
	defer fake.listRolesMutex.Unlock()
	fake.ListRolesStub = nil
	if fake.listRolesReturnsOnCall == nil {
		fake.listRolesReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiListRolesRequest
		})
	}
	fake.listRolesReturnsOnCall[i] = struct {
		result1 openapi.ApiListRolesRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) ListRolesExecute(arg1 openapi.ApiListRolesRequest) (*openapi.ListRolesResponse, *http.Response, error) {
	fake.listRolesExecuteMutex.Lock()
	ret, specificReturn := fake.listRolesExecuteReturnsOnCall[len(fake.listRolesExecuteArgsForCall)]
	fake.listRolesExecuteArgsForCall = append(fake.listRolesExecuteArgsForCall, struct {
		arg1 openapi.ApiListRolesRequest
	}{arg1})
	stub := fake.ListRolesExecuteStub
	fakeReturns := fake.listRolesExecuteReturns
	fake.recordInvocation("ListRolesExecute", []interface{}{arg1})
	fake.listRolesExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCustomRolesApi) ListRolesExecuteCallCount() int {
	fake.listRolesExecuteMutex.RLock()
	defer fake.listRolesExecuteMutex.RUnlock()
	return len(fake.listRolesExecuteArgsForCall)
}

func (fake *FakeCustomRolesApi) ListRolesExecuteCalls(stub func(openapi.ApiListRolesRequest) (*openapi.ListRolesResponse, *http.Response, error)) {
	fake.listRolesExecuteMutex.Lock()
	defer fake.listRolesExecuteMutex.Unlock()
	fake.ListRolesExecuteStub = stub
}

func (fake *FakeCustomRolesApi) ListRolesExecuteArgsForCall(i int) openapi.ApiListRolesRequest {
	fake.listRolesExecuteMutex.RLock()
	defer fake.listRolesExecuteMutex.RUnlock()
	argsForCall := fake.listRolesExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) ListRolesExecuteReturns(result1 *openapi.ListRolesResponse, result2 *http.Response, result3 error) {
	fake.listRolesExecuteMutex.Lock()
	defer fake.listRolesExecuteMutex.Unlock()
	fake.ListRolesExecuteStub = nil
	fake.listRolesExecuteReturns = struct {
		result1 *openapi.ListRolesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) ListRolesExecuteReturnsOnCall(i int, result1 *openapi.ListRolesResponse, result2 *http.Response, result3 error) {
	fake.listRolesExecuteMutex.Lock()
	defer fake.listRolesExecuteMutex.Unlock()
	fake.ListRolesExecuteStub = nil
	if fake.listRolesExecuteReturnsOnCall == nil {
		fake.listRolesExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListRolesResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.listRolesExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListRolesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) UpdateRole(arg1 context.Context, arg2 string) openapi.ApiUpdateRoleRequest {
	fake.updateRoleMutex.Lock()
	ret, specificReturn := fake.updateRoleReturnsOnCall[len(fake.updateRoleArgsForCall)]
	fake.updateRoleArgsForCall = append(fake.updateRoleArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.UpdateRoleStub
	fakeReturns := fake.updateRoleReturns
	fake.recordInvocation("UpdateRole", []interface{}{arg1, arg2})
	fake.updateRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCustomRolesApi) UpdateRoleCallCount() int {
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	return len(fake.updateRoleArgsForCall)
}

func (fake *FakeCustomRolesApi) UpdateRoleCalls(stub func(context.Context, string) openapi.ApiUpdateRoleRequest) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = stub
}

func (fake *FakeCustomRolesApi) UpdateRoleArgsForCall(i int) (context.Context, string) {
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	argsForCall := fake.updateRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCustomRolesApi) UpdateRoleReturns(result1 openapi.ApiUpdateRoleRequest) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = nil
	fake.updateRoleReturns = struct {
		result1 openapi.ApiUpdateRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) UpdateRoleReturnsOnCall(i int, result1 openapi.ApiUpdateRoleRequest) {
	fake.updateRoleMutex.Lock()
	defer fake.updateRoleMutex.Unlock()
	fake.UpdateRoleStub = nil
	if fake.updateRoleReturnsOnCall == nil {
		fake.updateRoleReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiUpdateRoleRequest
		})
	}
	fake.updateRoleReturnsOnCall[i] = struct {
		result1 openapi.ApiUpdateRoleRequest
	}{result1}
}

func (fake *FakeCustomRolesApi) UpdateRoleExecute(arg1 openapi.ApiUpdateRoleRequest) (*openapi.RoleResponse, *http.Response, error) {
	fake.updateRoleExecuteMutex.Lock()
	ret, specificReturn := fake.updateRoleExecuteReturnsOnCall[len(fake.updateRoleExecuteArgsForCall)]
	fake.updateRoleExecuteArgsForCall = append(fake.updateRoleExecuteArgsForCall, struct {
		arg1 openapi.ApiUpdateRoleRequest
	}{arg1})
	stub := fake.UpdateRoleExecuteStub
	fakeReturns := fake.updateRoleExecuteReturns
	fake.recordInvocation("UpdateRoleExecute", []interface{}{arg1})
	fake.updateRoleExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCustomRolesApi) UpdateRoleExecuteCallCount() int {
	fake.updateRoleExecuteMutex.RLock()
	defer fake.updateRoleExecuteMutex.RUnlock()
	return len(fake.updateRoleExecuteArgsForCall)
}

func (fake *FakeCustomRolesApi) UpdateRoleExecuteCalls(stub func(openapi.ApiUpdateRoleRequest) (*openapi.RoleResponse, *http.Response, error)) {
	fake.updateRoleExecuteMutex.Lock()
	defer fake.updateRoleExecuteMutex.Unlock()
	fake.UpdateRoleExecuteStub = stub
}

func (fake *FakeCustomRolesApi) UpdateRoleExecuteArgsForCall(i int) openapi.ApiUpdateRoleRequest {
	fake.updateRoleExecuteMutex.RLock()
	defer fake.updateRoleExecuteMutex.RUnlock()
	argsForCall := fake.updateRoleExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCustomRolesApi) UpdateRoleExecuteReturns(result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.updateRoleExecuteMutex.Lock()
	defer fake.updateRoleExecuteMutex.Unlock()
	fake.UpdateRoleExecuteStub = nil
	fake.updateRoleExecuteReturns = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) UpdateRoleExecuteReturnsOnCall(i int, result1 *openapi.RoleResponse, result2 *http.Response, result3 error) {
	fake.updateRoleExecuteMutex.Lock()
	defer fake.updateRoleExecuteMutex.Unlock()
	fake.UpdateRoleExecuteStub = nil
	if fake.updateRoleExecuteReturnsOnCall == nil {
		fake.updateRoleExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.RoleResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.updateRoleExecuteReturnsOnCall[i] = struct {
		result1 *openapi.RoleResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCustomRolesApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	fake.createRoleExecuteMutex.RLock()
	defer fake.createRoleExecuteMutex.RUnlock()
	fake.deleteRoleMutex.RLock()
	defer fake.deleteRoleMutex.RUnlock()
	fake.deleteRoleExecuteMutex.RLock()
	defer fake.deleteRoleExecuteMutex.RUnlock()
	fake.getRoleMutex.RLock()
	defer fake.getRoleMutex.RUnlock()
	fake.getRoleExecuteMutex.RLock()
	defer fake.getRoleExecuteMutex.RUnlock()
	fake.listRolesMutex.RLock()
	defer fake.listRolesMutex.RUnlock()
	fake.listRolesExecuteMutex.RLock()
	defer fake.listRolesExecuteMutex.RUnlock()
	fake.updateRoleMutex.RLock()
	defer fake.updateRoleMutex.RUnlock()
	fake.updateRoleExecuteMutex.RLock()
	defer fake.updateRoleExecuteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCustomRolesApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ openapi.CustomRolesApi = new(FakeCustomRolesApi)
