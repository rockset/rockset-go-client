// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeUsersApi struct {
	CreateUserStub        func(context.Context) openapi.ApiCreateUserRequest
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 context.Context
	}
	createUserReturns struct {
		result1 openapi.ApiCreateUserRequest
	}
	createUserReturnsOnCall map[int]struct {
		result1 openapi.ApiCreateUserRequest
	}
	CreateUserExecuteStub        func(openapi.ApiCreateUserRequest) (*openapi.CreateUserResponse, *http.Response, error)
	createUserExecuteMutex       sync.RWMutex
	createUserExecuteArgsForCall []struct {
		arg1 openapi.ApiCreateUserRequest
	}
	createUserExecuteReturns struct {
		result1 *openapi.CreateUserResponse
		result2 *http.Response
		result3 error
	}
	createUserExecuteReturnsOnCall map[int]struct {
		result1 *openapi.CreateUserResponse
		result2 *http.Response
		result3 error
	}
	DeleteUserStub        func(context.Context, string) openapi.ApiDeleteUserRequest
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteUserReturns struct {
		result1 openapi.ApiDeleteUserRequest
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 openapi.ApiDeleteUserRequest
	}
	DeleteUserExecuteStub        func(openapi.ApiDeleteUserRequest) (*openapi.DeleteUserResponse, *http.Response, error)
	deleteUserExecuteMutex       sync.RWMutex
	deleteUserExecuteArgsForCall []struct {
		arg1 openapi.ApiDeleteUserRequest
	}
	deleteUserExecuteReturns struct {
		result1 *openapi.DeleteUserResponse
		result2 *http.Response
		result3 error
	}
	deleteUserExecuteReturnsOnCall map[int]struct {
		result1 *openapi.DeleteUserResponse
		result2 *http.Response
		result3 error
	}
	GetCurrentUserStub        func(context.Context) openapi.ApiGetCurrentUserRequest
	getCurrentUserMutex       sync.RWMutex
	getCurrentUserArgsForCall []struct {
		arg1 context.Context
	}
	getCurrentUserReturns struct {
		result1 openapi.ApiGetCurrentUserRequest
	}
	getCurrentUserReturnsOnCall map[int]struct {
		result1 openapi.ApiGetCurrentUserRequest
	}
	GetCurrentUserExecuteStub        func(openapi.ApiGetCurrentUserRequest) (*openapi.User, *http.Response, error)
	getCurrentUserExecuteMutex       sync.RWMutex
	getCurrentUserExecuteArgsForCall []struct {
		arg1 openapi.ApiGetCurrentUserRequest
	}
	getCurrentUserExecuteReturns struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	getCurrentUserExecuteReturnsOnCall map[int]struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	GetUserStub        func(context.Context, string) openapi.ApiGetUserRequest
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserReturns struct {
		result1 openapi.ApiGetUserRequest
	}
	getUserReturnsOnCall map[int]struct {
		result1 openapi.ApiGetUserRequest
	}
	GetUserExecuteStub        func(openapi.ApiGetUserRequest) (*openapi.User, *http.Response, error)
	getUserExecuteMutex       sync.RWMutex
	getUserExecuteArgsForCall []struct {
		arg1 openapi.ApiGetUserRequest
	}
	getUserExecuteReturns struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	getUserExecuteReturnsOnCall map[int]struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	ListUnsubscribePreferencesStub        func(context.Context) openapi.ApiListUnsubscribePreferencesRequest
	listUnsubscribePreferencesMutex       sync.RWMutex
	listUnsubscribePreferencesArgsForCall []struct {
		arg1 context.Context
	}
	listUnsubscribePreferencesReturns struct {
		result1 openapi.ApiListUnsubscribePreferencesRequest
	}
	listUnsubscribePreferencesReturnsOnCall map[int]struct {
		result1 openapi.ApiListUnsubscribePreferencesRequest
	}
	ListUnsubscribePreferencesExecuteStub        func(openapi.ApiListUnsubscribePreferencesRequest) (*openapi.ListUnsubscribePreferencesResponse, *http.Response, error)
	listUnsubscribePreferencesExecuteMutex       sync.RWMutex
	listUnsubscribePreferencesExecuteArgsForCall []struct {
		arg1 openapi.ApiListUnsubscribePreferencesRequest
	}
	listUnsubscribePreferencesExecuteReturns struct {
		result1 *openapi.ListUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}
	listUnsubscribePreferencesExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}
	ListUsersStub        func(context.Context) openapi.ApiListUsersRequest
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
		arg1 context.Context
	}
	listUsersReturns struct {
		result1 openapi.ApiListUsersRequest
	}
	listUsersReturnsOnCall map[int]struct {
		result1 openapi.ApiListUsersRequest
	}
	ListUsersExecuteStub        func(openapi.ApiListUsersRequest) (*openapi.ListUsersResponse, *http.Response, error)
	listUsersExecuteMutex       sync.RWMutex
	listUsersExecuteArgsForCall []struct {
		arg1 openapi.ApiListUsersRequest
	}
	listUsersExecuteReturns struct {
		result1 *openapi.ListUsersResponse
		result2 *http.Response
		result3 error
	}
	listUsersExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListUsersResponse
		result2 *http.Response
		result3 error
	}
	UpdateUnsubscribePreferencesStub        func(context.Context) openapi.ApiUpdateUnsubscribePreferencesRequest
	updateUnsubscribePreferencesMutex       sync.RWMutex
	updateUnsubscribePreferencesArgsForCall []struct {
		arg1 context.Context
	}
	updateUnsubscribePreferencesReturns struct {
		result1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}
	updateUnsubscribePreferencesReturnsOnCall map[int]struct {
		result1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}
	UpdateUnsubscribePreferencesExecuteStub        func(openapi.ApiUpdateUnsubscribePreferencesRequest) (*openapi.UpdateUnsubscribePreferencesResponse, *http.Response, error)
	updateUnsubscribePreferencesExecuteMutex       sync.RWMutex
	updateUnsubscribePreferencesExecuteArgsForCall []struct {
		arg1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}
	updateUnsubscribePreferencesExecuteReturns struct {
		result1 *openapi.UpdateUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}
	updateUnsubscribePreferencesExecuteReturnsOnCall map[int]struct {
		result1 *openapi.UpdateUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}
	UpdateUserStub        func(context.Context, string) openapi.ApiUpdateUserRequest
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	updateUserReturns struct {
		result1 openapi.ApiUpdateUserRequest
	}
	updateUserReturnsOnCall map[int]struct {
		result1 openapi.ApiUpdateUserRequest
	}
	UpdateUserExecuteStub        func(openapi.ApiUpdateUserRequest) (*openapi.User, *http.Response, error)
	updateUserExecuteMutex       sync.RWMutex
	updateUserExecuteArgsForCall []struct {
		arg1 openapi.ApiUpdateUserRequest
	}
	updateUserExecuteReturns struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	updateUserExecuteReturnsOnCall map[int]struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsersApi) CreateUser(arg1 context.Context) openapi.ApiCreateUserRequest {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CreateUserStub
	fakeReturns := fake.createUserReturns
	fake.recordInvocation("CreateUser", []interface{}{arg1})
	fake.createUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeUsersApi) CreateUserCalls(stub func(context.Context) openapi.ApiCreateUserRequest) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeUsersApi) CreateUserArgsForCall(i int) context.Context {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) CreateUserReturns(result1 openapi.ApiCreateUserRequest) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 openapi.ApiCreateUserRequest
	}{result1}
}

func (fake *FakeUsersApi) CreateUserReturnsOnCall(i int, result1 openapi.ApiCreateUserRequest) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiCreateUserRequest
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 openapi.ApiCreateUserRequest
	}{result1}
}

func (fake *FakeUsersApi) CreateUserExecute(arg1 openapi.ApiCreateUserRequest) (*openapi.CreateUserResponse, *http.Response, error) {
	fake.createUserExecuteMutex.Lock()
	ret, specificReturn := fake.createUserExecuteReturnsOnCall[len(fake.createUserExecuteArgsForCall)]
	fake.createUserExecuteArgsForCall = append(fake.createUserExecuteArgsForCall, struct {
		arg1 openapi.ApiCreateUserRequest
	}{arg1})
	stub := fake.CreateUserExecuteStub
	fakeReturns := fake.createUserExecuteReturns
	fake.recordInvocation("CreateUserExecute", []interface{}{arg1})
	fake.createUserExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) CreateUserExecuteCallCount() int {
	fake.createUserExecuteMutex.RLock()
	defer fake.createUserExecuteMutex.RUnlock()
	return len(fake.createUserExecuteArgsForCall)
}

func (fake *FakeUsersApi) CreateUserExecuteCalls(stub func(openapi.ApiCreateUserRequest) (*openapi.CreateUserResponse, *http.Response, error)) {
	fake.createUserExecuteMutex.Lock()
	defer fake.createUserExecuteMutex.Unlock()
	fake.CreateUserExecuteStub = stub
}

func (fake *FakeUsersApi) CreateUserExecuteArgsForCall(i int) openapi.ApiCreateUserRequest {
	fake.createUserExecuteMutex.RLock()
	defer fake.createUserExecuteMutex.RUnlock()
	argsForCall := fake.createUserExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) CreateUserExecuteReturns(result1 *openapi.CreateUserResponse, result2 *http.Response, result3 error) {
	fake.createUserExecuteMutex.Lock()
	defer fake.createUserExecuteMutex.Unlock()
	fake.CreateUserExecuteStub = nil
	fake.createUserExecuteReturns = struct {
		result1 *openapi.CreateUserResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) CreateUserExecuteReturnsOnCall(i int, result1 *openapi.CreateUserResponse, result2 *http.Response, result3 error) {
	fake.createUserExecuteMutex.Lock()
	defer fake.createUserExecuteMutex.Unlock()
	fake.CreateUserExecuteStub = nil
	if fake.createUserExecuteReturnsOnCall == nil {
		fake.createUserExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.CreateUserResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.createUserExecuteReturnsOnCall[i] = struct {
		result1 *openapi.CreateUserResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) DeleteUser(arg1 context.Context, arg2 string) openapi.ApiDeleteUserRequest {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteUserStub
	fakeReturns := fake.deleteUserReturns
	fake.recordInvocation("DeleteUser", []interface{}{arg1, arg2})
	fake.deleteUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeUsersApi) DeleteUserCalls(stub func(context.Context, string) openapi.ApiDeleteUserRequest) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeUsersApi) DeleteUserArgsForCall(i int) (context.Context, string) {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersApi) DeleteUserReturns(result1 openapi.ApiDeleteUserRequest) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 openapi.ApiDeleteUserRequest
	}{result1}
}

func (fake *FakeUsersApi) DeleteUserReturnsOnCall(i int, result1 openapi.ApiDeleteUserRequest) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiDeleteUserRequest
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 openapi.ApiDeleteUserRequest
	}{result1}
}

func (fake *FakeUsersApi) DeleteUserExecute(arg1 openapi.ApiDeleteUserRequest) (*openapi.DeleteUserResponse, *http.Response, error) {
	fake.deleteUserExecuteMutex.Lock()
	ret, specificReturn := fake.deleteUserExecuteReturnsOnCall[len(fake.deleteUserExecuteArgsForCall)]
	fake.deleteUserExecuteArgsForCall = append(fake.deleteUserExecuteArgsForCall, struct {
		arg1 openapi.ApiDeleteUserRequest
	}{arg1})
	stub := fake.DeleteUserExecuteStub
	fakeReturns := fake.deleteUserExecuteReturns
	fake.recordInvocation("DeleteUserExecute", []interface{}{arg1})
	fake.deleteUserExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) DeleteUserExecuteCallCount() int {
	fake.deleteUserExecuteMutex.RLock()
	defer fake.deleteUserExecuteMutex.RUnlock()
	return len(fake.deleteUserExecuteArgsForCall)
}

func (fake *FakeUsersApi) DeleteUserExecuteCalls(stub func(openapi.ApiDeleteUserRequest) (*openapi.DeleteUserResponse, *http.Response, error)) {
	fake.deleteUserExecuteMutex.Lock()
	defer fake.deleteUserExecuteMutex.Unlock()
	fake.DeleteUserExecuteStub = stub
}

func (fake *FakeUsersApi) DeleteUserExecuteArgsForCall(i int) openapi.ApiDeleteUserRequest {
	fake.deleteUserExecuteMutex.RLock()
	defer fake.deleteUserExecuteMutex.RUnlock()
	argsForCall := fake.deleteUserExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) DeleteUserExecuteReturns(result1 *openapi.DeleteUserResponse, result2 *http.Response, result3 error) {
	fake.deleteUserExecuteMutex.Lock()
	defer fake.deleteUserExecuteMutex.Unlock()
	fake.DeleteUserExecuteStub = nil
	fake.deleteUserExecuteReturns = struct {
		result1 *openapi.DeleteUserResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) DeleteUserExecuteReturnsOnCall(i int, result1 *openapi.DeleteUserResponse, result2 *http.Response, result3 error) {
	fake.deleteUserExecuteMutex.Lock()
	defer fake.deleteUserExecuteMutex.Unlock()
	fake.DeleteUserExecuteStub = nil
	if fake.deleteUserExecuteReturnsOnCall == nil {
		fake.deleteUserExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.DeleteUserResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.deleteUserExecuteReturnsOnCall[i] = struct {
		result1 *openapi.DeleteUserResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) GetCurrentUser(arg1 context.Context) openapi.ApiGetCurrentUserRequest {
	fake.getCurrentUserMutex.Lock()
	ret, specificReturn := fake.getCurrentUserReturnsOnCall[len(fake.getCurrentUserArgsForCall)]
	fake.getCurrentUserArgsForCall = append(fake.getCurrentUserArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetCurrentUserStub
	fakeReturns := fake.getCurrentUserReturns
	fake.recordInvocation("GetCurrentUser", []interface{}{arg1})
	fake.getCurrentUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) GetCurrentUserCallCount() int {
	fake.getCurrentUserMutex.RLock()
	defer fake.getCurrentUserMutex.RUnlock()
	return len(fake.getCurrentUserArgsForCall)
}

func (fake *FakeUsersApi) GetCurrentUserCalls(stub func(context.Context) openapi.ApiGetCurrentUserRequest) {
	fake.getCurrentUserMutex.Lock()
	defer fake.getCurrentUserMutex.Unlock()
	fake.GetCurrentUserStub = stub
}

func (fake *FakeUsersApi) GetCurrentUserArgsForCall(i int) context.Context {
	fake.getCurrentUserMutex.RLock()
	defer fake.getCurrentUserMutex.RUnlock()
	argsForCall := fake.getCurrentUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) GetCurrentUserReturns(result1 openapi.ApiGetCurrentUserRequest) {
	fake.getCurrentUserMutex.Lock()
	defer fake.getCurrentUserMutex.Unlock()
	fake.GetCurrentUserStub = nil
	fake.getCurrentUserReturns = struct {
		result1 openapi.ApiGetCurrentUserRequest
	}{result1}
}

func (fake *FakeUsersApi) GetCurrentUserReturnsOnCall(i int, result1 openapi.ApiGetCurrentUserRequest) {
	fake.getCurrentUserMutex.Lock()
	defer fake.getCurrentUserMutex.Unlock()
	fake.GetCurrentUserStub = nil
	if fake.getCurrentUserReturnsOnCall == nil {
		fake.getCurrentUserReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetCurrentUserRequest
		})
	}
	fake.getCurrentUserReturnsOnCall[i] = struct {
		result1 openapi.ApiGetCurrentUserRequest
	}{result1}
}

func (fake *FakeUsersApi) GetCurrentUserExecute(arg1 openapi.ApiGetCurrentUserRequest) (*openapi.User, *http.Response, error) {
	fake.getCurrentUserExecuteMutex.Lock()
	ret, specificReturn := fake.getCurrentUserExecuteReturnsOnCall[len(fake.getCurrentUserExecuteArgsForCall)]
	fake.getCurrentUserExecuteArgsForCall = append(fake.getCurrentUserExecuteArgsForCall, struct {
		arg1 openapi.ApiGetCurrentUserRequest
	}{arg1})
	stub := fake.GetCurrentUserExecuteStub
	fakeReturns := fake.getCurrentUserExecuteReturns
	fake.recordInvocation("GetCurrentUserExecute", []interface{}{arg1})
	fake.getCurrentUserExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) GetCurrentUserExecuteCallCount() int {
	fake.getCurrentUserExecuteMutex.RLock()
	defer fake.getCurrentUserExecuteMutex.RUnlock()
	return len(fake.getCurrentUserExecuteArgsForCall)
}

func (fake *FakeUsersApi) GetCurrentUserExecuteCalls(stub func(openapi.ApiGetCurrentUserRequest) (*openapi.User, *http.Response, error)) {
	fake.getCurrentUserExecuteMutex.Lock()
	defer fake.getCurrentUserExecuteMutex.Unlock()
	fake.GetCurrentUserExecuteStub = stub
}

func (fake *FakeUsersApi) GetCurrentUserExecuteArgsForCall(i int) openapi.ApiGetCurrentUserRequest {
	fake.getCurrentUserExecuteMutex.RLock()
	defer fake.getCurrentUserExecuteMutex.RUnlock()
	argsForCall := fake.getCurrentUserExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) GetCurrentUserExecuteReturns(result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.getCurrentUserExecuteMutex.Lock()
	defer fake.getCurrentUserExecuteMutex.Unlock()
	fake.GetCurrentUserExecuteStub = nil
	fake.getCurrentUserExecuteReturns = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) GetCurrentUserExecuteReturnsOnCall(i int, result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.getCurrentUserExecuteMutex.Lock()
	defer fake.getCurrentUserExecuteMutex.Unlock()
	fake.GetCurrentUserExecuteStub = nil
	if fake.getCurrentUserExecuteReturnsOnCall == nil {
		fake.getCurrentUserExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.User
			result2 *http.Response
			result3 error
		})
	}
	fake.getCurrentUserExecuteReturnsOnCall[i] = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) GetUser(arg1 context.Context, arg2 string) openapi.ApiGetUserRequest {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserStub
	fakeReturns := fake.getUserReturns
	fake.recordInvocation("GetUser", []interface{}{arg1, arg2})
	fake.getUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeUsersApi) GetUserCalls(stub func(context.Context, string) openapi.ApiGetUserRequest) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeUsersApi) GetUserArgsForCall(i int) (context.Context, string) {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersApi) GetUserReturns(result1 openapi.ApiGetUserRequest) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 openapi.ApiGetUserRequest
	}{result1}
}

func (fake *FakeUsersApi) GetUserReturnsOnCall(i int, result1 openapi.ApiGetUserRequest) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetUserRequest
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 openapi.ApiGetUserRequest
	}{result1}
}

func (fake *FakeUsersApi) GetUserExecute(arg1 openapi.ApiGetUserRequest) (*openapi.User, *http.Response, error) {
	fake.getUserExecuteMutex.Lock()
	ret, specificReturn := fake.getUserExecuteReturnsOnCall[len(fake.getUserExecuteArgsForCall)]
	fake.getUserExecuteArgsForCall = append(fake.getUserExecuteArgsForCall, struct {
		arg1 openapi.ApiGetUserRequest
	}{arg1})
	stub := fake.GetUserExecuteStub
	fakeReturns := fake.getUserExecuteReturns
	fake.recordInvocation("GetUserExecute", []interface{}{arg1})
	fake.getUserExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) GetUserExecuteCallCount() int {
	fake.getUserExecuteMutex.RLock()
	defer fake.getUserExecuteMutex.RUnlock()
	return len(fake.getUserExecuteArgsForCall)
}

func (fake *FakeUsersApi) GetUserExecuteCalls(stub func(openapi.ApiGetUserRequest) (*openapi.User, *http.Response, error)) {
	fake.getUserExecuteMutex.Lock()
	defer fake.getUserExecuteMutex.Unlock()
	fake.GetUserExecuteStub = stub
}

func (fake *FakeUsersApi) GetUserExecuteArgsForCall(i int) openapi.ApiGetUserRequest {
	fake.getUserExecuteMutex.RLock()
	defer fake.getUserExecuteMutex.RUnlock()
	argsForCall := fake.getUserExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) GetUserExecuteReturns(result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.getUserExecuteMutex.Lock()
	defer fake.getUserExecuteMutex.Unlock()
	fake.GetUserExecuteStub = nil
	fake.getUserExecuteReturns = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) GetUserExecuteReturnsOnCall(i int, result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.getUserExecuteMutex.Lock()
	defer fake.getUserExecuteMutex.Unlock()
	fake.GetUserExecuteStub = nil
	if fake.getUserExecuteReturnsOnCall == nil {
		fake.getUserExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.User
			result2 *http.Response
			result3 error
		})
	}
	fake.getUserExecuteReturnsOnCall[i] = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) ListUnsubscribePreferences(arg1 context.Context) openapi.ApiListUnsubscribePreferencesRequest {
	fake.listUnsubscribePreferencesMutex.Lock()
	ret, specificReturn := fake.listUnsubscribePreferencesReturnsOnCall[len(fake.listUnsubscribePreferencesArgsForCall)]
	fake.listUnsubscribePreferencesArgsForCall = append(fake.listUnsubscribePreferencesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListUnsubscribePreferencesStub
	fakeReturns := fake.listUnsubscribePreferencesReturns
	fake.recordInvocation("ListUnsubscribePreferences", []interface{}{arg1})
	fake.listUnsubscribePreferencesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesCallCount() int {
	fake.listUnsubscribePreferencesMutex.RLock()
	defer fake.listUnsubscribePreferencesMutex.RUnlock()
	return len(fake.listUnsubscribePreferencesArgsForCall)
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesCalls(stub func(context.Context) openapi.ApiListUnsubscribePreferencesRequest) {
	fake.listUnsubscribePreferencesMutex.Lock()
	defer fake.listUnsubscribePreferencesMutex.Unlock()
	fake.ListUnsubscribePreferencesStub = stub
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesArgsForCall(i int) context.Context {
	fake.listUnsubscribePreferencesMutex.RLock()
	defer fake.listUnsubscribePreferencesMutex.RUnlock()
	argsForCall := fake.listUnsubscribePreferencesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesReturns(result1 openapi.ApiListUnsubscribePreferencesRequest) {
	fake.listUnsubscribePreferencesMutex.Lock()
	defer fake.listUnsubscribePreferencesMutex.Unlock()
	fake.ListUnsubscribePreferencesStub = nil
	fake.listUnsubscribePreferencesReturns = struct {
		result1 openapi.ApiListUnsubscribePreferencesRequest
	}{result1}
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesReturnsOnCall(i int, result1 openapi.ApiListUnsubscribePreferencesRequest) {
	fake.listUnsubscribePreferencesMutex.Lock()
	defer fake.listUnsubscribePreferencesMutex.Unlock()
	fake.ListUnsubscribePreferencesStub = nil
	if fake.listUnsubscribePreferencesReturnsOnCall == nil {
		fake.listUnsubscribePreferencesReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiListUnsubscribePreferencesRequest
		})
	}
	fake.listUnsubscribePreferencesReturnsOnCall[i] = struct {
		result1 openapi.ApiListUnsubscribePreferencesRequest
	}{result1}
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecute(arg1 openapi.ApiListUnsubscribePreferencesRequest) (*openapi.ListUnsubscribePreferencesResponse, *http.Response, error) {
	fake.listUnsubscribePreferencesExecuteMutex.Lock()
	ret, specificReturn := fake.listUnsubscribePreferencesExecuteReturnsOnCall[len(fake.listUnsubscribePreferencesExecuteArgsForCall)]
	fake.listUnsubscribePreferencesExecuteArgsForCall = append(fake.listUnsubscribePreferencesExecuteArgsForCall, struct {
		arg1 openapi.ApiListUnsubscribePreferencesRequest
	}{arg1})
	stub := fake.ListUnsubscribePreferencesExecuteStub
	fakeReturns := fake.listUnsubscribePreferencesExecuteReturns
	fake.recordInvocation("ListUnsubscribePreferencesExecute", []interface{}{arg1})
	fake.listUnsubscribePreferencesExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecuteCallCount() int {
	fake.listUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.listUnsubscribePreferencesExecuteMutex.RUnlock()
	return len(fake.listUnsubscribePreferencesExecuteArgsForCall)
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecuteCalls(stub func(openapi.ApiListUnsubscribePreferencesRequest) (*openapi.ListUnsubscribePreferencesResponse, *http.Response, error)) {
	fake.listUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.listUnsubscribePreferencesExecuteMutex.Unlock()
	fake.ListUnsubscribePreferencesExecuteStub = stub
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecuteArgsForCall(i int) openapi.ApiListUnsubscribePreferencesRequest {
	fake.listUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.listUnsubscribePreferencesExecuteMutex.RUnlock()
	argsForCall := fake.listUnsubscribePreferencesExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecuteReturns(result1 *openapi.ListUnsubscribePreferencesResponse, result2 *http.Response, result3 error) {
	fake.listUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.listUnsubscribePreferencesExecuteMutex.Unlock()
	fake.ListUnsubscribePreferencesExecuteStub = nil
	fake.listUnsubscribePreferencesExecuteReturns = struct {
		result1 *openapi.ListUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) ListUnsubscribePreferencesExecuteReturnsOnCall(i int, result1 *openapi.ListUnsubscribePreferencesResponse, result2 *http.Response, result3 error) {
	fake.listUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.listUnsubscribePreferencesExecuteMutex.Unlock()
	fake.ListUnsubscribePreferencesExecuteStub = nil
	if fake.listUnsubscribePreferencesExecuteReturnsOnCall == nil {
		fake.listUnsubscribePreferencesExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListUnsubscribePreferencesResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.listUnsubscribePreferencesExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) ListUsers(arg1 context.Context) openapi.ApiListUsersRequest {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListUsersStub
	fakeReturns := fake.listUsersReturns
	fake.recordInvocation("ListUsers", []interface{}{arg1})
	fake.listUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeUsersApi) ListUsersCalls(stub func(context.Context) openapi.ApiListUsersRequest) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *FakeUsersApi) ListUsersArgsForCall(i int) context.Context {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	argsForCall := fake.listUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) ListUsersReturns(result1 openapi.ApiListUsersRequest) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 openapi.ApiListUsersRequest
	}{result1}
}

func (fake *FakeUsersApi) ListUsersReturnsOnCall(i int, result1 openapi.ApiListUsersRequest) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiListUsersRequest
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 openapi.ApiListUsersRequest
	}{result1}
}

func (fake *FakeUsersApi) ListUsersExecute(arg1 openapi.ApiListUsersRequest) (*openapi.ListUsersResponse, *http.Response, error) {
	fake.listUsersExecuteMutex.Lock()
	ret, specificReturn := fake.listUsersExecuteReturnsOnCall[len(fake.listUsersExecuteArgsForCall)]
	fake.listUsersExecuteArgsForCall = append(fake.listUsersExecuteArgsForCall, struct {
		arg1 openapi.ApiListUsersRequest
	}{arg1})
	stub := fake.ListUsersExecuteStub
	fakeReturns := fake.listUsersExecuteReturns
	fake.recordInvocation("ListUsersExecute", []interface{}{arg1})
	fake.listUsersExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) ListUsersExecuteCallCount() int {
	fake.listUsersExecuteMutex.RLock()
	defer fake.listUsersExecuteMutex.RUnlock()
	return len(fake.listUsersExecuteArgsForCall)
}

func (fake *FakeUsersApi) ListUsersExecuteCalls(stub func(openapi.ApiListUsersRequest) (*openapi.ListUsersResponse, *http.Response, error)) {
	fake.listUsersExecuteMutex.Lock()
	defer fake.listUsersExecuteMutex.Unlock()
	fake.ListUsersExecuteStub = stub
}

func (fake *FakeUsersApi) ListUsersExecuteArgsForCall(i int) openapi.ApiListUsersRequest {
	fake.listUsersExecuteMutex.RLock()
	defer fake.listUsersExecuteMutex.RUnlock()
	argsForCall := fake.listUsersExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) ListUsersExecuteReturns(result1 *openapi.ListUsersResponse, result2 *http.Response, result3 error) {
	fake.listUsersExecuteMutex.Lock()
	defer fake.listUsersExecuteMutex.Unlock()
	fake.ListUsersExecuteStub = nil
	fake.listUsersExecuteReturns = struct {
		result1 *openapi.ListUsersResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) ListUsersExecuteReturnsOnCall(i int, result1 *openapi.ListUsersResponse, result2 *http.Response, result3 error) {
	fake.listUsersExecuteMutex.Lock()
	defer fake.listUsersExecuteMutex.Unlock()
	fake.ListUsersExecuteStub = nil
	if fake.listUsersExecuteReturnsOnCall == nil {
		fake.listUsersExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListUsersResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.listUsersExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListUsersResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferences(arg1 context.Context) openapi.ApiUpdateUnsubscribePreferencesRequest {
	fake.updateUnsubscribePreferencesMutex.Lock()
	ret, specificReturn := fake.updateUnsubscribePreferencesReturnsOnCall[len(fake.updateUnsubscribePreferencesArgsForCall)]
	fake.updateUnsubscribePreferencesArgsForCall = append(fake.updateUnsubscribePreferencesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.UpdateUnsubscribePreferencesStub
	fakeReturns := fake.updateUnsubscribePreferencesReturns
	fake.recordInvocation("UpdateUnsubscribePreferences", []interface{}{arg1})
	fake.updateUnsubscribePreferencesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesCallCount() int {
	fake.updateUnsubscribePreferencesMutex.RLock()
	defer fake.updateUnsubscribePreferencesMutex.RUnlock()
	return len(fake.updateUnsubscribePreferencesArgsForCall)
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesCalls(stub func(context.Context) openapi.ApiUpdateUnsubscribePreferencesRequest) {
	fake.updateUnsubscribePreferencesMutex.Lock()
	defer fake.updateUnsubscribePreferencesMutex.Unlock()
	fake.UpdateUnsubscribePreferencesStub = stub
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesArgsForCall(i int) context.Context {
	fake.updateUnsubscribePreferencesMutex.RLock()
	defer fake.updateUnsubscribePreferencesMutex.RUnlock()
	argsForCall := fake.updateUnsubscribePreferencesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesReturns(result1 openapi.ApiUpdateUnsubscribePreferencesRequest) {
	fake.updateUnsubscribePreferencesMutex.Lock()
	defer fake.updateUnsubscribePreferencesMutex.Unlock()
	fake.UpdateUnsubscribePreferencesStub = nil
	fake.updateUnsubscribePreferencesReturns = struct {
		result1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}{result1}
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesReturnsOnCall(i int, result1 openapi.ApiUpdateUnsubscribePreferencesRequest) {
	fake.updateUnsubscribePreferencesMutex.Lock()
	defer fake.updateUnsubscribePreferencesMutex.Unlock()
	fake.UpdateUnsubscribePreferencesStub = nil
	if fake.updateUnsubscribePreferencesReturnsOnCall == nil {
		fake.updateUnsubscribePreferencesReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiUpdateUnsubscribePreferencesRequest
		})
	}
	fake.updateUnsubscribePreferencesReturnsOnCall[i] = struct {
		result1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}{result1}
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecute(arg1 openapi.ApiUpdateUnsubscribePreferencesRequest) (*openapi.UpdateUnsubscribePreferencesResponse, *http.Response, error) {
	fake.updateUnsubscribePreferencesExecuteMutex.Lock()
	ret, specificReturn := fake.updateUnsubscribePreferencesExecuteReturnsOnCall[len(fake.updateUnsubscribePreferencesExecuteArgsForCall)]
	fake.updateUnsubscribePreferencesExecuteArgsForCall = append(fake.updateUnsubscribePreferencesExecuteArgsForCall, struct {
		arg1 openapi.ApiUpdateUnsubscribePreferencesRequest
	}{arg1})
	stub := fake.UpdateUnsubscribePreferencesExecuteStub
	fakeReturns := fake.updateUnsubscribePreferencesExecuteReturns
	fake.recordInvocation("UpdateUnsubscribePreferencesExecute", []interface{}{arg1})
	fake.updateUnsubscribePreferencesExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecuteCallCount() int {
	fake.updateUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.RUnlock()
	return len(fake.updateUnsubscribePreferencesExecuteArgsForCall)
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecuteCalls(stub func(openapi.ApiUpdateUnsubscribePreferencesRequest) (*openapi.UpdateUnsubscribePreferencesResponse, *http.Response, error)) {
	fake.updateUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.Unlock()
	fake.UpdateUnsubscribePreferencesExecuteStub = stub
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecuteArgsForCall(i int) openapi.ApiUpdateUnsubscribePreferencesRequest {
	fake.updateUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.RUnlock()
	argsForCall := fake.updateUnsubscribePreferencesExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecuteReturns(result1 *openapi.UpdateUnsubscribePreferencesResponse, result2 *http.Response, result3 error) {
	fake.updateUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.Unlock()
	fake.UpdateUnsubscribePreferencesExecuteStub = nil
	fake.updateUnsubscribePreferencesExecuteReturns = struct {
		result1 *openapi.UpdateUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) UpdateUnsubscribePreferencesExecuteReturnsOnCall(i int, result1 *openapi.UpdateUnsubscribePreferencesResponse, result2 *http.Response, result3 error) {
	fake.updateUnsubscribePreferencesExecuteMutex.Lock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.Unlock()
	fake.UpdateUnsubscribePreferencesExecuteStub = nil
	if fake.updateUnsubscribePreferencesExecuteReturnsOnCall == nil {
		fake.updateUnsubscribePreferencesExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.UpdateUnsubscribePreferencesResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.updateUnsubscribePreferencesExecuteReturnsOnCall[i] = struct {
		result1 *openapi.UpdateUnsubscribePreferencesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) UpdateUser(arg1 context.Context, arg2 string) openapi.ApiUpdateUserRequest {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersApi) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUsersApi) UpdateUserCalls(stub func(context.Context, string) openapi.ApiUpdateUserRequest) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUsersApi) UpdateUserArgsForCall(i int) (context.Context, string) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersApi) UpdateUserReturns(result1 openapi.ApiUpdateUserRequest) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 openapi.ApiUpdateUserRequest
	}{result1}
}

func (fake *FakeUsersApi) UpdateUserReturnsOnCall(i int, result1 openapi.ApiUpdateUserRequest) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiUpdateUserRequest
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 openapi.ApiUpdateUserRequest
	}{result1}
}

func (fake *FakeUsersApi) UpdateUserExecute(arg1 openapi.ApiUpdateUserRequest) (*openapi.User, *http.Response, error) {
	fake.updateUserExecuteMutex.Lock()
	ret, specificReturn := fake.updateUserExecuteReturnsOnCall[len(fake.updateUserExecuteArgsForCall)]
	fake.updateUserExecuteArgsForCall = append(fake.updateUserExecuteArgsForCall, struct {
		arg1 openapi.ApiUpdateUserRequest
	}{arg1})
	stub := fake.UpdateUserExecuteStub
	fakeReturns := fake.updateUserExecuteReturns
	fake.recordInvocation("UpdateUserExecute", []interface{}{arg1})
	fake.updateUserExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersApi) UpdateUserExecuteCallCount() int {
	fake.updateUserExecuteMutex.RLock()
	defer fake.updateUserExecuteMutex.RUnlock()
	return len(fake.updateUserExecuteArgsForCall)
}

func (fake *FakeUsersApi) UpdateUserExecuteCalls(stub func(openapi.ApiUpdateUserRequest) (*openapi.User, *http.Response, error)) {
	fake.updateUserExecuteMutex.Lock()
	defer fake.updateUserExecuteMutex.Unlock()
	fake.UpdateUserExecuteStub = stub
}

func (fake *FakeUsersApi) UpdateUserExecuteArgsForCall(i int) openapi.ApiUpdateUserRequest {
	fake.updateUserExecuteMutex.RLock()
	defer fake.updateUserExecuteMutex.RUnlock()
	argsForCall := fake.updateUserExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersApi) UpdateUserExecuteReturns(result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.updateUserExecuteMutex.Lock()
	defer fake.updateUserExecuteMutex.Unlock()
	fake.UpdateUserExecuteStub = nil
	fake.updateUserExecuteReturns = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) UpdateUserExecuteReturnsOnCall(i int, result1 *openapi.User, result2 *http.Response, result3 error) {
	fake.updateUserExecuteMutex.Lock()
	defer fake.updateUserExecuteMutex.Unlock()
	fake.UpdateUserExecuteStub = nil
	if fake.updateUserExecuteReturnsOnCall == nil {
		fake.updateUserExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.User
			result2 *http.Response
			result3 error
		})
	}
	fake.updateUserExecuteReturnsOnCall[i] = struct {
		result1 *openapi.User
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.createUserExecuteMutex.RLock()
	defer fake.createUserExecuteMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.deleteUserExecuteMutex.RLock()
	defer fake.deleteUserExecuteMutex.RUnlock()
	fake.getCurrentUserMutex.RLock()
	defer fake.getCurrentUserMutex.RUnlock()
	fake.getCurrentUserExecuteMutex.RLock()
	defer fake.getCurrentUserExecuteMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getUserExecuteMutex.RLock()
	defer fake.getUserExecuteMutex.RUnlock()
	fake.listUnsubscribePreferencesMutex.RLock()
	defer fake.listUnsubscribePreferencesMutex.RUnlock()
	fake.listUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.listUnsubscribePreferencesExecuteMutex.RUnlock()
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	fake.listUsersExecuteMutex.RLock()
	defer fake.listUsersExecuteMutex.RUnlock()
	fake.updateUnsubscribePreferencesMutex.RLock()
	defer fake.updateUnsubscribePreferencesMutex.RUnlock()
	fake.updateUnsubscribePreferencesExecuteMutex.RLock()
	defer fake.updateUnsubscribePreferencesExecuteMutex.RUnlock()
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	fake.updateUserExecuteMutex.RLock()
	defer fake.updateUserExecuteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsersApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ openapi.UsersApi = new(FakeUsersApi)
