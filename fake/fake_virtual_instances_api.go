// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"net/http"
	"sync"

	"github.com/rockset/rockset-go-client/openapi"
)

type FakeVirtualInstancesApi struct {
	CreateVirtualInstanceStub        func(context.Context) openapi.ApiCreateVirtualInstanceRequest
	createVirtualInstanceMutex       sync.RWMutex
	createVirtualInstanceArgsForCall []struct {
		arg1 context.Context
	}
	createVirtualInstanceReturns struct {
		result1 openapi.ApiCreateVirtualInstanceRequest
	}
	createVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiCreateVirtualInstanceRequest
	}
	CreateVirtualInstanceExecuteStub        func(openapi.ApiCreateVirtualInstanceRequest) (*openapi.CreateVirtualInstanceResponse, *http.Response, error)
	createVirtualInstanceExecuteMutex       sync.RWMutex
	createVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiCreateVirtualInstanceRequest
	}
	createVirtualInstanceExecuteReturns struct {
		result1 *openapi.CreateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	createVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.CreateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	DeleteVirtualInstanceStub        func(context.Context, string) openapi.ApiDeleteVirtualInstanceRequest
	deleteVirtualInstanceMutex       sync.RWMutex
	deleteVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteVirtualInstanceReturns struct {
		result1 openapi.ApiDeleteVirtualInstanceRequest
	}
	deleteVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiDeleteVirtualInstanceRequest
	}
	DeleteVirtualInstanceExecuteStub        func(openapi.ApiDeleteVirtualInstanceRequest) (*openapi.DeleteVirtualInstanceResponse, *http.Response, error)
	deleteVirtualInstanceExecuteMutex       sync.RWMutex
	deleteVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiDeleteVirtualInstanceRequest
	}
	deleteVirtualInstanceExecuteReturns struct {
		result1 *openapi.DeleteVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	deleteVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.DeleteVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	GetCollectionMountStub        func(context.Context, string, string) openapi.ApiGetCollectionMountRequest
	getCollectionMountMutex       sync.RWMutex
	getCollectionMountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getCollectionMountReturns struct {
		result1 openapi.ApiGetCollectionMountRequest
	}
	getCollectionMountReturnsOnCall map[int]struct {
		result1 openapi.ApiGetCollectionMountRequest
	}
	GetCollectionMountExecuteStub        func(openapi.ApiGetCollectionMountRequest) (*openapi.CollectionMountResponse, *http.Response, error)
	getCollectionMountExecuteMutex       sync.RWMutex
	getCollectionMountExecuteArgsForCall []struct {
		arg1 openapi.ApiGetCollectionMountRequest
	}
	getCollectionMountExecuteReturns struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}
	getCollectionMountExecuteReturnsOnCall map[int]struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}
	GetMountOffsetsStub        func(context.Context, string, string) openapi.ApiGetMountOffsetsRequest
	getMountOffsetsMutex       sync.RWMutex
	getMountOffsetsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getMountOffsetsReturns struct {
		result1 openapi.ApiGetMountOffsetsRequest
	}
	getMountOffsetsReturnsOnCall map[int]struct {
		result1 openapi.ApiGetMountOffsetsRequest
	}
	GetMountOffsetsExecuteStub        func(openapi.ApiGetMountOffsetsRequest) (*openapi.GetCollectionCommit, *http.Response, error)
	getMountOffsetsExecuteMutex       sync.RWMutex
	getMountOffsetsExecuteArgsForCall []struct {
		arg1 openapi.ApiGetMountOffsetsRequest
	}
	getMountOffsetsExecuteReturns struct {
		result1 *openapi.GetCollectionCommit
		result2 *http.Response
		result3 error
	}
	getMountOffsetsExecuteReturnsOnCall map[int]struct {
		result1 *openapi.GetCollectionCommit
		result2 *http.Response
		result3 error
	}
	GetVirtualInstanceStub        func(context.Context, string) openapi.ApiGetVirtualInstanceRequest
	getVirtualInstanceMutex       sync.RWMutex
	getVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getVirtualInstanceReturns struct {
		result1 openapi.ApiGetVirtualInstanceRequest
	}
	getVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiGetVirtualInstanceRequest
	}
	GetVirtualInstanceExecuteStub        func(openapi.ApiGetVirtualInstanceRequest) (*openapi.GetVirtualInstanceResponse, *http.Response, error)
	getVirtualInstanceExecuteMutex       sync.RWMutex
	getVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiGetVirtualInstanceRequest
	}
	getVirtualInstanceExecuteReturns struct {
		result1 *openapi.GetVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	getVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.GetVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	GetVirtualInstanceQueriesStub        func(context.Context, string) openapi.ApiGetVirtualInstanceQueriesRequest
	getVirtualInstanceQueriesMutex       sync.RWMutex
	getVirtualInstanceQueriesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getVirtualInstanceQueriesReturns struct {
		result1 openapi.ApiGetVirtualInstanceQueriesRequest
	}
	getVirtualInstanceQueriesReturnsOnCall map[int]struct {
		result1 openapi.ApiGetVirtualInstanceQueriesRequest
	}
	GetVirtualInstanceQueriesExecuteStub        func(openapi.ApiGetVirtualInstanceQueriesRequest) (*openapi.ListQueriesResponse, *http.Response, error)
	getVirtualInstanceQueriesExecuteMutex       sync.RWMutex
	getVirtualInstanceQueriesExecuteArgsForCall []struct {
		arg1 openapi.ApiGetVirtualInstanceQueriesRequest
	}
	getVirtualInstanceQueriesExecuteReturns struct {
		result1 *openapi.ListQueriesResponse
		result2 *http.Response
		result3 error
	}
	getVirtualInstanceQueriesExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListQueriesResponse
		result2 *http.Response
		result3 error
	}
	ListCollectionMountsStub        func(context.Context, string) openapi.ApiListCollectionMountsRequest
	listCollectionMountsMutex       sync.RWMutex
	listCollectionMountsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	listCollectionMountsReturns struct {
		result1 openapi.ApiListCollectionMountsRequest
	}
	listCollectionMountsReturnsOnCall map[int]struct {
		result1 openapi.ApiListCollectionMountsRequest
	}
	ListCollectionMountsExecuteStub        func(openapi.ApiListCollectionMountsRequest) (*openapi.ListCollectionMountsResponse, *http.Response, error)
	listCollectionMountsExecuteMutex       sync.RWMutex
	listCollectionMountsExecuteArgsForCall []struct {
		arg1 openapi.ApiListCollectionMountsRequest
	}
	listCollectionMountsExecuteReturns struct {
		result1 *openapi.ListCollectionMountsResponse
		result2 *http.Response
		result3 error
	}
	listCollectionMountsExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListCollectionMountsResponse
		result2 *http.Response
		result3 error
	}
	ListVirtualInstancesStub        func(context.Context) openapi.ApiListVirtualInstancesRequest
	listVirtualInstancesMutex       sync.RWMutex
	listVirtualInstancesArgsForCall []struct {
		arg1 context.Context
	}
	listVirtualInstancesReturns struct {
		result1 openapi.ApiListVirtualInstancesRequest
	}
	listVirtualInstancesReturnsOnCall map[int]struct {
		result1 openapi.ApiListVirtualInstancesRequest
	}
	ListVirtualInstancesExecuteStub        func(openapi.ApiListVirtualInstancesRequest) (*openapi.ListVirtualInstancesResponse, *http.Response, error)
	listVirtualInstancesExecuteMutex       sync.RWMutex
	listVirtualInstancesExecuteArgsForCall []struct {
		arg1 openapi.ApiListVirtualInstancesRequest
	}
	listVirtualInstancesExecuteReturns struct {
		result1 *openapi.ListVirtualInstancesResponse
		result2 *http.Response
		result3 error
	}
	listVirtualInstancesExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ListVirtualInstancesResponse
		result2 *http.Response
		result3 error
	}
	MountCollectionStub        func(context.Context, string) openapi.ApiMountCollectionRequest
	mountCollectionMutex       sync.RWMutex
	mountCollectionArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	mountCollectionReturns struct {
		result1 openapi.ApiMountCollectionRequest
	}
	mountCollectionReturnsOnCall map[int]struct {
		result1 openapi.ApiMountCollectionRequest
	}
	MountCollectionExecuteStub        func(openapi.ApiMountCollectionRequest) (*openapi.CreateCollectionMountsResponse, *http.Response, error)
	mountCollectionExecuteMutex       sync.RWMutex
	mountCollectionExecuteArgsForCall []struct {
		arg1 openapi.ApiMountCollectionRequest
	}
	mountCollectionExecuteReturns struct {
		result1 *openapi.CreateCollectionMountsResponse
		result2 *http.Response
		result3 error
	}
	mountCollectionExecuteReturnsOnCall map[int]struct {
		result1 *openapi.CreateCollectionMountsResponse
		result2 *http.Response
		result3 error
	}
	QueryVirtualInstanceStub        func(context.Context, string) openapi.ApiQueryVirtualInstanceRequest
	queryVirtualInstanceMutex       sync.RWMutex
	queryVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	queryVirtualInstanceReturns struct {
		result1 openapi.ApiQueryVirtualInstanceRequest
	}
	queryVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiQueryVirtualInstanceRequest
	}
	QueryVirtualInstanceExecuteStub        func(openapi.ApiQueryVirtualInstanceRequest) (*openapi.QueryResponse, *http.Response, error)
	queryVirtualInstanceExecuteMutex       sync.RWMutex
	queryVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiQueryVirtualInstanceRequest
	}
	queryVirtualInstanceExecuteReturns struct {
		result1 *openapi.QueryResponse
		result2 *http.Response
		result3 error
	}
	queryVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.QueryResponse
		result2 *http.Response
		result3 error
	}
	ResumeVirtualInstanceStub        func(context.Context, string) openapi.ApiResumeVirtualInstanceRequest
	resumeVirtualInstanceMutex       sync.RWMutex
	resumeVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	resumeVirtualInstanceReturns struct {
		result1 openapi.ApiResumeVirtualInstanceRequest
	}
	resumeVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiResumeVirtualInstanceRequest
	}
	ResumeVirtualInstanceExecuteStub        func(openapi.ApiResumeVirtualInstanceRequest) (*openapi.ResumeVirtualInstanceResponse, *http.Response, error)
	resumeVirtualInstanceExecuteMutex       sync.RWMutex
	resumeVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiResumeVirtualInstanceRequest
	}
	resumeVirtualInstanceExecuteReturns struct {
		result1 *openapi.ResumeVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	resumeVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.ResumeVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	SetVirtualInstanceStub        func(context.Context, string) openapi.ApiSetVirtualInstanceRequest
	setVirtualInstanceMutex       sync.RWMutex
	setVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	setVirtualInstanceReturns struct {
		result1 openapi.ApiSetVirtualInstanceRequest
	}
	setVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiSetVirtualInstanceRequest
	}
	SetVirtualInstanceExecuteStub        func(openapi.ApiSetVirtualInstanceRequest) (*openapi.UpdateVirtualInstanceResponse, *http.Response, error)
	setVirtualInstanceExecuteMutex       sync.RWMutex
	setVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiSetVirtualInstanceRequest
	}
	setVirtualInstanceExecuteReturns struct {
		result1 *openapi.UpdateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	setVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.UpdateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	SuspendVirtualInstanceStub        func(context.Context, string) openapi.ApiSuspendVirtualInstanceRequest
	suspendVirtualInstanceMutex       sync.RWMutex
	suspendVirtualInstanceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	suspendVirtualInstanceReturns struct {
		result1 openapi.ApiSuspendVirtualInstanceRequest
	}
	suspendVirtualInstanceReturnsOnCall map[int]struct {
		result1 openapi.ApiSuspendVirtualInstanceRequest
	}
	SuspendVirtualInstanceExecuteStub        func(openapi.ApiSuspendVirtualInstanceRequest) (*openapi.SuspendVirtualInstanceResponse, *http.Response, error)
	suspendVirtualInstanceExecuteMutex       sync.RWMutex
	suspendVirtualInstanceExecuteArgsForCall []struct {
		arg1 openapi.ApiSuspendVirtualInstanceRequest
	}
	suspendVirtualInstanceExecuteReturns struct {
		result1 *openapi.SuspendVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	suspendVirtualInstanceExecuteReturnsOnCall map[int]struct {
		result1 *openapi.SuspendVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}
	UnmountCollectionStub        func(context.Context, string, string) openapi.ApiUnmountCollectionRequest
	unmountCollectionMutex       sync.RWMutex
	unmountCollectionArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	unmountCollectionReturns struct {
		result1 openapi.ApiUnmountCollectionRequest
	}
	unmountCollectionReturnsOnCall map[int]struct {
		result1 openapi.ApiUnmountCollectionRequest
	}
	UnmountCollectionExecuteStub        func(openapi.ApiUnmountCollectionRequest) (*openapi.CollectionMountResponse, *http.Response, error)
	unmountCollectionExecuteMutex       sync.RWMutex
	unmountCollectionExecuteArgsForCall []struct {
		arg1 openapi.ApiUnmountCollectionRequest
	}
	unmountCollectionExecuteReturns struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}
	unmountCollectionExecuteReturnsOnCall map[int]struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstance(arg1 context.Context) openapi.ApiCreateVirtualInstanceRequest {
	fake.createVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.createVirtualInstanceReturnsOnCall[len(fake.createVirtualInstanceArgsForCall)]
	fake.createVirtualInstanceArgsForCall = append(fake.createVirtualInstanceArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CreateVirtualInstanceStub
	fakeReturns := fake.createVirtualInstanceReturns
	fake.recordInvocation("CreateVirtualInstance", []interface{}{arg1})
	fake.createVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceCallCount() int {
	fake.createVirtualInstanceMutex.RLock()
	defer fake.createVirtualInstanceMutex.RUnlock()
	return len(fake.createVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceCalls(stub func(context.Context) openapi.ApiCreateVirtualInstanceRequest) {
	fake.createVirtualInstanceMutex.Lock()
	defer fake.createVirtualInstanceMutex.Unlock()
	fake.CreateVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceArgsForCall(i int) context.Context {
	fake.createVirtualInstanceMutex.RLock()
	defer fake.createVirtualInstanceMutex.RUnlock()
	argsForCall := fake.createVirtualInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceReturns(result1 openapi.ApiCreateVirtualInstanceRequest) {
	fake.createVirtualInstanceMutex.Lock()
	defer fake.createVirtualInstanceMutex.Unlock()
	fake.CreateVirtualInstanceStub = nil
	fake.createVirtualInstanceReturns = struct {
		result1 openapi.ApiCreateVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiCreateVirtualInstanceRequest) {
	fake.createVirtualInstanceMutex.Lock()
	defer fake.createVirtualInstanceMutex.Unlock()
	fake.CreateVirtualInstanceStub = nil
	if fake.createVirtualInstanceReturnsOnCall == nil {
		fake.createVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiCreateVirtualInstanceRequest
		})
	}
	fake.createVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiCreateVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecute(arg1 openapi.ApiCreateVirtualInstanceRequest) (*openapi.CreateVirtualInstanceResponse, *http.Response, error) {
	fake.createVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.createVirtualInstanceExecuteReturnsOnCall[len(fake.createVirtualInstanceExecuteArgsForCall)]
	fake.createVirtualInstanceExecuteArgsForCall = append(fake.createVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiCreateVirtualInstanceRequest
	}{arg1})
	stub := fake.CreateVirtualInstanceExecuteStub
	fakeReturns := fake.createVirtualInstanceExecuteReturns
	fake.recordInvocation("CreateVirtualInstanceExecute", []interface{}{arg1})
	fake.createVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecuteCallCount() int {
	fake.createVirtualInstanceExecuteMutex.RLock()
	defer fake.createVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.createVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecuteCalls(stub func(openapi.ApiCreateVirtualInstanceRequest) (*openapi.CreateVirtualInstanceResponse, *http.Response, error)) {
	fake.createVirtualInstanceExecuteMutex.Lock()
	defer fake.createVirtualInstanceExecuteMutex.Unlock()
	fake.CreateVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecuteArgsForCall(i int) openapi.ApiCreateVirtualInstanceRequest {
	fake.createVirtualInstanceExecuteMutex.RLock()
	defer fake.createVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.createVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecuteReturns(result1 *openapi.CreateVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.createVirtualInstanceExecuteMutex.Lock()
	defer fake.createVirtualInstanceExecuteMutex.Unlock()
	fake.CreateVirtualInstanceExecuteStub = nil
	fake.createVirtualInstanceExecuteReturns = struct {
		result1 *openapi.CreateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) CreateVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.CreateVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.createVirtualInstanceExecuteMutex.Lock()
	defer fake.createVirtualInstanceExecuteMutex.Unlock()
	fake.CreateVirtualInstanceExecuteStub = nil
	if fake.createVirtualInstanceExecuteReturnsOnCall == nil {
		fake.createVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.CreateVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.createVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.CreateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiDeleteVirtualInstanceRequest {
	fake.deleteVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.deleteVirtualInstanceReturnsOnCall[len(fake.deleteVirtualInstanceArgsForCall)]
	fake.deleteVirtualInstanceArgsForCall = append(fake.deleteVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteVirtualInstanceStub
	fakeReturns := fake.deleteVirtualInstanceReturns
	fake.recordInvocation("DeleteVirtualInstance", []interface{}{arg1, arg2})
	fake.deleteVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceCallCount() int {
	fake.deleteVirtualInstanceMutex.RLock()
	defer fake.deleteVirtualInstanceMutex.RUnlock()
	return len(fake.deleteVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiDeleteVirtualInstanceRequest) {
	fake.deleteVirtualInstanceMutex.Lock()
	defer fake.deleteVirtualInstanceMutex.Unlock()
	fake.DeleteVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.deleteVirtualInstanceMutex.RLock()
	defer fake.deleteVirtualInstanceMutex.RUnlock()
	argsForCall := fake.deleteVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceReturns(result1 openapi.ApiDeleteVirtualInstanceRequest) {
	fake.deleteVirtualInstanceMutex.Lock()
	defer fake.deleteVirtualInstanceMutex.Unlock()
	fake.DeleteVirtualInstanceStub = nil
	fake.deleteVirtualInstanceReturns = struct {
		result1 openapi.ApiDeleteVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiDeleteVirtualInstanceRequest) {
	fake.deleteVirtualInstanceMutex.Lock()
	defer fake.deleteVirtualInstanceMutex.Unlock()
	fake.DeleteVirtualInstanceStub = nil
	if fake.deleteVirtualInstanceReturnsOnCall == nil {
		fake.deleteVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiDeleteVirtualInstanceRequest
		})
	}
	fake.deleteVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiDeleteVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecute(arg1 openapi.ApiDeleteVirtualInstanceRequest) (*openapi.DeleteVirtualInstanceResponse, *http.Response, error) {
	fake.deleteVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.deleteVirtualInstanceExecuteReturnsOnCall[len(fake.deleteVirtualInstanceExecuteArgsForCall)]
	fake.deleteVirtualInstanceExecuteArgsForCall = append(fake.deleteVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiDeleteVirtualInstanceRequest
	}{arg1})
	stub := fake.DeleteVirtualInstanceExecuteStub
	fakeReturns := fake.deleteVirtualInstanceExecuteReturns
	fake.recordInvocation("DeleteVirtualInstanceExecute", []interface{}{arg1})
	fake.deleteVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecuteCallCount() int {
	fake.deleteVirtualInstanceExecuteMutex.RLock()
	defer fake.deleteVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.deleteVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecuteCalls(stub func(openapi.ApiDeleteVirtualInstanceRequest) (*openapi.DeleteVirtualInstanceResponse, *http.Response, error)) {
	fake.deleteVirtualInstanceExecuteMutex.Lock()
	defer fake.deleteVirtualInstanceExecuteMutex.Unlock()
	fake.DeleteVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecuteArgsForCall(i int) openapi.ApiDeleteVirtualInstanceRequest {
	fake.deleteVirtualInstanceExecuteMutex.RLock()
	defer fake.deleteVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.deleteVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecuteReturns(result1 *openapi.DeleteVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.deleteVirtualInstanceExecuteMutex.Lock()
	defer fake.deleteVirtualInstanceExecuteMutex.Unlock()
	fake.DeleteVirtualInstanceExecuteStub = nil
	fake.deleteVirtualInstanceExecuteReturns = struct {
		result1 *openapi.DeleteVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) DeleteVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.DeleteVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.deleteVirtualInstanceExecuteMutex.Lock()
	defer fake.deleteVirtualInstanceExecuteMutex.Unlock()
	fake.DeleteVirtualInstanceExecuteStub = nil
	if fake.deleteVirtualInstanceExecuteReturnsOnCall == nil {
		fake.deleteVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.DeleteVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.deleteVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.DeleteVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetCollectionMount(arg1 context.Context, arg2 string, arg3 string) openapi.ApiGetCollectionMountRequest {
	fake.getCollectionMountMutex.Lock()
	ret, specificReturn := fake.getCollectionMountReturnsOnCall[len(fake.getCollectionMountArgsForCall)]
	fake.getCollectionMountArgsForCall = append(fake.getCollectionMountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetCollectionMountStub
	fakeReturns := fake.getCollectionMountReturns
	fake.recordInvocation("GetCollectionMount", []interface{}{arg1, arg2, arg3})
	fake.getCollectionMountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountCallCount() int {
	fake.getCollectionMountMutex.RLock()
	defer fake.getCollectionMountMutex.RUnlock()
	return len(fake.getCollectionMountArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountCalls(stub func(context.Context, string, string) openapi.ApiGetCollectionMountRequest) {
	fake.getCollectionMountMutex.Lock()
	defer fake.getCollectionMountMutex.Unlock()
	fake.GetCollectionMountStub = stub
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountArgsForCall(i int) (context.Context, string, string) {
	fake.getCollectionMountMutex.RLock()
	defer fake.getCollectionMountMutex.RUnlock()
	argsForCall := fake.getCollectionMountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountReturns(result1 openapi.ApiGetCollectionMountRequest) {
	fake.getCollectionMountMutex.Lock()
	defer fake.getCollectionMountMutex.Unlock()
	fake.GetCollectionMountStub = nil
	fake.getCollectionMountReturns = struct {
		result1 openapi.ApiGetCollectionMountRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountReturnsOnCall(i int, result1 openapi.ApiGetCollectionMountRequest) {
	fake.getCollectionMountMutex.Lock()
	defer fake.getCollectionMountMutex.Unlock()
	fake.GetCollectionMountStub = nil
	if fake.getCollectionMountReturnsOnCall == nil {
		fake.getCollectionMountReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetCollectionMountRequest
		})
	}
	fake.getCollectionMountReturnsOnCall[i] = struct {
		result1 openapi.ApiGetCollectionMountRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecute(arg1 openapi.ApiGetCollectionMountRequest) (*openapi.CollectionMountResponse, *http.Response, error) {
	fake.getCollectionMountExecuteMutex.Lock()
	ret, specificReturn := fake.getCollectionMountExecuteReturnsOnCall[len(fake.getCollectionMountExecuteArgsForCall)]
	fake.getCollectionMountExecuteArgsForCall = append(fake.getCollectionMountExecuteArgsForCall, struct {
		arg1 openapi.ApiGetCollectionMountRequest
	}{arg1})
	stub := fake.GetCollectionMountExecuteStub
	fakeReturns := fake.getCollectionMountExecuteReturns
	fake.recordInvocation("GetCollectionMountExecute", []interface{}{arg1})
	fake.getCollectionMountExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecuteCallCount() int {
	fake.getCollectionMountExecuteMutex.RLock()
	defer fake.getCollectionMountExecuteMutex.RUnlock()
	return len(fake.getCollectionMountExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecuteCalls(stub func(openapi.ApiGetCollectionMountRequest) (*openapi.CollectionMountResponse, *http.Response, error)) {
	fake.getCollectionMountExecuteMutex.Lock()
	defer fake.getCollectionMountExecuteMutex.Unlock()
	fake.GetCollectionMountExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecuteArgsForCall(i int) openapi.ApiGetCollectionMountRequest {
	fake.getCollectionMountExecuteMutex.RLock()
	defer fake.getCollectionMountExecuteMutex.RUnlock()
	argsForCall := fake.getCollectionMountExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecuteReturns(result1 *openapi.CollectionMountResponse, result2 *http.Response, result3 error) {
	fake.getCollectionMountExecuteMutex.Lock()
	defer fake.getCollectionMountExecuteMutex.Unlock()
	fake.GetCollectionMountExecuteStub = nil
	fake.getCollectionMountExecuteReturns = struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetCollectionMountExecuteReturnsOnCall(i int, result1 *openapi.CollectionMountResponse, result2 *http.Response, result3 error) {
	fake.getCollectionMountExecuteMutex.Lock()
	defer fake.getCollectionMountExecuteMutex.Unlock()
	fake.GetCollectionMountExecuteStub = nil
	if fake.getCollectionMountExecuteReturnsOnCall == nil {
		fake.getCollectionMountExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.CollectionMountResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.getCollectionMountExecuteReturnsOnCall[i] = struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetMountOffsets(arg1 context.Context, arg2 string, arg3 string) openapi.ApiGetMountOffsetsRequest {
	fake.getMountOffsetsMutex.Lock()
	ret, specificReturn := fake.getMountOffsetsReturnsOnCall[len(fake.getMountOffsetsArgsForCall)]
	fake.getMountOffsetsArgsForCall = append(fake.getMountOffsetsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetMountOffsetsStub
	fakeReturns := fake.getMountOffsetsReturns
	fake.recordInvocation("GetMountOffsets", []interface{}{arg1, arg2, arg3})
	fake.getMountOffsetsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsCallCount() int {
	fake.getMountOffsetsMutex.RLock()
	defer fake.getMountOffsetsMutex.RUnlock()
	return len(fake.getMountOffsetsArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsCalls(stub func(context.Context, string, string) openapi.ApiGetMountOffsetsRequest) {
	fake.getMountOffsetsMutex.Lock()
	defer fake.getMountOffsetsMutex.Unlock()
	fake.GetMountOffsetsStub = stub
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsArgsForCall(i int) (context.Context, string, string) {
	fake.getMountOffsetsMutex.RLock()
	defer fake.getMountOffsetsMutex.RUnlock()
	argsForCall := fake.getMountOffsetsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsReturns(result1 openapi.ApiGetMountOffsetsRequest) {
	fake.getMountOffsetsMutex.Lock()
	defer fake.getMountOffsetsMutex.Unlock()
	fake.GetMountOffsetsStub = nil
	fake.getMountOffsetsReturns = struct {
		result1 openapi.ApiGetMountOffsetsRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsReturnsOnCall(i int, result1 openapi.ApiGetMountOffsetsRequest) {
	fake.getMountOffsetsMutex.Lock()
	defer fake.getMountOffsetsMutex.Unlock()
	fake.GetMountOffsetsStub = nil
	if fake.getMountOffsetsReturnsOnCall == nil {
		fake.getMountOffsetsReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetMountOffsetsRequest
		})
	}
	fake.getMountOffsetsReturnsOnCall[i] = struct {
		result1 openapi.ApiGetMountOffsetsRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecute(arg1 openapi.ApiGetMountOffsetsRequest) (*openapi.GetCollectionCommit, *http.Response, error) {
	fake.getMountOffsetsExecuteMutex.Lock()
	ret, specificReturn := fake.getMountOffsetsExecuteReturnsOnCall[len(fake.getMountOffsetsExecuteArgsForCall)]
	fake.getMountOffsetsExecuteArgsForCall = append(fake.getMountOffsetsExecuteArgsForCall, struct {
		arg1 openapi.ApiGetMountOffsetsRequest
	}{arg1})
	stub := fake.GetMountOffsetsExecuteStub
	fakeReturns := fake.getMountOffsetsExecuteReturns
	fake.recordInvocation("GetMountOffsetsExecute", []interface{}{arg1})
	fake.getMountOffsetsExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecuteCallCount() int {
	fake.getMountOffsetsExecuteMutex.RLock()
	defer fake.getMountOffsetsExecuteMutex.RUnlock()
	return len(fake.getMountOffsetsExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecuteCalls(stub func(openapi.ApiGetMountOffsetsRequest) (*openapi.GetCollectionCommit, *http.Response, error)) {
	fake.getMountOffsetsExecuteMutex.Lock()
	defer fake.getMountOffsetsExecuteMutex.Unlock()
	fake.GetMountOffsetsExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecuteArgsForCall(i int) openapi.ApiGetMountOffsetsRequest {
	fake.getMountOffsetsExecuteMutex.RLock()
	defer fake.getMountOffsetsExecuteMutex.RUnlock()
	argsForCall := fake.getMountOffsetsExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecuteReturns(result1 *openapi.GetCollectionCommit, result2 *http.Response, result3 error) {
	fake.getMountOffsetsExecuteMutex.Lock()
	defer fake.getMountOffsetsExecuteMutex.Unlock()
	fake.GetMountOffsetsExecuteStub = nil
	fake.getMountOffsetsExecuteReturns = struct {
		result1 *openapi.GetCollectionCommit
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetMountOffsetsExecuteReturnsOnCall(i int, result1 *openapi.GetCollectionCommit, result2 *http.Response, result3 error) {
	fake.getMountOffsetsExecuteMutex.Lock()
	defer fake.getMountOffsetsExecuteMutex.Unlock()
	fake.GetMountOffsetsExecuteStub = nil
	if fake.getMountOffsetsExecuteReturnsOnCall == nil {
		fake.getMountOffsetsExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.GetCollectionCommit
			result2 *http.Response
			result3 error
		})
	}
	fake.getMountOffsetsExecuteReturnsOnCall[i] = struct {
		result1 *openapi.GetCollectionCommit
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiGetVirtualInstanceRequest {
	fake.getVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.getVirtualInstanceReturnsOnCall[len(fake.getVirtualInstanceArgsForCall)]
	fake.getVirtualInstanceArgsForCall = append(fake.getVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetVirtualInstanceStub
	fakeReturns := fake.getVirtualInstanceReturns
	fake.recordInvocation("GetVirtualInstance", []interface{}{arg1, arg2})
	fake.getVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceCallCount() int {
	fake.getVirtualInstanceMutex.RLock()
	defer fake.getVirtualInstanceMutex.RUnlock()
	return len(fake.getVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiGetVirtualInstanceRequest) {
	fake.getVirtualInstanceMutex.Lock()
	defer fake.getVirtualInstanceMutex.Unlock()
	fake.GetVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.getVirtualInstanceMutex.RLock()
	defer fake.getVirtualInstanceMutex.RUnlock()
	argsForCall := fake.getVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceReturns(result1 openapi.ApiGetVirtualInstanceRequest) {
	fake.getVirtualInstanceMutex.Lock()
	defer fake.getVirtualInstanceMutex.Unlock()
	fake.GetVirtualInstanceStub = nil
	fake.getVirtualInstanceReturns = struct {
		result1 openapi.ApiGetVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiGetVirtualInstanceRequest) {
	fake.getVirtualInstanceMutex.Lock()
	defer fake.getVirtualInstanceMutex.Unlock()
	fake.GetVirtualInstanceStub = nil
	if fake.getVirtualInstanceReturnsOnCall == nil {
		fake.getVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetVirtualInstanceRequest
		})
	}
	fake.getVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiGetVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecute(arg1 openapi.ApiGetVirtualInstanceRequest) (*openapi.GetVirtualInstanceResponse, *http.Response, error) {
	fake.getVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.getVirtualInstanceExecuteReturnsOnCall[len(fake.getVirtualInstanceExecuteArgsForCall)]
	fake.getVirtualInstanceExecuteArgsForCall = append(fake.getVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiGetVirtualInstanceRequest
	}{arg1})
	stub := fake.GetVirtualInstanceExecuteStub
	fakeReturns := fake.getVirtualInstanceExecuteReturns
	fake.recordInvocation("GetVirtualInstanceExecute", []interface{}{arg1})
	fake.getVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecuteCallCount() int {
	fake.getVirtualInstanceExecuteMutex.RLock()
	defer fake.getVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.getVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecuteCalls(stub func(openapi.ApiGetVirtualInstanceRequest) (*openapi.GetVirtualInstanceResponse, *http.Response, error)) {
	fake.getVirtualInstanceExecuteMutex.Lock()
	defer fake.getVirtualInstanceExecuteMutex.Unlock()
	fake.GetVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecuteArgsForCall(i int) openapi.ApiGetVirtualInstanceRequest {
	fake.getVirtualInstanceExecuteMutex.RLock()
	defer fake.getVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.getVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecuteReturns(result1 *openapi.GetVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.getVirtualInstanceExecuteMutex.Lock()
	defer fake.getVirtualInstanceExecuteMutex.Unlock()
	fake.GetVirtualInstanceExecuteStub = nil
	fake.getVirtualInstanceExecuteReturns = struct {
		result1 *openapi.GetVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.GetVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.getVirtualInstanceExecuteMutex.Lock()
	defer fake.getVirtualInstanceExecuteMutex.Unlock()
	fake.GetVirtualInstanceExecuteStub = nil
	if fake.getVirtualInstanceExecuteReturnsOnCall == nil {
		fake.getVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.GetVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.getVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.GetVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueries(arg1 context.Context, arg2 string) openapi.ApiGetVirtualInstanceQueriesRequest {
	fake.getVirtualInstanceQueriesMutex.Lock()
	ret, specificReturn := fake.getVirtualInstanceQueriesReturnsOnCall[len(fake.getVirtualInstanceQueriesArgsForCall)]
	fake.getVirtualInstanceQueriesArgsForCall = append(fake.getVirtualInstanceQueriesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetVirtualInstanceQueriesStub
	fakeReturns := fake.getVirtualInstanceQueriesReturns
	fake.recordInvocation("GetVirtualInstanceQueries", []interface{}{arg1, arg2})
	fake.getVirtualInstanceQueriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesCallCount() int {
	fake.getVirtualInstanceQueriesMutex.RLock()
	defer fake.getVirtualInstanceQueriesMutex.RUnlock()
	return len(fake.getVirtualInstanceQueriesArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesCalls(stub func(context.Context, string) openapi.ApiGetVirtualInstanceQueriesRequest) {
	fake.getVirtualInstanceQueriesMutex.Lock()
	defer fake.getVirtualInstanceQueriesMutex.Unlock()
	fake.GetVirtualInstanceQueriesStub = stub
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesArgsForCall(i int) (context.Context, string) {
	fake.getVirtualInstanceQueriesMutex.RLock()
	defer fake.getVirtualInstanceQueriesMutex.RUnlock()
	argsForCall := fake.getVirtualInstanceQueriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesReturns(result1 openapi.ApiGetVirtualInstanceQueriesRequest) {
	fake.getVirtualInstanceQueriesMutex.Lock()
	defer fake.getVirtualInstanceQueriesMutex.Unlock()
	fake.GetVirtualInstanceQueriesStub = nil
	fake.getVirtualInstanceQueriesReturns = struct {
		result1 openapi.ApiGetVirtualInstanceQueriesRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesReturnsOnCall(i int, result1 openapi.ApiGetVirtualInstanceQueriesRequest) {
	fake.getVirtualInstanceQueriesMutex.Lock()
	defer fake.getVirtualInstanceQueriesMutex.Unlock()
	fake.GetVirtualInstanceQueriesStub = nil
	if fake.getVirtualInstanceQueriesReturnsOnCall == nil {
		fake.getVirtualInstanceQueriesReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiGetVirtualInstanceQueriesRequest
		})
	}
	fake.getVirtualInstanceQueriesReturnsOnCall[i] = struct {
		result1 openapi.ApiGetVirtualInstanceQueriesRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecute(arg1 openapi.ApiGetVirtualInstanceQueriesRequest) (*openapi.ListQueriesResponse, *http.Response, error) {
	fake.getVirtualInstanceQueriesExecuteMutex.Lock()
	ret, specificReturn := fake.getVirtualInstanceQueriesExecuteReturnsOnCall[len(fake.getVirtualInstanceQueriesExecuteArgsForCall)]
	fake.getVirtualInstanceQueriesExecuteArgsForCall = append(fake.getVirtualInstanceQueriesExecuteArgsForCall, struct {
		arg1 openapi.ApiGetVirtualInstanceQueriesRequest
	}{arg1})
	stub := fake.GetVirtualInstanceQueriesExecuteStub
	fakeReturns := fake.getVirtualInstanceQueriesExecuteReturns
	fake.recordInvocation("GetVirtualInstanceQueriesExecute", []interface{}{arg1})
	fake.getVirtualInstanceQueriesExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecuteCallCount() int {
	fake.getVirtualInstanceQueriesExecuteMutex.RLock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.RUnlock()
	return len(fake.getVirtualInstanceQueriesExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecuteCalls(stub func(openapi.ApiGetVirtualInstanceQueriesRequest) (*openapi.ListQueriesResponse, *http.Response, error)) {
	fake.getVirtualInstanceQueriesExecuteMutex.Lock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.Unlock()
	fake.GetVirtualInstanceQueriesExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecuteArgsForCall(i int) openapi.ApiGetVirtualInstanceQueriesRequest {
	fake.getVirtualInstanceQueriesExecuteMutex.RLock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.RUnlock()
	argsForCall := fake.getVirtualInstanceQueriesExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecuteReturns(result1 *openapi.ListQueriesResponse, result2 *http.Response, result3 error) {
	fake.getVirtualInstanceQueriesExecuteMutex.Lock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.Unlock()
	fake.GetVirtualInstanceQueriesExecuteStub = nil
	fake.getVirtualInstanceQueriesExecuteReturns = struct {
		result1 *openapi.ListQueriesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) GetVirtualInstanceQueriesExecuteReturnsOnCall(i int, result1 *openapi.ListQueriesResponse, result2 *http.Response, result3 error) {
	fake.getVirtualInstanceQueriesExecuteMutex.Lock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.Unlock()
	fake.GetVirtualInstanceQueriesExecuteStub = nil
	if fake.getVirtualInstanceQueriesExecuteReturnsOnCall == nil {
		fake.getVirtualInstanceQueriesExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListQueriesResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.getVirtualInstanceQueriesExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListQueriesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ListCollectionMounts(arg1 context.Context, arg2 string) openapi.ApiListCollectionMountsRequest {
	fake.listCollectionMountsMutex.Lock()
	ret, specificReturn := fake.listCollectionMountsReturnsOnCall[len(fake.listCollectionMountsArgsForCall)]
	fake.listCollectionMountsArgsForCall = append(fake.listCollectionMountsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ListCollectionMountsStub
	fakeReturns := fake.listCollectionMountsReturns
	fake.recordInvocation("ListCollectionMounts", []interface{}{arg1, arg2})
	fake.listCollectionMountsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsCallCount() int {
	fake.listCollectionMountsMutex.RLock()
	defer fake.listCollectionMountsMutex.RUnlock()
	return len(fake.listCollectionMountsArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsCalls(stub func(context.Context, string) openapi.ApiListCollectionMountsRequest) {
	fake.listCollectionMountsMutex.Lock()
	defer fake.listCollectionMountsMutex.Unlock()
	fake.ListCollectionMountsStub = stub
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsArgsForCall(i int) (context.Context, string) {
	fake.listCollectionMountsMutex.RLock()
	defer fake.listCollectionMountsMutex.RUnlock()
	argsForCall := fake.listCollectionMountsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsReturns(result1 openapi.ApiListCollectionMountsRequest) {
	fake.listCollectionMountsMutex.Lock()
	defer fake.listCollectionMountsMutex.Unlock()
	fake.ListCollectionMountsStub = nil
	fake.listCollectionMountsReturns = struct {
		result1 openapi.ApiListCollectionMountsRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsReturnsOnCall(i int, result1 openapi.ApiListCollectionMountsRequest) {
	fake.listCollectionMountsMutex.Lock()
	defer fake.listCollectionMountsMutex.Unlock()
	fake.ListCollectionMountsStub = nil
	if fake.listCollectionMountsReturnsOnCall == nil {
		fake.listCollectionMountsReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiListCollectionMountsRequest
		})
	}
	fake.listCollectionMountsReturnsOnCall[i] = struct {
		result1 openapi.ApiListCollectionMountsRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecute(arg1 openapi.ApiListCollectionMountsRequest) (*openapi.ListCollectionMountsResponse, *http.Response, error) {
	fake.listCollectionMountsExecuteMutex.Lock()
	ret, specificReturn := fake.listCollectionMountsExecuteReturnsOnCall[len(fake.listCollectionMountsExecuteArgsForCall)]
	fake.listCollectionMountsExecuteArgsForCall = append(fake.listCollectionMountsExecuteArgsForCall, struct {
		arg1 openapi.ApiListCollectionMountsRequest
	}{arg1})
	stub := fake.ListCollectionMountsExecuteStub
	fakeReturns := fake.listCollectionMountsExecuteReturns
	fake.recordInvocation("ListCollectionMountsExecute", []interface{}{arg1})
	fake.listCollectionMountsExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecuteCallCount() int {
	fake.listCollectionMountsExecuteMutex.RLock()
	defer fake.listCollectionMountsExecuteMutex.RUnlock()
	return len(fake.listCollectionMountsExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecuteCalls(stub func(openapi.ApiListCollectionMountsRequest) (*openapi.ListCollectionMountsResponse, *http.Response, error)) {
	fake.listCollectionMountsExecuteMutex.Lock()
	defer fake.listCollectionMountsExecuteMutex.Unlock()
	fake.ListCollectionMountsExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecuteArgsForCall(i int) openapi.ApiListCollectionMountsRequest {
	fake.listCollectionMountsExecuteMutex.RLock()
	defer fake.listCollectionMountsExecuteMutex.RUnlock()
	argsForCall := fake.listCollectionMountsExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecuteReturns(result1 *openapi.ListCollectionMountsResponse, result2 *http.Response, result3 error) {
	fake.listCollectionMountsExecuteMutex.Lock()
	defer fake.listCollectionMountsExecuteMutex.Unlock()
	fake.ListCollectionMountsExecuteStub = nil
	fake.listCollectionMountsExecuteReturns = struct {
		result1 *openapi.ListCollectionMountsResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ListCollectionMountsExecuteReturnsOnCall(i int, result1 *openapi.ListCollectionMountsResponse, result2 *http.Response, result3 error) {
	fake.listCollectionMountsExecuteMutex.Lock()
	defer fake.listCollectionMountsExecuteMutex.Unlock()
	fake.ListCollectionMountsExecuteStub = nil
	if fake.listCollectionMountsExecuteReturnsOnCall == nil {
		fake.listCollectionMountsExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListCollectionMountsResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.listCollectionMountsExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListCollectionMountsResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstances(arg1 context.Context) openapi.ApiListVirtualInstancesRequest {
	fake.listVirtualInstancesMutex.Lock()
	ret, specificReturn := fake.listVirtualInstancesReturnsOnCall[len(fake.listVirtualInstancesArgsForCall)]
	fake.listVirtualInstancesArgsForCall = append(fake.listVirtualInstancesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListVirtualInstancesStub
	fakeReturns := fake.listVirtualInstancesReturns
	fake.recordInvocation("ListVirtualInstances", []interface{}{arg1})
	fake.listVirtualInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesCallCount() int {
	fake.listVirtualInstancesMutex.RLock()
	defer fake.listVirtualInstancesMutex.RUnlock()
	return len(fake.listVirtualInstancesArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesCalls(stub func(context.Context) openapi.ApiListVirtualInstancesRequest) {
	fake.listVirtualInstancesMutex.Lock()
	defer fake.listVirtualInstancesMutex.Unlock()
	fake.ListVirtualInstancesStub = stub
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesArgsForCall(i int) context.Context {
	fake.listVirtualInstancesMutex.RLock()
	defer fake.listVirtualInstancesMutex.RUnlock()
	argsForCall := fake.listVirtualInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesReturns(result1 openapi.ApiListVirtualInstancesRequest) {
	fake.listVirtualInstancesMutex.Lock()
	defer fake.listVirtualInstancesMutex.Unlock()
	fake.ListVirtualInstancesStub = nil
	fake.listVirtualInstancesReturns = struct {
		result1 openapi.ApiListVirtualInstancesRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesReturnsOnCall(i int, result1 openapi.ApiListVirtualInstancesRequest) {
	fake.listVirtualInstancesMutex.Lock()
	defer fake.listVirtualInstancesMutex.Unlock()
	fake.ListVirtualInstancesStub = nil
	if fake.listVirtualInstancesReturnsOnCall == nil {
		fake.listVirtualInstancesReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiListVirtualInstancesRequest
		})
	}
	fake.listVirtualInstancesReturnsOnCall[i] = struct {
		result1 openapi.ApiListVirtualInstancesRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecute(arg1 openapi.ApiListVirtualInstancesRequest) (*openapi.ListVirtualInstancesResponse, *http.Response, error) {
	fake.listVirtualInstancesExecuteMutex.Lock()
	ret, specificReturn := fake.listVirtualInstancesExecuteReturnsOnCall[len(fake.listVirtualInstancesExecuteArgsForCall)]
	fake.listVirtualInstancesExecuteArgsForCall = append(fake.listVirtualInstancesExecuteArgsForCall, struct {
		arg1 openapi.ApiListVirtualInstancesRequest
	}{arg1})
	stub := fake.ListVirtualInstancesExecuteStub
	fakeReturns := fake.listVirtualInstancesExecuteReturns
	fake.recordInvocation("ListVirtualInstancesExecute", []interface{}{arg1})
	fake.listVirtualInstancesExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecuteCallCount() int {
	fake.listVirtualInstancesExecuteMutex.RLock()
	defer fake.listVirtualInstancesExecuteMutex.RUnlock()
	return len(fake.listVirtualInstancesExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecuteCalls(stub func(openapi.ApiListVirtualInstancesRequest) (*openapi.ListVirtualInstancesResponse, *http.Response, error)) {
	fake.listVirtualInstancesExecuteMutex.Lock()
	defer fake.listVirtualInstancesExecuteMutex.Unlock()
	fake.ListVirtualInstancesExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecuteArgsForCall(i int) openapi.ApiListVirtualInstancesRequest {
	fake.listVirtualInstancesExecuteMutex.RLock()
	defer fake.listVirtualInstancesExecuteMutex.RUnlock()
	argsForCall := fake.listVirtualInstancesExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecuteReturns(result1 *openapi.ListVirtualInstancesResponse, result2 *http.Response, result3 error) {
	fake.listVirtualInstancesExecuteMutex.Lock()
	defer fake.listVirtualInstancesExecuteMutex.Unlock()
	fake.ListVirtualInstancesExecuteStub = nil
	fake.listVirtualInstancesExecuteReturns = struct {
		result1 *openapi.ListVirtualInstancesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ListVirtualInstancesExecuteReturnsOnCall(i int, result1 *openapi.ListVirtualInstancesResponse, result2 *http.Response, result3 error) {
	fake.listVirtualInstancesExecuteMutex.Lock()
	defer fake.listVirtualInstancesExecuteMutex.Unlock()
	fake.ListVirtualInstancesExecuteStub = nil
	if fake.listVirtualInstancesExecuteReturnsOnCall == nil {
		fake.listVirtualInstancesExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ListVirtualInstancesResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.listVirtualInstancesExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ListVirtualInstancesResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) MountCollection(arg1 context.Context, arg2 string) openapi.ApiMountCollectionRequest {
	fake.mountCollectionMutex.Lock()
	ret, specificReturn := fake.mountCollectionReturnsOnCall[len(fake.mountCollectionArgsForCall)]
	fake.mountCollectionArgsForCall = append(fake.mountCollectionArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.MountCollectionStub
	fakeReturns := fake.mountCollectionReturns
	fake.recordInvocation("MountCollection", []interface{}{arg1, arg2})
	fake.mountCollectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) MountCollectionCallCount() int {
	fake.mountCollectionMutex.RLock()
	defer fake.mountCollectionMutex.RUnlock()
	return len(fake.mountCollectionArgsForCall)
}

func (fake *FakeVirtualInstancesApi) MountCollectionCalls(stub func(context.Context, string) openapi.ApiMountCollectionRequest) {
	fake.mountCollectionMutex.Lock()
	defer fake.mountCollectionMutex.Unlock()
	fake.MountCollectionStub = stub
}

func (fake *FakeVirtualInstancesApi) MountCollectionArgsForCall(i int) (context.Context, string) {
	fake.mountCollectionMutex.RLock()
	defer fake.mountCollectionMutex.RUnlock()
	argsForCall := fake.mountCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) MountCollectionReturns(result1 openapi.ApiMountCollectionRequest) {
	fake.mountCollectionMutex.Lock()
	defer fake.mountCollectionMutex.Unlock()
	fake.MountCollectionStub = nil
	fake.mountCollectionReturns = struct {
		result1 openapi.ApiMountCollectionRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) MountCollectionReturnsOnCall(i int, result1 openapi.ApiMountCollectionRequest) {
	fake.mountCollectionMutex.Lock()
	defer fake.mountCollectionMutex.Unlock()
	fake.MountCollectionStub = nil
	if fake.mountCollectionReturnsOnCall == nil {
		fake.mountCollectionReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiMountCollectionRequest
		})
	}
	fake.mountCollectionReturnsOnCall[i] = struct {
		result1 openapi.ApiMountCollectionRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecute(arg1 openapi.ApiMountCollectionRequest) (*openapi.CreateCollectionMountsResponse, *http.Response, error) {
	fake.mountCollectionExecuteMutex.Lock()
	ret, specificReturn := fake.mountCollectionExecuteReturnsOnCall[len(fake.mountCollectionExecuteArgsForCall)]
	fake.mountCollectionExecuteArgsForCall = append(fake.mountCollectionExecuteArgsForCall, struct {
		arg1 openapi.ApiMountCollectionRequest
	}{arg1})
	stub := fake.MountCollectionExecuteStub
	fakeReturns := fake.mountCollectionExecuteReturns
	fake.recordInvocation("MountCollectionExecute", []interface{}{arg1})
	fake.mountCollectionExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecuteCallCount() int {
	fake.mountCollectionExecuteMutex.RLock()
	defer fake.mountCollectionExecuteMutex.RUnlock()
	return len(fake.mountCollectionExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecuteCalls(stub func(openapi.ApiMountCollectionRequest) (*openapi.CreateCollectionMountsResponse, *http.Response, error)) {
	fake.mountCollectionExecuteMutex.Lock()
	defer fake.mountCollectionExecuteMutex.Unlock()
	fake.MountCollectionExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecuteArgsForCall(i int) openapi.ApiMountCollectionRequest {
	fake.mountCollectionExecuteMutex.RLock()
	defer fake.mountCollectionExecuteMutex.RUnlock()
	argsForCall := fake.mountCollectionExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecuteReturns(result1 *openapi.CreateCollectionMountsResponse, result2 *http.Response, result3 error) {
	fake.mountCollectionExecuteMutex.Lock()
	defer fake.mountCollectionExecuteMutex.Unlock()
	fake.MountCollectionExecuteStub = nil
	fake.mountCollectionExecuteReturns = struct {
		result1 *openapi.CreateCollectionMountsResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) MountCollectionExecuteReturnsOnCall(i int, result1 *openapi.CreateCollectionMountsResponse, result2 *http.Response, result3 error) {
	fake.mountCollectionExecuteMutex.Lock()
	defer fake.mountCollectionExecuteMutex.Unlock()
	fake.MountCollectionExecuteStub = nil
	if fake.mountCollectionExecuteReturnsOnCall == nil {
		fake.mountCollectionExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.CreateCollectionMountsResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.mountCollectionExecuteReturnsOnCall[i] = struct {
		result1 *openapi.CreateCollectionMountsResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiQueryVirtualInstanceRequest {
	fake.queryVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.queryVirtualInstanceReturnsOnCall[len(fake.queryVirtualInstanceArgsForCall)]
	fake.queryVirtualInstanceArgsForCall = append(fake.queryVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.QueryVirtualInstanceStub
	fakeReturns := fake.queryVirtualInstanceReturns
	fake.recordInvocation("QueryVirtualInstance", []interface{}{arg1, arg2})
	fake.queryVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceCallCount() int {
	fake.queryVirtualInstanceMutex.RLock()
	defer fake.queryVirtualInstanceMutex.RUnlock()
	return len(fake.queryVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiQueryVirtualInstanceRequest) {
	fake.queryVirtualInstanceMutex.Lock()
	defer fake.queryVirtualInstanceMutex.Unlock()
	fake.QueryVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.queryVirtualInstanceMutex.RLock()
	defer fake.queryVirtualInstanceMutex.RUnlock()
	argsForCall := fake.queryVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceReturns(result1 openapi.ApiQueryVirtualInstanceRequest) {
	fake.queryVirtualInstanceMutex.Lock()
	defer fake.queryVirtualInstanceMutex.Unlock()
	fake.QueryVirtualInstanceStub = nil
	fake.queryVirtualInstanceReturns = struct {
		result1 openapi.ApiQueryVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiQueryVirtualInstanceRequest) {
	fake.queryVirtualInstanceMutex.Lock()
	defer fake.queryVirtualInstanceMutex.Unlock()
	fake.QueryVirtualInstanceStub = nil
	if fake.queryVirtualInstanceReturnsOnCall == nil {
		fake.queryVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiQueryVirtualInstanceRequest
		})
	}
	fake.queryVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiQueryVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecute(arg1 openapi.ApiQueryVirtualInstanceRequest) (*openapi.QueryResponse, *http.Response, error) {
	fake.queryVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.queryVirtualInstanceExecuteReturnsOnCall[len(fake.queryVirtualInstanceExecuteArgsForCall)]
	fake.queryVirtualInstanceExecuteArgsForCall = append(fake.queryVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiQueryVirtualInstanceRequest
	}{arg1})
	stub := fake.QueryVirtualInstanceExecuteStub
	fakeReturns := fake.queryVirtualInstanceExecuteReturns
	fake.recordInvocation("QueryVirtualInstanceExecute", []interface{}{arg1})
	fake.queryVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecuteCallCount() int {
	fake.queryVirtualInstanceExecuteMutex.RLock()
	defer fake.queryVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.queryVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecuteCalls(stub func(openapi.ApiQueryVirtualInstanceRequest) (*openapi.QueryResponse, *http.Response, error)) {
	fake.queryVirtualInstanceExecuteMutex.Lock()
	defer fake.queryVirtualInstanceExecuteMutex.Unlock()
	fake.QueryVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecuteArgsForCall(i int) openapi.ApiQueryVirtualInstanceRequest {
	fake.queryVirtualInstanceExecuteMutex.RLock()
	defer fake.queryVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.queryVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecuteReturns(result1 *openapi.QueryResponse, result2 *http.Response, result3 error) {
	fake.queryVirtualInstanceExecuteMutex.Lock()
	defer fake.queryVirtualInstanceExecuteMutex.Unlock()
	fake.QueryVirtualInstanceExecuteStub = nil
	fake.queryVirtualInstanceExecuteReturns = struct {
		result1 *openapi.QueryResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) QueryVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.QueryResponse, result2 *http.Response, result3 error) {
	fake.queryVirtualInstanceExecuteMutex.Lock()
	defer fake.queryVirtualInstanceExecuteMutex.Unlock()
	fake.QueryVirtualInstanceExecuteStub = nil
	if fake.queryVirtualInstanceExecuteReturnsOnCall == nil {
		fake.queryVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.QueryResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.queryVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.QueryResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiResumeVirtualInstanceRequest {
	fake.resumeVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.resumeVirtualInstanceReturnsOnCall[len(fake.resumeVirtualInstanceArgsForCall)]
	fake.resumeVirtualInstanceArgsForCall = append(fake.resumeVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ResumeVirtualInstanceStub
	fakeReturns := fake.resumeVirtualInstanceReturns
	fake.recordInvocation("ResumeVirtualInstance", []interface{}{arg1, arg2})
	fake.resumeVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceCallCount() int {
	fake.resumeVirtualInstanceMutex.RLock()
	defer fake.resumeVirtualInstanceMutex.RUnlock()
	return len(fake.resumeVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiResumeVirtualInstanceRequest) {
	fake.resumeVirtualInstanceMutex.Lock()
	defer fake.resumeVirtualInstanceMutex.Unlock()
	fake.ResumeVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.resumeVirtualInstanceMutex.RLock()
	defer fake.resumeVirtualInstanceMutex.RUnlock()
	argsForCall := fake.resumeVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceReturns(result1 openapi.ApiResumeVirtualInstanceRequest) {
	fake.resumeVirtualInstanceMutex.Lock()
	defer fake.resumeVirtualInstanceMutex.Unlock()
	fake.ResumeVirtualInstanceStub = nil
	fake.resumeVirtualInstanceReturns = struct {
		result1 openapi.ApiResumeVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiResumeVirtualInstanceRequest) {
	fake.resumeVirtualInstanceMutex.Lock()
	defer fake.resumeVirtualInstanceMutex.Unlock()
	fake.ResumeVirtualInstanceStub = nil
	if fake.resumeVirtualInstanceReturnsOnCall == nil {
		fake.resumeVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiResumeVirtualInstanceRequest
		})
	}
	fake.resumeVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiResumeVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecute(arg1 openapi.ApiResumeVirtualInstanceRequest) (*openapi.ResumeVirtualInstanceResponse, *http.Response, error) {
	fake.resumeVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.resumeVirtualInstanceExecuteReturnsOnCall[len(fake.resumeVirtualInstanceExecuteArgsForCall)]
	fake.resumeVirtualInstanceExecuteArgsForCall = append(fake.resumeVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiResumeVirtualInstanceRequest
	}{arg1})
	stub := fake.ResumeVirtualInstanceExecuteStub
	fakeReturns := fake.resumeVirtualInstanceExecuteReturns
	fake.recordInvocation("ResumeVirtualInstanceExecute", []interface{}{arg1})
	fake.resumeVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecuteCallCount() int {
	fake.resumeVirtualInstanceExecuteMutex.RLock()
	defer fake.resumeVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.resumeVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecuteCalls(stub func(openapi.ApiResumeVirtualInstanceRequest) (*openapi.ResumeVirtualInstanceResponse, *http.Response, error)) {
	fake.resumeVirtualInstanceExecuteMutex.Lock()
	defer fake.resumeVirtualInstanceExecuteMutex.Unlock()
	fake.ResumeVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecuteArgsForCall(i int) openapi.ApiResumeVirtualInstanceRequest {
	fake.resumeVirtualInstanceExecuteMutex.RLock()
	defer fake.resumeVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.resumeVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecuteReturns(result1 *openapi.ResumeVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.resumeVirtualInstanceExecuteMutex.Lock()
	defer fake.resumeVirtualInstanceExecuteMutex.Unlock()
	fake.ResumeVirtualInstanceExecuteStub = nil
	fake.resumeVirtualInstanceExecuteReturns = struct {
		result1 *openapi.ResumeVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) ResumeVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.ResumeVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.resumeVirtualInstanceExecuteMutex.Lock()
	defer fake.resumeVirtualInstanceExecuteMutex.Unlock()
	fake.ResumeVirtualInstanceExecuteStub = nil
	if fake.resumeVirtualInstanceExecuteReturnsOnCall == nil {
		fake.resumeVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.ResumeVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.resumeVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.ResumeVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiSetVirtualInstanceRequest {
	fake.setVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.setVirtualInstanceReturnsOnCall[len(fake.setVirtualInstanceArgsForCall)]
	fake.setVirtualInstanceArgsForCall = append(fake.setVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SetVirtualInstanceStub
	fakeReturns := fake.setVirtualInstanceReturns
	fake.recordInvocation("SetVirtualInstance", []interface{}{arg1, arg2})
	fake.setVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceCallCount() int {
	fake.setVirtualInstanceMutex.RLock()
	defer fake.setVirtualInstanceMutex.RUnlock()
	return len(fake.setVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiSetVirtualInstanceRequest) {
	fake.setVirtualInstanceMutex.Lock()
	defer fake.setVirtualInstanceMutex.Unlock()
	fake.SetVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.setVirtualInstanceMutex.RLock()
	defer fake.setVirtualInstanceMutex.RUnlock()
	argsForCall := fake.setVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceReturns(result1 openapi.ApiSetVirtualInstanceRequest) {
	fake.setVirtualInstanceMutex.Lock()
	defer fake.setVirtualInstanceMutex.Unlock()
	fake.SetVirtualInstanceStub = nil
	fake.setVirtualInstanceReturns = struct {
		result1 openapi.ApiSetVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiSetVirtualInstanceRequest) {
	fake.setVirtualInstanceMutex.Lock()
	defer fake.setVirtualInstanceMutex.Unlock()
	fake.SetVirtualInstanceStub = nil
	if fake.setVirtualInstanceReturnsOnCall == nil {
		fake.setVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiSetVirtualInstanceRequest
		})
	}
	fake.setVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiSetVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecute(arg1 openapi.ApiSetVirtualInstanceRequest) (*openapi.UpdateVirtualInstanceResponse, *http.Response, error) {
	fake.setVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.setVirtualInstanceExecuteReturnsOnCall[len(fake.setVirtualInstanceExecuteArgsForCall)]
	fake.setVirtualInstanceExecuteArgsForCall = append(fake.setVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiSetVirtualInstanceRequest
	}{arg1})
	stub := fake.SetVirtualInstanceExecuteStub
	fakeReturns := fake.setVirtualInstanceExecuteReturns
	fake.recordInvocation("SetVirtualInstanceExecute", []interface{}{arg1})
	fake.setVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecuteCallCount() int {
	fake.setVirtualInstanceExecuteMutex.RLock()
	defer fake.setVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.setVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecuteCalls(stub func(openapi.ApiSetVirtualInstanceRequest) (*openapi.UpdateVirtualInstanceResponse, *http.Response, error)) {
	fake.setVirtualInstanceExecuteMutex.Lock()
	defer fake.setVirtualInstanceExecuteMutex.Unlock()
	fake.SetVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecuteArgsForCall(i int) openapi.ApiSetVirtualInstanceRequest {
	fake.setVirtualInstanceExecuteMutex.RLock()
	defer fake.setVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.setVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecuteReturns(result1 *openapi.UpdateVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.setVirtualInstanceExecuteMutex.Lock()
	defer fake.setVirtualInstanceExecuteMutex.Unlock()
	fake.SetVirtualInstanceExecuteStub = nil
	fake.setVirtualInstanceExecuteReturns = struct {
		result1 *openapi.UpdateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) SetVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.UpdateVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.setVirtualInstanceExecuteMutex.Lock()
	defer fake.setVirtualInstanceExecuteMutex.Unlock()
	fake.SetVirtualInstanceExecuteStub = nil
	if fake.setVirtualInstanceExecuteReturnsOnCall == nil {
		fake.setVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.UpdateVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.setVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.UpdateVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstance(arg1 context.Context, arg2 string) openapi.ApiSuspendVirtualInstanceRequest {
	fake.suspendVirtualInstanceMutex.Lock()
	ret, specificReturn := fake.suspendVirtualInstanceReturnsOnCall[len(fake.suspendVirtualInstanceArgsForCall)]
	fake.suspendVirtualInstanceArgsForCall = append(fake.suspendVirtualInstanceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.SuspendVirtualInstanceStub
	fakeReturns := fake.suspendVirtualInstanceReturns
	fake.recordInvocation("SuspendVirtualInstance", []interface{}{arg1, arg2})
	fake.suspendVirtualInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceCallCount() int {
	fake.suspendVirtualInstanceMutex.RLock()
	defer fake.suspendVirtualInstanceMutex.RUnlock()
	return len(fake.suspendVirtualInstanceArgsForCall)
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceCalls(stub func(context.Context, string) openapi.ApiSuspendVirtualInstanceRequest) {
	fake.suspendVirtualInstanceMutex.Lock()
	defer fake.suspendVirtualInstanceMutex.Unlock()
	fake.SuspendVirtualInstanceStub = stub
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceArgsForCall(i int) (context.Context, string) {
	fake.suspendVirtualInstanceMutex.RLock()
	defer fake.suspendVirtualInstanceMutex.RUnlock()
	argsForCall := fake.suspendVirtualInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceReturns(result1 openapi.ApiSuspendVirtualInstanceRequest) {
	fake.suspendVirtualInstanceMutex.Lock()
	defer fake.suspendVirtualInstanceMutex.Unlock()
	fake.SuspendVirtualInstanceStub = nil
	fake.suspendVirtualInstanceReturns = struct {
		result1 openapi.ApiSuspendVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceReturnsOnCall(i int, result1 openapi.ApiSuspendVirtualInstanceRequest) {
	fake.suspendVirtualInstanceMutex.Lock()
	defer fake.suspendVirtualInstanceMutex.Unlock()
	fake.SuspendVirtualInstanceStub = nil
	if fake.suspendVirtualInstanceReturnsOnCall == nil {
		fake.suspendVirtualInstanceReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiSuspendVirtualInstanceRequest
		})
	}
	fake.suspendVirtualInstanceReturnsOnCall[i] = struct {
		result1 openapi.ApiSuspendVirtualInstanceRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecute(arg1 openapi.ApiSuspendVirtualInstanceRequest) (*openapi.SuspendVirtualInstanceResponse, *http.Response, error) {
	fake.suspendVirtualInstanceExecuteMutex.Lock()
	ret, specificReturn := fake.suspendVirtualInstanceExecuteReturnsOnCall[len(fake.suspendVirtualInstanceExecuteArgsForCall)]
	fake.suspendVirtualInstanceExecuteArgsForCall = append(fake.suspendVirtualInstanceExecuteArgsForCall, struct {
		arg1 openapi.ApiSuspendVirtualInstanceRequest
	}{arg1})
	stub := fake.SuspendVirtualInstanceExecuteStub
	fakeReturns := fake.suspendVirtualInstanceExecuteReturns
	fake.recordInvocation("SuspendVirtualInstanceExecute", []interface{}{arg1})
	fake.suspendVirtualInstanceExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecuteCallCount() int {
	fake.suspendVirtualInstanceExecuteMutex.RLock()
	defer fake.suspendVirtualInstanceExecuteMutex.RUnlock()
	return len(fake.suspendVirtualInstanceExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecuteCalls(stub func(openapi.ApiSuspendVirtualInstanceRequest) (*openapi.SuspendVirtualInstanceResponse, *http.Response, error)) {
	fake.suspendVirtualInstanceExecuteMutex.Lock()
	defer fake.suspendVirtualInstanceExecuteMutex.Unlock()
	fake.SuspendVirtualInstanceExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecuteArgsForCall(i int) openapi.ApiSuspendVirtualInstanceRequest {
	fake.suspendVirtualInstanceExecuteMutex.RLock()
	defer fake.suspendVirtualInstanceExecuteMutex.RUnlock()
	argsForCall := fake.suspendVirtualInstanceExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecuteReturns(result1 *openapi.SuspendVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.suspendVirtualInstanceExecuteMutex.Lock()
	defer fake.suspendVirtualInstanceExecuteMutex.Unlock()
	fake.SuspendVirtualInstanceExecuteStub = nil
	fake.suspendVirtualInstanceExecuteReturns = struct {
		result1 *openapi.SuspendVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) SuspendVirtualInstanceExecuteReturnsOnCall(i int, result1 *openapi.SuspendVirtualInstanceResponse, result2 *http.Response, result3 error) {
	fake.suspendVirtualInstanceExecuteMutex.Lock()
	defer fake.suspendVirtualInstanceExecuteMutex.Unlock()
	fake.SuspendVirtualInstanceExecuteStub = nil
	if fake.suspendVirtualInstanceExecuteReturnsOnCall == nil {
		fake.suspendVirtualInstanceExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.SuspendVirtualInstanceResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.suspendVirtualInstanceExecuteReturnsOnCall[i] = struct {
		result1 *openapi.SuspendVirtualInstanceResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) UnmountCollection(arg1 context.Context, arg2 string, arg3 string) openapi.ApiUnmountCollectionRequest {
	fake.unmountCollectionMutex.Lock()
	ret, specificReturn := fake.unmountCollectionReturnsOnCall[len(fake.unmountCollectionArgsForCall)]
	fake.unmountCollectionArgsForCall = append(fake.unmountCollectionArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UnmountCollectionStub
	fakeReturns := fake.unmountCollectionReturns
	fake.recordInvocation("UnmountCollection", []interface{}{arg1, arg2, arg3})
	fake.unmountCollectionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionCallCount() int {
	fake.unmountCollectionMutex.RLock()
	defer fake.unmountCollectionMutex.RUnlock()
	return len(fake.unmountCollectionArgsForCall)
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionCalls(stub func(context.Context, string, string) openapi.ApiUnmountCollectionRequest) {
	fake.unmountCollectionMutex.Lock()
	defer fake.unmountCollectionMutex.Unlock()
	fake.UnmountCollectionStub = stub
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionArgsForCall(i int) (context.Context, string, string) {
	fake.unmountCollectionMutex.RLock()
	defer fake.unmountCollectionMutex.RUnlock()
	argsForCall := fake.unmountCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionReturns(result1 openapi.ApiUnmountCollectionRequest) {
	fake.unmountCollectionMutex.Lock()
	defer fake.unmountCollectionMutex.Unlock()
	fake.UnmountCollectionStub = nil
	fake.unmountCollectionReturns = struct {
		result1 openapi.ApiUnmountCollectionRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionReturnsOnCall(i int, result1 openapi.ApiUnmountCollectionRequest) {
	fake.unmountCollectionMutex.Lock()
	defer fake.unmountCollectionMutex.Unlock()
	fake.UnmountCollectionStub = nil
	if fake.unmountCollectionReturnsOnCall == nil {
		fake.unmountCollectionReturnsOnCall = make(map[int]struct {
			result1 openapi.ApiUnmountCollectionRequest
		})
	}
	fake.unmountCollectionReturnsOnCall[i] = struct {
		result1 openapi.ApiUnmountCollectionRequest
	}{result1}
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecute(arg1 openapi.ApiUnmountCollectionRequest) (*openapi.CollectionMountResponse, *http.Response, error) {
	fake.unmountCollectionExecuteMutex.Lock()
	ret, specificReturn := fake.unmountCollectionExecuteReturnsOnCall[len(fake.unmountCollectionExecuteArgsForCall)]
	fake.unmountCollectionExecuteArgsForCall = append(fake.unmountCollectionExecuteArgsForCall, struct {
		arg1 openapi.ApiUnmountCollectionRequest
	}{arg1})
	stub := fake.UnmountCollectionExecuteStub
	fakeReturns := fake.unmountCollectionExecuteReturns
	fake.recordInvocation("UnmountCollectionExecute", []interface{}{arg1})
	fake.unmountCollectionExecuteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecuteCallCount() int {
	fake.unmountCollectionExecuteMutex.RLock()
	defer fake.unmountCollectionExecuteMutex.RUnlock()
	return len(fake.unmountCollectionExecuteArgsForCall)
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecuteCalls(stub func(openapi.ApiUnmountCollectionRequest) (*openapi.CollectionMountResponse, *http.Response, error)) {
	fake.unmountCollectionExecuteMutex.Lock()
	defer fake.unmountCollectionExecuteMutex.Unlock()
	fake.UnmountCollectionExecuteStub = stub
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecuteArgsForCall(i int) openapi.ApiUnmountCollectionRequest {
	fake.unmountCollectionExecuteMutex.RLock()
	defer fake.unmountCollectionExecuteMutex.RUnlock()
	argsForCall := fake.unmountCollectionExecuteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecuteReturns(result1 *openapi.CollectionMountResponse, result2 *http.Response, result3 error) {
	fake.unmountCollectionExecuteMutex.Lock()
	defer fake.unmountCollectionExecuteMutex.Unlock()
	fake.UnmountCollectionExecuteStub = nil
	fake.unmountCollectionExecuteReturns = struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) UnmountCollectionExecuteReturnsOnCall(i int, result1 *openapi.CollectionMountResponse, result2 *http.Response, result3 error) {
	fake.unmountCollectionExecuteMutex.Lock()
	defer fake.unmountCollectionExecuteMutex.Unlock()
	fake.UnmountCollectionExecuteStub = nil
	if fake.unmountCollectionExecuteReturnsOnCall == nil {
		fake.unmountCollectionExecuteReturnsOnCall = make(map[int]struct {
			result1 *openapi.CollectionMountResponse
			result2 *http.Response
			result3 error
		})
	}
	fake.unmountCollectionExecuteReturnsOnCall[i] = struct {
		result1 *openapi.CollectionMountResponse
		result2 *http.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualInstancesApi) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVirtualInstanceMutex.RLock()
	defer fake.createVirtualInstanceMutex.RUnlock()
	fake.createVirtualInstanceExecuteMutex.RLock()
	defer fake.createVirtualInstanceExecuteMutex.RUnlock()
	fake.deleteVirtualInstanceMutex.RLock()
	defer fake.deleteVirtualInstanceMutex.RUnlock()
	fake.deleteVirtualInstanceExecuteMutex.RLock()
	defer fake.deleteVirtualInstanceExecuteMutex.RUnlock()
	fake.getCollectionMountMutex.RLock()
	defer fake.getCollectionMountMutex.RUnlock()
	fake.getCollectionMountExecuteMutex.RLock()
	defer fake.getCollectionMountExecuteMutex.RUnlock()
	fake.getMountOffsetsMutex.RLock()
	defer fake.getMountOffsetsMutex.RUnlock()
	fake.getMountOffsetsExecuteMutex.RLock()
	defer fake.getMountOffsetsExecuteMutex.RUnlock()
	fake.getVirtualInstanceMutex.RLock()
	defer fake.getVirtualInstanceMutex.RUnlock()
	fake.getVirtualInstanceExecuteMutex.RLock()
	defer fake.getVirtualInstanceExecuteMutex.RUnlock()
	fake.getVirtualInstanceQueriesMutex.RLock()
	defer fake.getVirtualInstanceQueriesMutex.RUnlock()
	fake.getVirtualInstanceQueriesExecuteMutex.RLock()
	defer fake.getVirtualInstanceQueriesExecuteMutex.RUnlock()
	fake.listCollectionMountsMutex.RLock()
	defer fake.listCollectionMountsMutex.RUnlock()
	fake.listCollectionMountsExecuteMutex.RLock()
	defer fake.listCollectionMountsExecuteMutex.RUnlock()
	fake.listVirtualInstancesMutex.RLock()
	defer fake.listVirtualInstancesMutex.RUnlock()
	fake.listVirtualInstancesExecuteMutex.RLock()
	defer fake.listVirtualInstancesExecuteMutex.RUnlock()
	fake.mountCollectionMutex.RLock()
	defer fake.mountCollectionMutex.RUnlock()
	fake.mountCollectionExecuteMutex.RLock()
	defer fake.mountCollectionExecuteMutex.RUnlock()
	fake.queryVirtualInstanceMutex.RLock()
	defer fake.queryVirtualInstanceMutex.RUnlock()
	fake.queryVirtualInstanceExecuteMutex.RLock()
	defer fake.queryVirtualInstanceExecuteMutex.RUnlock()
	fake.resumeVirtualInstanceMutex.RLock()
	defer fake.resumeVirtualInstanceMutex.RUnlock()
	fake.resumeVirtualInstanceExecuteMutex.RLock()
	defer fake.resumeVirtualInstanceExecuteMutex.RUnlock()
	fake.setVirtualInstanceMutex.RLock()
	defer fake.setVirtualInstanceMutex.RUnlock()
	fake.setVirtualInstanceExecuteMutex.RLock()
	defer fake.setVirtualInstanceExecuteMutex.RUnlock()
	fake.suspendVirtualInstanceMutex.RLock()
	defer fake.suspendVirtualInstanceMutex.RUnlock()
	fake.suspendVirtualInstanceExecuteMutex.RLock()
	defer fake.suspendVirtualInstanceExecuteMutex.RUnlock()
	fake.unmountCollectionMutex.RLock()
	defer fake.unmountCollectionMutex.RUnlock()
	fake.unmountCollectionExecuteMutex.RLock()
	defer fake.unmountCollectionExecuteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVirtualInstancesApi) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ openapi.VirtualInstancesApi = new(FakeVirtualInstancesApi)
